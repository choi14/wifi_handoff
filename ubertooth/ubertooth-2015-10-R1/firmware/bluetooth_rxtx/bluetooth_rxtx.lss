
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f68  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000bf68  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002960  10000960  0000c8a6  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_info   000072bc  00000000  00000000  000109f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001efc  00000000  00000000  00017cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000730  00000000  00000000  00019baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000810  00000000  00000000  0001a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000690  00000000  00000000  0001aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000317c  00000000  00000000  0001b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002afd  00000000  00000000  0001e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001cc0  00000000  00000000  00020dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 41 9b 00 00 ad 9b 00 00 ad 9b 00 00     .?..A...........
    4010:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 ad 9b 00 00     ................
    4030:	ad 9b 00 00 00 00 00 00 ad 9b 00 00 ad 9b 00 00     ................
    4040:	ad 9b 00 00 35 56 00 00 ad 9b 00 00 ad 9b 00 00     ....5V..........
    4050:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00 ad 9b 00 00     ................
    4060:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00 ad 9b 00 00     ................
    4070:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00 ad 9b 00 00     ................
    4080:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00 ad 9b 00 00     ................
    4090:	ad 9b 00 00 51 57 00 00 ad 9b 00 00 ad 9b 00 00     ....QW..........
    40a0:	35 9b 00 00 ad 9b 00 00 d9 5b 00 00 ad 9b 00 00     5........[......
    40b0:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00 ad 9b 00 00     ................
    40c0:	ad 9b 00 00 ad 9b 00 00 ad 9b 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40ce:	4805      	ldr	r0, [pc, #20]	; (40e4 <deregister_tm_clones+0x18>)
    40d0:	1a1b      	subs	r3, r3, r0
    40d2:	2b06      	cmp	r3, #6
    40d4:	d902      	bls.n	40dc <deregister_tm_clones+0x10>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <deregister_tm_clones+0x1c>)
    40d8:	b103      	cbz	r3, 40dc <deregister_tm_clones+0x10>
    40da:	4718      	bx	r3
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	10000963 	.word	0x10000963
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000

000040ec <register_tm_clones>:
    40ec:	4905      	ldr	r1, [pc, #20]	; (4104 <register_tm_clones+0x18>)
    40ee:	4806      	ldr	r0, [pc, #24]	; (4108 <register_tm_clones+0x1c>)
    40f0:	1a09      	subs	r1, r1, r0
    40f2:	1089      	asrs	r1, r1, #2
    40f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    40f8:	1049      	asrs	r1, r1, #1
    40fa:	d002      	beq.n	4102 <register_tm_clones+0x16>
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <register_tm_clones+0x20>)
    40fe:	b103      	cbz	r3, 4102 <register_tm_clones+0x16>
    4100:	4718      	bx	r3
    4102:	4770      	bx	lr
    4104:	10000960 	.word	0x10000960
    4108:	10000960 	.word	0x10000960
    410c:	00000000 	.word	0x00000000

00004110 <__do_global_dtors_aux>:
    4110:	b510      	push	{r4, lr}
    4112:	4c06      	ldr	r4, [pc, #24]	; (412c <__do_global_dtors_aux+0x1c>)
    4114:	7823      	ldrb	r3, [r4, #0]
    4116:	b943      	cbnz	r3, 412a <__do_global_dtors_aux+0x1a>
    4118:	f7ff ffd8 	bl	40cc <deregister_tm_clones>
    411c:	4b04      	ldr	r3, [pc, #16]	; (4130 <__do_global_dtors_aux+0x20>)
    411e:	b113      	cbz	r3, 4126 <__do_global_dtors_aux+0x16>
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <__do_global_dtors_aux+0x24>)
    4122:	f3af 8000 	nop.w
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
    412a:	bd10      	pop	{r4, pc}
    412c:	10000960 	.word	0x10000960
    4130:	00000000 	.word	0x00000000
    4134:	0000bf40 	.word	0x0000bf40

00004138 <frame_dummy>:
    4138:	b508      	push	{r3, lr}
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <frame_dummy+0x24>)
    413c:	b11b      	cbz	r3, 4146 <frame_dummy+0xe>
    413e:	4808      	ldr	r0, [pc, #32]	; (4160 <frame_dummy+0x28>)
    4140:	4908      	ldr	r1, [pc, #32]	; (4164 <frame_dummy+0x2c>)
    4142:	f3af 8000 	nop.w
    4146:	4808      	ldr	r0, [pc, #32]	; (4168 <frame_dummy+0x30>)
    4148:	6803      	ldr	r3, [r0, #0]
    414a:	b913      	cbnz	r3, 4152 <frame_dummy+0x1a>
    414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4150:	e7cc      	b.n	40ec <register_tm_clones>
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <frame_dummy+0x34>)
    4154:	2b00      	cmp	r3, #0
    4156:	d0f9      	beq.n	414c <frame_dummy+0x14>
    4158:	4798      	blx	r3
    415a:	e7f7      	b.n	414c <frame_dummy+0x14>
    415c:	00000000 	.word	0x00000000
    4160:	0000bf40 	.word	0x0000bf40
    4164:	10000964 	.word	0x10000964
    4168:	10000960 	.word	0x10000960
    416c:	00000000 	.word	0x00000000

00004170 <atexit>:
    4170:	4601      	mov	r1, r0
    4172:	2000      	movs	r0, #0
    4174:	4602      	mov	r2, r0
    4176:	4603      	mov	r3, r0
    4178:	f000 b88c 	b.w	4294 <__register_exitproc>

0000417c <__libc_fini_array>:
    417c:	b538      	push	{r3, r4, r5, lr}
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <__libc_fini_array+0x24>)
    4180:	4d08      	ldr	r5, [pc, #32]	; (41a4 <__libc_fini_array+0x28>)
    4182:	1aed      	subs	r5, r5, r3
    4184:	10ac      	asrs	r4, r5, #2
    4186:	bf18      	it	ne
    4188:	18ed      	addne	r5, r5, r3
    418a:	d005      	beq.n	4198 <__libc_fini_array+0x1c>
    418c:	3c01      	subs	r4, #1
    418e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    4192:	4798      	blx	r3
    4194:	2c00      	cmp	r4, #0
    4196:	d1f9      	bne.n	418c <__libc_fini_array+0x10>
    4198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    419c:	f007 beda 	b.w	bf54 <_fini>
    41a0:	0000bf60 	.word	0x0000bf60
    41a4:	0000bf64 	.word	0x0000bf64

000041a8 <__libc_init_array>:
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4e0f      	ldr	r6, [pc, #60]	; (41e8 <__libc_init_array+0x40>)
    41ac:	4d0f      	ldr	r5, [pc, #60]	; (41ec <__libc_init_array+0x44>)
    41ae:	1b76      	subs	r6, r6, r5
    41b0:	10b6      	asrs	r6, r6, #2
    41b2:	bf18      	it	ne
    41b4:	2400      	movne	r4, #0
    41b6:	d005      	beq.n	41c4 <__libc_init_array+0x1c>
    41b8:	3401      	adds	r4, #1
    41ba:	f855 3b04 	ldr.w	r3, [r5], #4
    41be:	4798      	blx	r3
    41c0:	42a6      	cmp	r6, r4
    41c2:	d1f9      	bne.n	41b8 <__libc_init_array+0x10>
    41c4:	4e0a      	ldr	r6, [pc, #40]	; (41f0 <__libc_init_array+0x48>)
    41c6:	4d0b      	ldr	r5, [pc, #44]	; (41f4 <__libc_init_array+0x4c>)
    41c8:	f007 feba 	bl	bf40 <_init>
    41cc:	1b76      	subs	r6, r6, r5
    41ce:	10b6      	asrs	r6, r6, #2
    41d0:	bf18      	it	ne
    41d2:	2400      	movne	r4, #0
    41d4:	d006      	beq.n	41e4 <__libc_init_array+0x3c>
    41d6:	3401      	adds	r4, #1
    41d8:	f855 3b04 	ldr.w	r3, [r5], #4
    41dc:	4798      	blx	r3
    41de:	42a6      	cmp	r6, r4
    41e0:	d1f9      	bne.n	41d6 <__libc_init_array+0x2e>
    41e2:	bd70      	pop	{r4, r5, r6, pc}
    41e4:	bd70      	pop	{r4, r5, r6, pc}
    41e6:	bf00      	nop
    41e8:	0000bf4c 	.word	0x0000bf4c
    41ec:	0000bf4c 	.word	0x0000bf4c
    41f0:	0000bf54 	.word	0x0000bf54
    41f4:	0000bf4c 	.word	0x0000bf4c

000041f8 <memset>:
    41f8:	b470      	push	{r4, r5, r6}
    41fa:	0784      	lsls	r4, r0, #30
    41fc:	d046      	beq.n	428c <memset+0x94>
    41fe:	1e54      	subs	r4, r2, #1
    4200:	2a00      	cmp	r2, #0
    4202:	d041      	beq.n	4288 <memset+0x90>
    4204:	b2cd      	uxtb	r5, r1
    4206:	4603      	mov	r3, r0
    4208:	e002      	b.n	4210 <memset+0x18>
    420a:	1e62      	subs	r2, r4, #1
    420c:	b3e4      	cbz	r4, 4288 <memset+0x90>
    420e:	4614      	mov	r4, r2
    4210:	f803 5b01 	strb.w	r5, [r3], #1
    4214:	079a      	lsls	r2, r3, #30
    4216:	d1f8      	bne.n	420a <memset+0x12>
    4218:	2c03      	cmp	r4, #3
    421a:	d92e      	bls.n	427a <memset+0x82>
    421c:	b2cd      	uxtb	r5, r1
    421e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4222:	2c0f      	cmp	r4, #15
    4224:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4228:	d919      	bls.n	425e <memset+0x66>
    422a:	4626      	mov	r6, r4
    422c:	f103 0210 	add.w	r2, r3, #16
    4230:	3e10      	subs	r6, #16
    4232:	2e0f      	cmp	r6, #15
    4234:	f842 5c10 	str.w	r5, [r2, #-16]
    4238:	f842 5c0c 	str.w	r5, [r2, #-12]
    423c:	f842 5c08 	str.w	r5, [r2, #-8]
    4240:	f842 5c04 	str.w	r5, [r2, #-4]
    4244:	f102 0210 	add.w	r2, r2, #16
    4248:	d8f2      	bhi.n	4230 <memset+0x38>
    424a:	f1a4 0210 	sub.w	r2, r4, #16
    424e:	f022 020f 	bic.w	r2, r2, #15
    4252:	f004 040f 	and.w	r4, r4, #15
    4256:	3210      	adds	r2, #16
    4258:	2c03      	cmp	r4, #3
    425a:	4413      	add	r3, r2
    425c:	d90d      	bls.n	427a <memset+0x82>
    425e:	461e      	mov	r6, r3
    4260:	4622      	mov	r2, r4
    4262:	3a04      	subs	r2, #4
    4264:	2a03      	cmp	r2, #3
    4266:	f846 5b04 	str.w	r5, [r6], #4
    426a:	d8fa      	bhi.n	4262 <memset+0x6a>
    426c:	1f22      	subs	r2, r4, #4
    426e:	f022 0203 	bic.w	r2, r2, #3
    4272:	3204      	adds	r2, #4
    4274:	4413      	add	r3, r2
    4276:	f004 0403 	and.w	r4, r4, #3
    427a:	b12c      	cbz	r4, 4288 <memset+0x90>
    427c:	b2c9      	uxtb	r1, r1
    427e:	441c      	add	r4, r3
    4280:	f803 1b01 	strb.w	r1, [r3], #1
    4284:	42a3      	cmp	r3, r4
    4286:	d1fb      	bne.n	4280 <memset+0x88>
    4288:	bc70      	pop	{r4, r5, r6}
    428a:	4770      	bx	lr
    428c:	4614      	mov	r4, r2
    428e:	4603      	mov	r3, r0
    4290:	e7c2      	b.n	4218 <memset+0x20>
    4292:	bf00      	nop

00004294 <__register_exitproc>:
    4294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4298:	4c25      	ldr	r4, [pc, #148]	; (4330 <__register_exitproc+0x9c>)
    429a:	4606      	mov	r6, r0
    429c:	6825      	ldr	r5, [r4, #0]
    429e:	4688      	mov	r8, r1
    42a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    42a4:	4692      	mov	sl, r2
    42a6:	4699      	mov	r9, r3
    42a8:	b3c4      	cbz	r4, 431c <__register_exitproc+0x88>
    42aa:	6860      	ldr	r0, [r4, #4]
    42ac:	281f      	cmp	r0, #31
    42ae:	dc17      	bgt.n	42e0 <__register_exitproc+0x4c>
    42b0:	1c41      	adds	r1, r0, #1
    42b2:	b176      	cbz	r6, 42d2 <__register_exitproc+0x3e>
    42b4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    42b8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    42bc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    42c0:	2201      	movs	r2, #1
    42c2:	4082      	lsls	r2, r0
    42c4:	4315      	orrs	r5, r2
    42c6:	2e02      	cmp	r6, #2
    42c8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    42cc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    42d0:	d01e      	beq.n	4310 <__register_exitproc+0x7c>
    42d2:	1c83      	adds	r3, r0, #2
    42d4:	6061      	str	r1, [r4, #4]
    42d6:	2000      	movs	r0, #0
    42d8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42e0:	4b14      	ldr	r3, [pc, #80]	; (4334 <__register_exitproc+0xa0>)
    42e2:	b303      	cbz	r3, 4326 <__register_exitproc+0x92>
    42e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42e8:	f3af 8000 	nop.w
    42ec:	4604      	mov	r4, r0
    42ee:	b1d0      	cbz	r0, 4326 <__register_exitproc+0x92>
    42f0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42f4:	2700      	movs	r7, #0
    42f6:	e884 0088 	stmia.w	r4, {r3, r7}
    42fa:	4638      	mov	r0, r7
    42fc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4300:	2101      	movs	r1, #1
    4302:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4306:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    430a:	2e00      	cmp	r6, #0
    430c:	d0e1      	beq.n	42d2 <__register_exitproc+0x3e>
    430e:	e7d1      	b.n	42b4 <__register_exitproc+0x20>
    4310:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4314:	431a      	orrs	r2, r3
    4316:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    431a:	e7da      	b.n	42d2 <__register_exitproc+0x3e>
    431c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4320:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4324:	e7c1      	b.n	42aa <__register_exitproc+0x16>
    4326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    432e:	bf00      	nop
    4330:	0000b49c 	.word	0x0000b49c
    4334:	00000000 	.word	0x00000000

00004338 <register_fini>:
    4338:	4b02      	ldr	r3, [pc, #8]	; (4344 <register_fini+0xc>)
    433a:	b113      	cbz	r3, 4342 <register_fini+0xa>
    433c:	4802      	ldr	r0, [pc, #8]	; (4348 <register_fini+0x10>)
    433e:	f7ff bf17 	b.w	4170 <atexit>
    4342:	4770      	bx	lr
    4344:	00000000 	.word	0x00000000
    4348:	0000417d 	.word	0x0000417d

0000434c <rssi_reset>:
int32_t rssi_sum = 0;
int8_t rssi_avg;
rssi_s rssi_sample[9];

static void rssi_reset(void)
{
    434c:	b580      	push	{r7, lr}
    434e:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4350:	4b0a      	ldr	r3, [pc, #40]	; (437c <rssi_reset+0x30>)
    4352:	2200      	movs	r2, #0
    4354:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    4356:	4b0a      	ldr	r3, [pc, #40]	; (4380 <rssi_reset+0x34>)
    4358:	2200      	movs	r2, #0
    435a:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <rssi_reset+0x38>)
    435e:	2280      	movs	r2, #128	; 0x80
    4360:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    4362:	4b09      	ldr	r3, [pc, #36]	; (4388 <rssi_reset+0x3c>)
    4364:	227f      	movs	r2, #127	; 0x7f
    4366:	701a      	strb	r2, [r3, #0]
	rssi_avg = 0;
    4368:	4b08      	ldr	r3, [pc, #32]	; (438c <rssi_reset+0x40>)
    436a:	2200      	movs	r2, #0
    436c:	701a      	strb	r2, [r3, #0]
	memset(rssi_sample, 0, sizeof(rssi_sample)*9);
    436e:	4808      	ldr	r0, [pc, #32]	; (4390 <rssi_reset+0x44>)
    4370:	2100      	movs	r1, #0
    4372:	f44f 7222 	mov.w	r2, #648	; 0x288
    4376:	f7ff ff3f 	bl	41f8 <memset>
}
    437a:	bd80      	pop	{r7, pc}
    437c:	10000a49 	.word	0x10000a49
    4380:	10000a4c 	.word	0x10000a4c
    4384:	10000b04 	.word	0x10000b04
    4388:	10000c00 	.word	0x10000c00
    438c:	1000106d 	.word	0x1000106d
    4390:	10000bb8 	.word	0x10000bb8

00004394 <rssi_add>:

static void rssi_add(int8_t v)
{
    4394:	b480      	push	{r7}
    4396:	b083      	sub	sp, #12
    4398:	af00      	add	r7, sp, #0
    439a:	4603      	mov	r3, r0
    439c:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    439e:	4b14      	ldr	r3, [pc, #80]	; (43f0 <rssi_add+0x5c>)
    43a0:	781b      	ldrb	r3, [r3, #0]
    43a2:	b25a      	sxtb	r2, r3
    43a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    43a8:	4293      	cmp	r3, r2
    43aa:	bfb8      	it	lt
    43ac:	4613      	movlt	r3, r2
    43ae:	b2da      	uxtb	r2, r3
    43b0:	4b0f      	ldr	r3, [pc, #60]	; (43f0 <rssi_add+0x5c>)
    43b2:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    43b4:	4b0f      	ldr	r3, [pc, #60]	; (43f4 <rssi_add+0x60>)
    43b6:	781b      	ldrb	r3, [r3, #0]
    43b8:	b25a      	sxtb	r2, r3
    43ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
    43be:	4293      	cmp	r3, r2
    43c0:	bfa8      	it	ge
    43c2:	4613      	movge	r3, r2
    43c4:	b2da      	uxtb	r2, r3
    43c6:	4b0b      	ldr	r3, [pc, #44]	; (43f4 <rssi_add+0x60>)
    43c8:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    43ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    43ce:	021a      	lsls	r2, r3, #8
    43d0:	4b09      	ldr	r3, [pc, #36]	; (43f8 <rssi_add+0x64>)
    43d2:	681b      	ldr	r3, [r3, #0]
    43d4:	4413      	add	r3, r2
    43d6:	4a08      	ldr	r2, [pc, #32]	; (43f8 <rssi_add+0x64>)
    43d8:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    43da:	4b08      	ldr	r3, [pc, #32]	; (43fc <rssi_add+0x68>)
    43dc:	781b      	ldrb	r3, [r3, #0]
    43de:	3301      	adds	r3, #1
    43e0:	b2da      	uxtb	r2, r3
    43e2:	4b06      	ldr	r3, [pc, #24]	; (43fc <rssi_add+0x68>)
    43e4:	701a      	strb	r2, [r3, #0]
}
    43e6:	370c      	adds	r7, #12
    43e8:	46bd      	mov	sp, r7
    43ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    43ee:	4770      	bx	lr
    43f0:	10000b04 	.word	0x10000b04
    43f4:	10000c00 	.word	0x10000c00
    43f8:	10000a4c 	.word	0x10000a4c
    43fc:	10000a49 	.word	0x10000a49

00004400 <rssi_add_pkt>:

//gjlee
static void rssi_add_pkt(int8_t v)
{
    4400:	b480      	push	{r7}
    4402:	b083      	sub	sp, #12
    4404:	af00      	add	r7, sp, #0
    4406:	4603      	mov	r3, r0
    4408:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    440a:	4b29      	ldr	r3, [pc, #164]	; (44b0 <rssi_add_pkt+0xb0>)
    440c:	781b      	ldrb	r3, [r3, #0]
    440e:	b25a      	sxtb	r2, r3
    4410:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4414:	4293      	cmp	r3, r2
    4416:	bfb8      	it	lt
    4418:	4613      	movlt	r3, r2
    441a:	b2da      	uxtb	r2, r3
    441c:	4b24      	ldr	r3, [pc, #144]	; (44b0 <rssi_add_pkt+0xb0>)
    441e:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4420:	4b24      	ldr	r3, [pc, #144]	; (44b4 <rssi_add_pkt+0xb4>)
    4422:	781b      	ldrb	r3, [r3, #0]
    4424:	b25a      	sxtb	r2, r3
    4426:	f997 3007 	ldrsb.w	r3, [r7, #7]
    442a:	4293      	cmp	r3, r2
    442c:	bfa8      	it	ge
    442e:	4613      	movge	r3, r2
    4430:	b2da      	uxtb	r2, r3
    4432:	4b20      	ldr	r3, [pc, #128]	; (44b4 <rssi_add_pkt+0xb4>)
    4434:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    4436:	f997 3007 	ldrsb.w	r3, [r7, #7]
    443a:	021a      	lsls	r2, r3, #8
    443c:	4b1e      	ldr	r3, [pc, #120]	; (44b8 <rssi_add_pkt+0xb8>)
    443e:	681b      	ldr	r3, [r3, #0]
    4440:	4413      	add	r3, r2
    4442:	4a1d      	ldr	r2, [pc, #116]	; (44b8 <rssi_add_pkt+0xb8>)
    4444:	6013      	str	r3, [r2, #0]
	if(rssi_count < 9){
    4446:	4b1d      	ldr	r3, [pc, #116]	; (44bc <rssi_add_pkt+0xbc>)
    4448:	781b      	ldrb	r3, [r3, #0]
    444a:	2b08      	cmp	r3, #8
    444c:	d824      	bhi.n	4498 <rssi_add_pkt+0x98>
		rssi_sample[rssi_count].rssi = v;
    444e:	4b1b      	ldr	r3, [pc, #108]	; (44bc <rssi_add_pkt+0xbc>)
    4450:	781b      	ldrb	r3, [r3, #0]
    4452:	461a      	mov	r2, r3
    4454:	79f9      	ldrb	r1, [r7, #7]
    4456:	4b1a      	ldr	r3, [pc, #104]	; (44c0 <rssi_add_pkt+0xc0>)
    4458:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		rssi_sample[rssi_count].clkn_high = (clkn >> 20) & 0xff;
    445c:	4b17      	ldr	r3, [pc, #92]	; (44bc <rssi_add_pkt+0xbc>)
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	4618      	mov	r0, r3
    4462:	4b18      	ldr	r3, [pc, #96]	; (44c4 <rssi_add_pkt+0xc4>)
    4464:	681b      	ldr	r3, [r3, #0]
    4466:	0d1b      	lsrs	r3, r3, #20
    4468:	b2d9      	uxtb	r1, r3
    446a:	4a15      	ldr	r2, [pc, #84]	; (44c0 <rssi_add_pkt+0xc0>)
    446c:	00c3      	lsls	r3, r0, #3
    446e:	4413      	add	r3, r2
    4470:	460a      	mov	r2, r1
    4472:	705a      	strb	r2, [r3, #1]
		rssi_sample[rssi_count].clk100ns = CLK100NS;
    4474:	4b11      	ldr	r3, [pc, #68]	; (44bc <rssi_add_pkt+0xbc>)
    4476:	781b      	ldrb	r3, [r3, #0]
    4478:	4618      	mov	r0, r3
    447a:	4b12      	ldr	r3, [pc, #72]	; (44c4 <rssi_add_pkt+0xc4>)
    447c:	681b      	ldr	r3, [r3, #0]
    447e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4482:	f640 4235 	movw	r2, #3125	; 0xc35
    4486:	fb02 f203 	mul.w	r2, r2, r3
    448a:	4b0f      	ldr	r3, [pc, #60]	; (44c8 <rssi_add_pkt+0xc8>)
    448c:	681b      	ldr	r3, [r3, #0]
    448e:	441a      	add	r2, r3
    4490:	490b      	ldr	r1, [pc, #44]	; (44c0 <rssi_add_pkt+0xc0>)
    4492:	00c3      	lsls	r3, r0, #3
    4494:	440b      	add	r3, r1
    4496:	605a      	str	r2, [r3, #4]
	}
	rssi_count += 1;
    4498:	4b08      	ldr	r3, [pc, #32]	; (44bc <rssi_add_pkt+0xbc>)
    449a:	781b      	ldrb	r3, [r3, #0]
    449c:	3301      	adds	r3, #1
    449e:	b2da      	uxtb	r2, r3
    44a0:	4b06      	ldr	r3, [pc, #24]	; (44bc <rssi_add_pkt+0xbc>)
    44a2:	701a      	strb	r2, [r3, #0]
}
    44a4:	370c      	adds	r7, #12
    44a6:	46bd      	mov	sp, r7
    44a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    44ac:	4770      	bx	lr
    44ae:	bf00      	nop
    44b0:	10000b04 	.word	0x10000b04
    44b4:	10000c00 	.word	0x10000c00
    44b8:	10000a4c 	.word	0x10000a4c
    44bc:	10000a49 	.word	0x10000a49
    44c0:	10000bb8 	.word	0x10000bb8
    44c4:	10000c2c 	.word	0x10000c2c
    44c8:	40004008 	.word	0x40004008

000044cc <rssi_update_pkt>:

//gjlee
static void rssi_update_pkt(void)
{
    44cc:	b480      	push	{r7}
    44ce:	b083      	sub	sp, #12
    44d0:	af00      	add	r7, sp, #0
	int i, j;
	int32_t avg;
	if (rssi_count != 0)
    44d2:	4b0d      	ldr	r3, [pc, #52]	; (4508 <rssi_update_pkt+0x3c>)
    44d4:	781b      	ldrb	r3, [r3, #0]
    44d6:	2b00      	cmp	r3, #0
    44d8:	d007      	beq.n	44ea <rssi_update_pkt+0x1e>
		avg = (rssi_sum  + 128) / rssi_count;
    44da:	4b0c      	ldr	r3, [pc, #48]	; (450c <rssi_update_pkt+0x40>)
    44dc:	681b      	ldr	r3, [r3, #0]
    44de:	3380      	adds	r3, #128	; 0x80
    44e0:	4a09      	ldr	r2, [pc, #36]	; (4508 <rssi_update_pkt+0x3c>)
    44e2:	7812      	ldrb	r2, [r2, #0]
    44e4:	fb93 f3f2 	sdiv	r3, r3, r2
    44e8:	607b      	str	r3, [r7, #4]
	rssi_avg = (int8_t)((avg + 128) / 256);
    44ea:	687b      	ldr	r3, [r7, #4]
    44ec:	3380      	adds	r3, #128	; 0x80
    44ee:	2b00      	cmp	r3, #0
    44f0:	da00      	bge.n	44f4 <rssi_update_pkt+0x28>
    44f2:	33ff      	adds	r3, #255	; 0xff
    44f4:	121b      	asrs	r3, r3, #8
    44f6:	b2da      	uxtb	r2, r3
    44f8:	4b05      	ldr	r3, [pc, #20]	; (4510 <rssi_update_pkt+0x44>)
    44fa:	701a      	strb	r2, [r3, #0]
}
    44fc:	370c      	adds	r7, #12
    44fe:	46bd      	mov	sp, r7
    4500:	f85d 7b04 	ldr.w	r7, [sp], #4
    4504:	4770      	bx	lr
    4506:	bf00      	nop
    4508:	10000a49 	.word	0x10000a49
    450c:	10000a4c 	.word	0x10000a4c
    4510:	1000106d 	.word	0x1000106d

00004514 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    4514:	b480      	push	{r7}
    4516:	b085      	sub	sp, #20
    4518:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    451a:	4b1f      	ldr	r3, [pc, #124]	; (4598 <rssi_iir_update+0x84>)
    451c:	781b      	ldrb	r3, [r3, #0]
    451e:	2b00      	cmp	r3, #0
    4520:	d006      	beq.n	4530 <rssi_iir_update+0x1c>
		i = channel - 2402;
    4522:	4b1e      	ldr	r3, [pc, #120]	; (459c <rssi_iir_update+0x88>)
    4524:	881b      	ldrh	r3, [r3, #0]
    4526:	b29b      	uxth	r3, r3
    4528:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    452c:	60fb      	str	r3, [r7, #12]
    452e:	e001      	b.n	4534 <rssi_iir_update+0x20>
	else
		i = 0;
    4530:	2300      	movs	r3, #0
    4532:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    4534:	4b1a      	ldr	r3, [pc, #104]	; (45a0 <rssi_iir_update+0x8c>)
    4536:	781b      	ldrb	r3, [r3, #0]
    4538:	2b00      	cmp	r3, #0
    453a:	d008      	beq.n	454e <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    453c:	4b19      	ldr	r3, [pc, #100]	; (45a4 <rssi_iir_update+0x90>)
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	3380      	adds	r3, #128	; 0x80
    4542:	4a17      	ldr	r2, [pc, #92]	; (45a0 <rssi_iir_update+0x8c>)
    4544:	7812      	ldrb	r2, [r2, #0]
    4546:	fb93 f3f2 	sdiv	r3, r3, r2
    454a:	60bb      	str	r3, [r7, #8]
    454c:	e001      	b.n	4552 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    454e:	2300      	movs	r3, #0
    4550:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    4552:	4a15      	ldr	r2, [pc, #84]	; (45a8 <rssi_iir_update+0x94>)
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    455a:	b21a      	sxth	r2, r3
    455c:	4613      	mov	r3, r2
    455e:	019b      	lsls	r3, r3, #6
    4560:	1a9b      	subs	r3, r3, r2
    4562:	009b      	lsls	r3, r3, #2
    4564:	4413      	add	r3, r2
    4566:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    4568:	68ba      	ldr	r2, [r7, #8]
    456a:	4613      	mov	r3, r2
    456c:	005b      	lsls	r3, r3, #1
    456e:	4413      	add	r3, r2
    4570:	687a      	ldr	r2, [r7, #4]
    4572:	4413      	add	r3, r2
    4574:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4576:	687b      	ldr	r3, [r7, #4]
    4578:	3380      	adds	r3, #128	; 0x80
    457a:	2b00      	cmp	r3, #0
    457c:	da00      	bge.n	4580 <rssi_iir_update+0x6c>
    457e:	33ff      	adds	r3, #255	; 0xff
    4580:	121b      	asrs	r3, r3, #8
    4582:	b299      	uxth	r1, r3
    4584:	4a08      	ldr	r2, [pc, #32]	; (45a8 <rssi_iir_update+0x94>)
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    458c:	3714      	adds	r7, #20
    458e:	46bd      	mov	sp, r7
    4590:	f85d 7b04 	ldr.w	r7, [sp], #4
    4594:	4770      	bx	lr
    4596:	bf00      	nop
    4598:	1000097c 	.word	0x1000097c
    459c:	1000049c 	.word	0x1000049c
    45a0:	10000a49 	.word	0x10000a49
    45a4:	10000a4c 	.word	0x10000a4c
    45a8:	100009a0 	.word	0x100009a0

000045ac <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    45ac:	b580      	push	{r7, lr}
    45ae:	b082      	sub	sp, #8
    45b0:	af00      	add	r7, sp, #0
    45b2:	4603      	mov	r3, r0
    45b4:	460a      	mov	r2, r1
    45b6:	71fb      	strb	r3, [r7, #7]
    45b8:	4613      	mov	r3, r2
    45ba:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    45bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    45c0:	f113 0f14 	cmn.w	r3, #20
    45c4:	d00d      	beq.n	45e2 <cs_threshold_set+0x36>
    45c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    45ca:	f113 0f13 	cmn.w	r3, #19
    45ce:	da08      	bge.n	45e2 <cs_threshold_set+0x36>
    45d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    45d4:	f06f 0277 	mvn.w	r2, #119	; 0x77
    45d8:	4293      	cmp	r3, r2
    45da:	bfb8      	it	lt
    45dc:	4613      	movlt	r3, r2
    45de:	b2db      	uxtb	r3, r3
    45e0:	e000      	b.n	45e4 <cs_threshold_set+0x38>
    45e2:	23ec      	movs	r3, #236	; 0xec
    45e4:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    45e6:	79fb      	ldrb	r3, [r7, #7]
    45e8:	3338      	adds	r3, #56	; 0x38
    45ea:	b2db      	uxtb	r3, r3
    45ec:	b29b      	uxth	r3, r3
    45ee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    45f2:	b29a      	uxth	r2, r3
    45f4:	79bb      	ldrb	r3, [r7, #6]
    45f6:	b29b      	uxth	r3, r3
    45f8:	f003 0303 	and.w	r3, r3, #3
    45fc:	b29b      	uxth	r3, r3
    45fe:	4313      	orrs	r3, r2
    4600:	b29b      	uxth	r3, r3
    4602:	b29b      	uxth	r3, r3
    4604:	2006      	movs	r0, #6
    4606:	4619      	mov	r1, r3
    4608:	f005 fcb8 	bl	9f7c <cc2400_set>
	cs_threshold_cur = level;
    460c:	4a08      	ldr	r2, [pc, #32]	; (4630 <cs_threshold_set+0x84>)
    460e:	79fb      	ldrb	r3, [r7, #7]
    4610:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    4612:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4616:	f113 0f77 	cmn.w	r3, #119	; 0x77
    461a:	bfb4      	ite	lt
    461c:	2301      	movlt	r3, #1
    461e:	2300      	movge	r3, #0
    4620:	b2db      	uxtb	r3, r3
    4622:	461a      	mov	r2, r3
    4624:	4b03      	ldr	r3, [pc, #12]	; (4634 <cs_threshold_set+0x88>)
    4626:	701a      	strb	r2, [r3, #0]
}
    4628:	3708      	adds	r7, #8
    462a:	46bd      	mov	sp, r7
    462c:	bd80      	pop	{r7, pc}
    462e:	bf00      	nop
    4630:	1000044d 	.word	0x1000044d
    4634:	1000097e 	.word	0x1000097e

00004638 <enqueue_rssi>:

static int enqueue_rssi()
{
    4638:	b580      	push	{r7, lr}
    463a:	b082      	sub	sp, #8
    463c:	af00      	add	r7, sp, #0
	usb_pkt_rx *f = usb_enqueue();
    463e:	f004 fa33 	bl	8aa8 <usb_enqueue>
    4642:	6078      	str	r0, [r7, #4]

	/* fail if queue is full */
	if (f == NULL) {
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	2b00      	cmp	r3, #0
    4648:	d109      	bne.n	465e <enqueue_rssi+0x26>
		status |= FIFO_OVERFLOW;
    464a:	4b40      	ldr	r3, [pc, #256]	; (474c <enqueue_rssi+0x114>)
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	b2db      	uxtb	r3, r3
    4650:	f043 0304 	orr.w	r3, r3, #4
    4654:	b2da      	uxtb	r2, r3
    4656:	4b3d      	ldr	r3, [pc, #244]	; (474c <enqueue_rssi+0x114>)
    4658:	701a      	strb	r2, [r3, #0]
		return 0;
    465a:	2300      	movs	r3, #0
    465c:	e072      	b.n	4744 <enqueue_rssi+0x10c>
	}

	usb_pkt_rssi *fr = (usb_pkt_rssi *) f;
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	603b      	str	r3, [r7, #0]

	fr->pkt_type = RSSI_PACKET;
    4662:	683b      	ldr	r3, [r7, #0]
    4664:	2207      	movs	r2, #7
    4666:	701a      	strb	r2, [r3, #0]
	fr->channel = channel - 2402;
    4668:	4b39      	ldr	r3, [pc, #228]	; (4750 <enqueue_rssi+0x118>)
    466a:	881b      	ldrh	r3, [r3, #0]
    466c:	b29b      	uxth	r3, r3
    466e:	b2db      	uxtb	r3, r3
    4670:	3b62      	subs	r3, #98	; 0x62
    4672:	b2da      	uxtb	r2, r3
    4674:	683b      	ldr	r3, [r7, #0]
    4676:	709a      	strb	r2, [r3, #2]
	fr->rssi_max = rssi_max;
    4678:	4b36      	ldr	r3, [pc, #216]	; (4754 <enqueue_rssi+0x11c>)
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	b2da      	uxtb	r2, r3
    467e:	683b      	ldr	r3, [r7, #0]
    4680:	70da      	strb	r2, [r3, #3]
	fr->rssi_min = rssi_min;
    4682:	4b35      	ldr	r3, [pc, #212]	; (4758 <enqueue_rssi+0x120>)
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	b2da      	uxtb	r2, r3
    4688:	683b      	ldr	r3, [r7, #0]
    468a:	711a      	strb	r2, [r3, #4]
	fr->rssi_avg = rssi_avg;
    468c:	4b33      	ldr	r3, [pc, #204]	; (475c <enqueue_rssi+0x124>)
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	b2da      	uxtb	r2, r3
    4692:	683b      	ldr	r3, [r7, #0]
    4694:	715a      	strb	r2, [r3, #5]
	fr->rssi_count = rssi_count;
    4696:	4b32      	ldr	r3, [pc, #200]	; (4760 <enqueue_rssi+0x128>)
    4698:	781a      	ldrb	r2, [r3, #0]
    469a:	683b      	ldr	r3, [r7, #0]
    469c:	719a      	strb	r2, [r3, #6]
	
	USRLED_SET;
    469e:	4b31      	ldr	r3, [pc, #196]	; (4764 <enqueue_rssi+0x12c>)
    46a0:	2202      	movs	r2, #2
    46a2:	601a      	str	r2, [r3, #0]
	
	fr->rssi_sample[0] = rssi_sample[0];
    46a4:	683b      	ldr	r3, [r7, #0]
    46a6:	4a30      	ldr	r2, [pc, #192]	; (4768 <enqueue_rssi+0x130>)
    46a8:	3308      	adds	r3, #8
    46aa:	e892 0003 	ldmia.w	r2, {r0, r1}
    46ae:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[1] = rssi_sample[1];
    46b2:	683b      	ldr	r3, [r7, #0]
    46b4:	4a2c      	ldr	r2, [pc, #176]	; (4768 <enqueue_rssi+0x130>)
    46b6:	3310      	adds	r3, #16
    46b8:	3208      	adds	r2, #8
    46ba:	e892 0003 	ldmia.w	r2, {r0, r1}
    46be:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[2] = rssi_sample[2];
    46c2:	683b      	ldr	r3, [r7, #0]
    46c4:	4a28      	ldr	r2, [pc, #160]	; (4768 <enqueue_rssi+0x130>)
    46c6:	3318      	adds	r3, #24
    46c8:	3210      	adds	r2, #16
    46ca:	e892 0003 	ldmia.w	r2, {r0, r1}
    46ce:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[3] = rssi_sample[3];
    46d2:	683b      	ldr	r3, [r7, #0]
    46d4:	4a24      	ldr	r2, [pc, #144]	; (4768 <enqueue_rssi+0x130>)
    46d6:	3320      	adds	r3, #32
    46d8:	3218      	adds	r2, #24
    46da:	e892 0003 	ldmia.w	r2, {r0, r1}
    46de:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[4] = rssi_sample[4];
    46e2:	683b      	ldr	r3, [r7, #0]
    46e4:	4a20      	ldr	r2, [pc, #128]	; (4768 <enqueue_rssi+0x130>)
    46e6:	3328      	adds	r3, #40	; 0x28
    46e8:	3220      	adds	r2, #32
    46ea:	e892 0003 	ldmia.w	r2, {r0, r1}
    46ee:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[5] = rssi_sample[5];
    46f2:	683b      	ldr	r3, [r7, #0]
    46f4:	4a1c      	ldr	r2, [pc, #112]	; (4768 <enqueue_rssi+0x130>)
    46f6:	3330      	adds	r3, #48	; 0x30
    46f8:	3228      	adds	r2, #40	; 0x28
    46fa:	e892 0003 	ldmia.w	r2, {r0, r1}
    46fe:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[6] = rssi_sample[6];
    4702:	683b      	ldr	r3, [r7, #0]
    4704:	4a18      	ldr	r2, [pc, #96]	; (4768 <enqueue_rssi+0x130>)
    4706:	3338      	adds	r3, #56	; 0x38
    4708:	3230      	adds	r2, #48	; 0x30
    470a:	e892 0003 	ldmia.w	r2, {r0, r1}
    470e:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[7] = rssi_sample[7];
    4712:	683b      	ldr	r3, [r7, #0]
    4714:	4a14      	ldr	r2, [pc, #80]	; (4768 <enqueue_rssi+0x130>)
    4716:	3340      	adds	r3, #64	; 0x40
    4718:	3238      	adds	r2, #56	; 0x38
    471a:	e892 0003 	ldmia.w	r2, {r0, r1}
    471e:	e883 0003 	stmia.w	r3, {r0, r1}
	fr->rssi_sample[8] = rssi_sample[8];
    4722:	683b      	ldr	r3, [r7, #0]
    4724:	4a10      	ldr	r2, [pc, #64]	; (4768 <enqueue_rssi+0x130>)
    4726:	3348      	adds	r3, #72	; 0x48
    4728:	3240      	adds	r2, #64	; 0x40
    472a:	e892 0003 	ldmia.w	r2, {r0, r1}
    472e:	e883 0003 	stmia.w	r3, {r0, r1}

	fr->status = status;
    4732:	4b06      	ldr	r3, [pc, #24]	; (474c <enqueue_rssi+0x114>)
    4734:	781b      	ldrb	r3, [r3, #0]
    4736:	b2da      	uxtb	r2, r3
    4738:	683b      	ldr	r3, [r7, #0]
    473a:	705a      	strb	r2, [r3, #1]
	status = 0;
    473c:	4b03      	ldr	r3, [pc, #12]	; (474c <enqueue_rssi+0x114>)
    473e:	2200      	movs	r2, #0
    4740:	701a      	strb	r2, [r3, #0]
	
	return 1;
    4742:	2301      	movs	r3, #1
}
    4744:	4618      	mov	r0, r3
    4746:	3708      	adds	r7, #8
    4748:	46bd      	mov	sp, r7
    474a:	bd80      	pop	{r7, pc}
    474c:	10000a48 	.word	0x10000a48
    4750:	1000049c 	.word	0x1000049c
    4754:	10000b04 	.word	0x10000b04
    4758:	10000c00 	.word	0x10000c00
    475c:	1000106d 	.word	0x1000106d
    4760:	10000a49 	.word	0x10000a49
    4764:	2009c038 	.word	0x2009c038
    4768:	10000bb8 	.word	0x10000bb8

0000476c <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    476c:	b580      	push	{r7, lr}
    476e:	b088      	sub	sp, #32
    4770:	af00      	add	r7, sp, #0
    4772:	4603      	mov	r3, r0
    4774:	6039      	str	r1, [r7, #0]
    4776:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4778:	f004 f996 	bl	8aa8 <usb_enqueue>
    477c:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    477e:	69fb      	ldr	r3, [r7, #28]
    4780:	2b00      	cmp	r3, #0
    4782:	d109      	bne.n	4798 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    4784:	4b50      	ldr	r3, [pc, #320]	; (48c8 <enqueue+0x15c>)
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	b2db      	uxtb	r3, r3
    478a:	f043 0304 	orr.w	r3, r3, #4
    478e:	b2da      	uxtb	r2, r3
    4790:	4b4d      	ldr	r3, [pc, #308]	; (48c8 <enqueue+0x15c>)
    4792:	701a      	strb	r2, [r3, #0]
		return 0;
    4794:	2300      	movs	r3, #0
    4796:	e093      	b.n	48c0 <enqueue+0x154>
	}

	f->pkt_type = type;
    4798:	69fb      	ldr	r3, [r7, #28]
    479a:	79fa      	ldrb	r2, [r7, #7]
    479c:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    479e:	79fb      	ldrb	r3, [r7, #7]
    47a0:	2b04      	cmp	r3, #4
    47a2:	d113      	bne.n	47cc <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    47a4:	4b49      	ldr	r3, [pc, #292]	; (48cc <enqueue+0x160>)
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	0d1b      	lsrs	r3, r3, #20
    47aa:	b2da      	uxtb	r2, r3
    47ac:	69fb      	ldr	r3, [r7, #28]
    47ae:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    47b0:	4b46      	ldr	r3, [pc, #280]	; (48cc <enqueue+0x160>)
    47b2:	681b      	ldr	r3, [r3, #0]
    47b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    47b8:	f640 4235 	movw	r2, #3125	; 0xc35
    47bc:	fb02 f203 	mul.w	r2, r2, r3
    47c0:	4b43      	ldr	r3, [pc, #268]	; (48d0 <enqueue+0x164>)
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	441a      	add	r2, r3
    47c6:	69fb      	ldr	r3, [r7, #28]
    47c8:	605a      	str	r2, [r3, #4]
    47ca:	e008      	b.n	47de <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    47cc:	4b41      	ldr	r3, [pc, #260]	; (48d4 <enqueue+0x168>)
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	b2da      	uxtb	r2, r3
    47d2:	69fb      	ldr	r3, [r7, #28]
    47d4:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    47d6:	4b40      	ldr	r3, [pc, #256]	; (48d8 <enqueue+0x16c>)
    47d8:	681a      	ldr	r2, [r3, #0]
    47da:	69fb      	ldr	r3, [r7, #28]
    47dc:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    47de:	4b3f      	ldr	r3, [pc, #252]	; (48dc <enqueue+0x170>)
    47e0:	881b      	ldrh	r3, [r3, #0]
    47e2:	b29b      	uxth	r3, r3
    47e4:	b2db      	uxtb	r3, r3
    47e6:	3b62      	subs	r3, #98	; 0x62
    47e8:	b2da      	uxtb	r2, r3
    47ea:	69fb      	ldr	r3, [r7, #28]
    47ec:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    47ee:	4b3c      	ldr	r3, [pc, #240]	; (48e0 <enqueue+0x174>)
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	b2da      	uxtb	r2, r3
    47f4:	69fb      	ldr	r3, [r7, #28]
    47f6:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    47f8:	4b3a      	ldr	r3, [pc, #232]	; (48e4 <enqueue+0x178>)
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b2da      	uxtb	r2, r3
    47fe:	69fb      	ldr	r3, [r7, #28]
    4800:	721a      	strb	r2, [r3, #8]
	f->rssi_avg = rssi_avg;
    4802:	4b39      	ldr	r3, [pc, #228]	; (48e8 <enqueue+0x17c>)
    4804:	781b      	ldrb	r3, [r3, #0]
    4806:	b2da      	uxtb	r2, r3
    4808:	69fb      	ldr	r3, [r7, #28]
    480a:	729a      	strb	r2, [r3, #10]
	//if (hop_mode != HOP_NONE)
	//	f->rssi_avg = (int8_t)((rssi_iir[idle_buf_channel-2402] + 128)/256);
	//else
	//	f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
	f->rssi_count = rssi_count;
    480c:	4b37      	ldr	r3, [pc, #220]	; (48ec <enqueue+0x180>)
    480e:	781a      	ldrb	r2, [r3, #0]
    4810:	69fb      	ldr	r3, [r7, #28]
    4812:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    4814:	4b36      	ldr	r3, [pc, #216]	; (48f0 <enqueue+0x184>)
    4816:	2202      	movs	r2, #2
    4818:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    481a:	69fb      	ldr	r3, [r7, #28]
    481c:	330e      	adds	r3, #14
    481e:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4820:	683b      	ldr	r3, [r7, #0]
    4822:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4824:	697b      	ldr	r3, [r7, #20]
    4826:	681a      	ldr	r2, [r3, #0]
    4828:	69bb      	ldr	r3, [r7, #24]
    482a:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    482c:	69bb      	ldr	r3, [r7, #24]
    482e:	3304      	adds	r3, #4
    4830:	697a      	ldr	r2, [r7, #20]
    4832:	6852      	ldr	r2, [r2, #4]
    4834:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4836:	69bb      	ldr	r3, [r7, #24]
    4838:	3308      	adds	r3, #8
    483a:	697a      	ldr	r2, [r7, #20]
    483c:	6892      	ldr	r2, [r2, #8]
    483e:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4840:	69bb      	ldr	r3, [r7, #24]
    4842:	330c      	adds	r3, #12
    4844:	697a      	ldr	r2, [r7, #20]
    4846:	68d2      	ldr	r2, [r2, #12]
    4848:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    484a:	69bb      	ldr	r3, [r7, #24]
    484c:	3310      	adds	r3, #16
    484e:	697a      	ldr	r2, [r7, #20]
    4850:	6912      	ldr	r2, [r2, #16]
    4852:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4854:	69bb      	ldr	r3, [r7, #24]
    4856:	3314      	adds	r3, #20
    4858:	697a      	ldr	r2, [r7, #20]
    485a:	6952      	ldr	r2, [r2, #20]
    485c:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    485e:	69bb      	ldr	r3, [r7, #24]
    4860:	3318      	adds	r3, #24
    4862:	697a      	ldr	r2, [r7, #20]
    4864:	6992      	ldr	r2, [r2, #24]
    4866:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4868:	69bb      	ldr	r3, [r7, #24]
    486a:	331c      	adds	r3, #28
    486c:	697a      	ldr	r2, [r7, #20]
    486e:	69d2      	ldr	r2, [r2, #28]
    4870:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4872:	69bb      	ldr	r3, [r7, #24]
    4874:	3320      	adds	r3, #32
    4876:	697a      	ldr	r2, [r7, #20]
    4878:	6a12      	ldr	r2, [r2, #32]
    487a:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    487c:	69bb      	ldr	r3, [r7, #24]
    487e:	3324      	adds	r3, #36	; 0x24
    4880:	697a      	ldr	r2, [r7, #20]
    4882:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4884:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4886:	69bb      	ldr	r3, [r7, #24]
    4888:	3328      	adds	r3, #40	; 0x28
    488a:	697a      	ldr	r2, [r7, #20]
    488c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    488e:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4890:	69bb      	ldr	r3, [r7, #24]
    4892:	332c      	adds	r3, #44	; 0x2c
    4894:	697a      	ldr	r2, [r7, #20]
    4896:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4898:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    489a:	69fb      	ldr	r3, [r7, #28]
    489c:	330e      	adds	r3, #14
    489e:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    48a0:	683b      	ldr	r3, [r7, #0]
    48a2:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    48a4:	693b      	ldr	r3, [r7, #16]
    48a6:	3330      	adds	r3, #48	; 0x30
    48a8:	68fa      	ldr	r2, [r7, #12]
    48aa:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    48ac:	801a      	strh	r2, [r3, #0]

	f->status = status;
    48ae:	4b06      	ldr	r3, [pc, #24]	; (48c8 <enqueue+0x15c>)
    48b0:	781b      	ldrb	r3, [r3, #0]
    48b2:	b2da      	uxtb	r2, r3
    48b4:	69fb      	ldr	r3, [r7, #28]
    48b6:	705a      	strb	r2, [r3, #1]
	status = 0;
    48b8:	4b03      	ldr	r3, [pc, #12]	; (48c8 <enqueue+0x15c>)
    48ba:	2200      	movs	r2, #0
    48bc:	701a      	strb	r2, [r3, #0]

	return 1;
    48be:	2301      	movs	r3, #1
}
    48c0:	4618      	mov	r0, r3
    48c2:	3720      	adds	r7, #32
    48c4:	46bd      	mov	sp, r7
    48c6:	bd80      	pop	{r7, pc}
    48c8:	10000a48 	.word	0x10000a48
    48cc:	10000c2c 	.word	0x10000c2c
    48d0:	40004008 	.word	0x40004008
    48d4:	10001070 	.word	0x10001070
    48d8:	10000c10 	.word	0x10000c10
    48dc:	10000988 	.word	0x10000988
    48e0:	10000c00 	.word	0x10000c00
    48e4:	10000b04 	.word	0x10000b04
    48e8:	1000106d 	.word	0x1000106d
    48ec:	10000a49 	.word	0x10000a49
    48f0:	2009c038 	.word	0x2009c038

000048f4 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    48f4:	b580      	push	{r7, lr}
    48f6:	b08a      	sub	sp, #40	; 0x28
    48f8:	af00      	add	r7, sp, #0
    48fa:	4603      	mov	r3, r0
    48fc:	60b9      	str	r1, [r7, #8]
    48fe:	607a      	str	r2, [r7, #4]
    4900:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    4902:	f004 f8d1 	bl	8aa8 <usb_enqueue>
    4906:	6278      	str	r0, [r7, #36]	; 0x24

	/* fail if queue is full */
	if (f == NULL) {
    4908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    490a:	2b00      	cmp	r3, #0
    490c:	d109      	bne.n	4922 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    490e:	4b3c      	ldr	r3, [pc, #240]	; (4a00 <enqueue_with_ts+0x10c>)
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	b2db      	uxtb	r3, r3
    4914:	f043 0304 	orr.w	r3, r3, #4
    4918:	b2da      	uxtb	r2, r3
    491a:	4b39      	ldr	r3, [pc, #228]	; (4a00 <enqueue_with_ts+0x10c>)
    491c:	701a      	strb	r2, [r3, #0]
		return 0;
    491e:	2300      	movs	r3, #0
    4920:	e069      	b.n	49f6 <enqueue_with_ts+0x102>
	}

	f->clkn_high = 0;
    4922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4924:	2200      	movs	r2, #0
    4926:	70da      	strb	r2, [r3, #3]
	f->clk100ns = ts;
    4928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    492a:	687a      	ldr	r2, [r7, #4]
    492c:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    492e:	4b35      	ldr	r3, [pc, #212]	; (4a04 <enqueue_with_ts+0x110>)
    4930:	881b      	ldrh	r3, [r3, #0]
    4932:	b29b      	uxth	r3, r3
    4934:	b2db      	uxtb	r3, r3
    4936:	3b62      	subs	r3, #98	; 0x62
    4938:	b2da      	uxtb	r2, r3
    493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    493c:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = 0;
    493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4940:	2200      	movs	r2, #0
    4942:	729a      	strb	r2, [r3, #10]
	f->rssi_count = 0;
    4944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4946:	2200      	movs	r2, #0
    4948:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    494a:	4b2f      	ldr	r3, [pc, #188]	; (4a08 <enqueue_with_ts+0x114>)
    494c:	2202      	movs	r2, #2
    494e:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    4950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4952:	330e      	adds	r3, #14
    4954:	623b      	str	r3, [r7, #32]
	u32 *p2 = (u32 *)buf;
    4956:	68bb      	ldr	r3, [r7, #8]
    4958:	61fb      	str	r3, [r7, #28]
	p1[0] = p2[0];
    495a:	69fb      	ldr	r3, [r7, #28]
    495c:	681a      	ldr	r2, [r3, #0]
    495e:	6a3b      	ldr	r3, [r7, #32]
    4960:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4962:	6a3b      	ldr	r3, [r7, #32]
    4964:	3304      	adds	r3, #4
    4966:	69fa      	ldr	r2, [r7, #28]
    4968:	6852      	ldr	r2, [r2, #4]
    496a:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    496c:	6a3b      	ldr	r3, [r7, #32]
    496e:	3308      	adds	r3, #8
    4970:	69fa      	ldr	r2, [r7, #28]
    4972:	6892      	ldr	r2, [r2, #8]
    4974:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4976:	6a3b      	ldr	r3, [r7, #32]
    4978:	330c      	adds	r3, #12
    497a:	69fa      	ldr	r2, [r7, #28]
    497c:	68d2      	ldr	r2, [r2, #12]
    497e:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4980:	6a3b      	ldr	r3, [r7, #32]
    4982:	3310      	adds	r3, #16
    4984:	69fa      	ldr	r2, [r7, #28]
    4986:	6912      	ldr	r2, [r2, #16]
    4988:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    498a:	6a3b      	ldr	r3, [r7, #32]
    498c:	3314      	adds	r3, #20
    498e:	69fa      	ldr	r2, [r7, #28]
    4990:	6952      	ldr	r2, [r2, #20]
    4992:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4994:	6a3b      	ldr	r3, [r7, #32]
    4996:	3318      	adds	r3, #24
    4998:	69fa      	ldr	r2, [r7, #28]
    499a:	6992      	ldr	r2, [r2, #24]
    499c:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    499e:	6a3b      	ldr	r3, [r7, #32]
    49a0:	331c      	adds	r3, #28
    49a2:	69fa      	ldr	r2, [r7, #28]
    49a4:	69d2      	ldr	r2, [r2, #28]
    49a6:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    49a8:	6a3b      	ldr	r3, [r7, #32]
    49aa:	3320      	adds	r3, #32
    49ac:	69fa      	ldr	r2, [r7, #28]
    49ae:	6a12      	ldr	r2, [r2, #32]
    49b0:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    49b2:	6a3b      	ldr	r3, [r7, #32]
    49b4:	3324      	adds	r3, #36	; 0x24
    49b6:	69fa      	ldr	r2, [r7, #28]
    49b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    49ba:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    49bc:	6a3b      	ldr	r3, [r7, #32]
    49be:	3328      	adds	r3, #40	; 0x28
    49c0:	69fa      	ldr	r2, [r7, #28]
    49c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    49c4:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    49c6:	6a3b      	ldr	r3, [r7, #32]
    49c8:	332c      	adds	r3, #44	; 0x2c
    49ca:	69fa      	ldr	r2, [r7, #28]
    49cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    49ce:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    49d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49d2:	330e      	adds	r3, #14
    49d4:	61bb      	str	r3, [r7, #24]
	u16 *p4 = (u16 *)buf;
    49d6:	68bb      	ldr	r3, [r7, #8]
    49d8:	617b      	str	r3, [r7, #20]
	p3[24] = p4[24];
    49da:	69bb      	ldr	r3, [r7, #24]
    49dc:	3330      	adds	r3, #48	; 0x30
    49de:	697a      	ldr	r2, [r7, #20]
    49e0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    49e2:	801a      	strh	r2, [r3, #0]

	f->status = status;
    49e4:	4b06      	ldr	r3, [pc, #24]	; (4a00 <enqueue_with_ts+0x10c>)
    49e6:	781b      	ldrb	r3, [r3, #0]
    49e8:	b2da      	uxtb	r2, r3
    49ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ec:	705a      	strb	r2, [r3, #1]
	status = 0;
    49ee:	4b04      	ldr	r3, [pc, #16]	; (4a00 <enqueue_with_ts+0x10c>)
    49f0:	2200      	movs	r2, #0
    49f2:	701a      	strb	r2, [r3, #0]

	return 1;
    49f4:	2301      	movs	r3, #1
}
    49f6:	4618      	mov	r0, r3
    49f8:	3728      	adds	r7, #40	; 0x28
    49fa:	46bd      	mov	sp, r7
    49fc:	bd80      	pop	{r7, pc}
    49fe:	bf00      	nop
    4a00:	10000a48 	.word	0x10000a48
    4a04:	1000049c 	.word	0x1000049c
    4a08:	2009c038 	.word	0x2009c038

00004a0c <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4a0c:	b580      	push	{r7, lr}
    4a0e:	b082      	sub	sp, #8
    4a10:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a12:	4b17      	ldr	r3, [pc, #92]	; (4a70 <cs_threshold_calc_and_set+0x64>)
    4a14:	781b      	ldrb	r3, [r3, #0]
    4a16:	2b00      	cmp	r3, #0
    4a18:	d01d      	beq.n	4a56 <cs_threshold_calc_and_set+0x4a>
    4a1a:	4b16      	ldr	r3, [pc, #88]	; (4a74 <cs_threshold_calc_and_set+0x68>)
    4a1c:	781b      	ldrb	r3, [r3, #0]
    4a1e:	b25b      	sxtb	r3, r3
    4a20:	2b00      	cmp	r3, #0
    4a22:	dd18      	ble.n	4a56 <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    4a24:	4b14      	ldr	r3, [pc, #80]	; (4a78 <cs_threshold_calc_and_set+0x6c>)
    4a26:	881b      	ldrh	r3, [r3, #0]
    4a28:	b29b      	uxth	r3, r3
    4a2a:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    4a2e:	4a13      	ldr	r2, [pc, #76]	; (4a7c <cs_threshold_calc_and_set+0x70>)
    4a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4a34:	b21b      	sxth	r3, r3
    4a36:	3380      	adds	r3, #128	; 0x80
    4a38:	2b00      	cmp	r3, #0
    4a3a:	da00      	bge.n	4a3e <cs_threshold_calc_and_set+0x32>
    4a3c:	33ff      	adds	r3, #255	; 0xff
    4a3e:	121b      	asrs	r3, r3, #8
    4a40:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    4a42:	79ba      	ldrb	r2, [r7, #6]
    4a44:	4b0b      	ldr	r3, [pc, #44]	; (4a74 <cs_threshold_calc_and_set+0x68>)
    4a46:	781b      	ldrb	r3, [r3, #0]
    4a48:	b2db      	uxtb	r3, r3
    4a4a:	4413      	add	r3, r2
    4a4c:	b2db      	uxtb	r3, r3
    4a4e:	3b36      	subs	r3, #54	; 0x36
    4a50:	b2db      	uxtb	r3, r3
    4a52:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a54:	e002      	b.n	4a5c <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    4a56:	4b07      	ldr	r3, [pc, #28]	; (4a74 <cs_threshold_calc_and_set+0x68>)
    4a58:	781b      	ldrb	r3, [r3, #0]
    4a5a:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    4a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4a60:	4618      	mov	r0, r3
    4a62:	2103      	movs	r1, #3
    4a64:	f7ff fda2 	bl	45ac <cs_threshold_set>
}
    4a68:	3708      	adds	r7, #8
    4a6a:	46bd      	mov	sp, r7
    4a6c:	bd80      	pop	{r7, pc}
    4a6e:	bf00      	nop
    4a70:	1000097c 	.word	0x1000097c
    4a74:	1000044c 	.word	0x1000044c
    4a78:	1000049c 	.word	0x1000049c
    4a7c:	100009a0 	.word	0x100009a0

00004a80 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4a80:	b480      	push	{r7}
    4a82:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4a84:	4b09      	ldr	r3, [pc, #36]	; (4aac <cs_trigger_enable+0x2c>)
    4a86:	2200      	movs	r2, #0
    4a88:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    4a8a:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <cs_trigger_enable+0x30>)
    4a8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4a90:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4a92:	4b08      	ldr	r3, [pc, #32]	; (4ab4 <cs_trigger_enable+0x34>)
    4a94:	2204      	movs	r2, #4
    4a96:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    4a98:	4a07      	ldr	r2, [pc, #28]	; (4ab8 <cs_trigger_enable+0x38>)
    4a9a:	4b07      	ldr	r3, [pc, #28]	; (4ab8 <cs_trigger_enable+0x38>)
    4a9c:	681b      	ldr	r3, [r3, #0]
    4a9e:	f043 0304 	orr.w	r3, r3, #4
    4aa2:	6013      	str	r3, [r2, #0]
}
    4aa4:	46bd      	mov	sp, r7
    4aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aaa:	4770      	bx	lr
    4aac:	100010f8 	.word	0x100010f8
    4ab0:	e000e100 	.word	0xe000e100
    4ab4:	400280ac 	.word	0x400280ac
    4ab8:	400280b4 	.word	0x400280b4

00004abc <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4abc:	b480      	push	{r7}
    4abe:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4ac0:	4a09      	ldr	r2, [pc, #36]	; (4ae8 <cs_trigger_disable+0x2c>)
    4ac2:	4b09      	ldr	r3, [pc, #36]	; (4ae8 <cs_trigger_disable+0x2c>)
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	f023 0304 	bic.w	r3, r3, #4
    4aca:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4acc:	4b07      	ldr	r3, [pc, #28]	; (4aec <cs_trigger_disable+0x30>)
    4ace:	2204      	movs	r2, #4
    4ad0:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4ad2:	4b07      	ldr	r3, [pc, #28]	; (4af0 <cs_trigger_disable+0x34>)
    4ad4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4ad8:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    4ada:	4b06      	ldr	r3, [pc, #24]	; (4af4 <cs_trigger_disable+0x38>)
    4adc:	2200      	movs	r2, #0
    4ade:	701a      	strb	r2, [r3, #0]
}
    4ae0:	46bd      	mov	sp, r7
    4ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae6:	4770      	bx	lr
    4ae8:	400280b4 	.word	0x400280b4
    4aec:	400280ac 	.word	0x400280ac
    4af0:	e000e180 	.word	0xe000e180
    4af4:	100010f8 	.word	0x100010f8

00004af8 <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4afc:	b095      	sub	sp, #84	; 0x54
    4afe:	af00      	add	r7, sp, #0
    4b00:	60b9      	str	r1, [r7, #8]
    4b02:	607a      	str	r2, [r7, #4]
    4b04:	603b      	str	r3, [r7, #0]
    4b06:	4603      	mov	r3, r0
    4b08:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    4b0a:	2300      	movs	r3, #0
    4b0c:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4b0e:	7bfb      	ldrb	r3, [r7, #15]
    4b10:	2b3c      	cmp	r3, #60	; 0x3c
    4b12:	f200 8551 	bhi.w	55b8 <vendor_request_handler+0xac0>
    4b16:	a201      	add	r2, pc, #4	; (adr r2, 4b1c <vendor_request_handler+0x24>)
    4b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b1c:	00004c11 	.word	0x00004c11
    4b20:	00004c1b 	.word	0x00004c1b
    4b24:	000055b9 	.word	0x000055b9
    4b28:	00004c2b 	.word	0x00004c2b
    4b2c:	00004c4d 	.word	0x00004c4d
    4b30:	00004c69 	.word	0x00004c69
    4b34:	00004c8b 	.word	0x00004c8b
    4b38:	00004ca7 	.word	0x00004ca7
    4b3c:	00004cc9 	.word	0x00004cc9
    4b40:	00004ce9 	.word	0x00004ce9
    4b44:	00004d0b 	.word	0x00004d0b
    4b48:	00004faf 	.word	0x00004faf
    4b4c:	00004fd5 	.word	0x00004fd5
    4b50:	00004d81 	.word	0x00004d81
    4b54:	00004d8b 	.word	0x00004d8b
    4b58:	00004d2b 	.word	0x00004d2b
    4b5c:	00004e69 	.word	0x00004e69
    4b60:	00004e89 	.word	0x00004e89
    4b64:	00004ec1 	.word	0x00004ec1
    4b68:	00004ee1 	.word	0x00004ee1
    4b6c:	00004efd 	.word	0x00004efd
    4b70:	00004f89 	.word	0x00004f89
    4b74:	00004f91 	.word	0x00004f91
    4b78:	00004fa3 	.word	0x00004fa3
    4b7c:	0000505f 	.word	0x0000505f
    4b80:	0000507d 	.word	0x0000507d
    4b84:	000055b9 	.word	0x000055b9
    4b88:	00005089 	.word	0x00005089
    4b8c:	00004f05 	.word	0x00004f05
    4b90:	00004f21 	.word	0x00004f21
    4b94:	00004f49 	.word	0x00004f49
    4b98:	00004f41 	.word	0x00004f41
    4b9c:	00004f51 	.word	0x00004f51
    4ba0:	0000514d 	.word	0x0000514d
    4ba4:	000050e5 	.word	0x000050e5
    4ba8:	000051c1 	.word	0x000051c1
    4bac:	000051cf 	.word	0x000051cf
    4bb0:	000051df 	.word	0x000051df
    4bb4:	000051f1 	.word	0x000051f1
    4bb8:	000052bd 	.word	0x000052bd
    4bbc:	00005303 	.word	0x00005303
    4bc0:	00005391 	.word	0x00005391
    4bc4:	000053c5 	.word	0x000053c5
    4bc8:	000053e7 	.word	0x000053e7
    4bcc:	0000543f 	.word	0x0000543f
    4bd0:	000055bd 	.word	0x000055bd
    4bd4:	00005471 	.word	0x00005471
    4bd8:	00005487 	.word	0x00005487
    4bdc:	000054a3 	.word	0x000054a3
    4be0:	000054b9 	.word	0x000054b9
    4be4:	000054e5 	.word	0x000054e5
    4be8:	00005335 	.word	0x00005335
    4bec:	00005367 	.word	0x00005367
    4bf0:	00005501 	.word	0x00005501
    4bf4:	00005545 	.word	0x00005545
    4bf8:	0000518f 	.word	0x0000518f
    4bfc:	00005557 	.word	0x00005557
    4c00:	000055b9 	.word	0x000055b9
    4c04:	0000552f 	.word	0x0000552f
    4c08:	0000559b 	.word	0x0000559b
    4c0c:	000055a7 	.word	0x000055a7

	case UBERTOOTH_PING:
		*data_len = 0;
    4c10:	683b      	ldr	r3, [r7, #0]
    4c12:	2200      	movs	r2, #0
    4c14:	601a      	str	r2, [r3, #0]
		break;
    4c16:	f000 bcd2 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4c1a:	4ba1      	ldr	r3, [pc, #644]	; (4ea0 <vendor_request_handler+0x3a8>)
    4c1c:	2201      	movs	r2, #1
    4c1e:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4c20:	683b      	ldr	r3, [r7, #0]
    4c22:	2200      	movs	r2, #0
    4c24:	601a      	str	r2, [r3, #0]
		break;
    4c26:	f000 bcca 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4c2a:	4b9e      	ldr	r3, [pc, #632]	; (4ea4 <vendor_request_handler+0x3ac>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	f003 0302 	and.w	r3, r3, #2
    4c32:	2b00      	cmp	r3, #0
    4c34:	bf14      	ite	ne
    4c36:	2301      	movne	r3, #1
    4c38:	2300      	moveq	r3, #0
    4c3a:	b2db      	uxtb	r3, r3
    4c3c:	461a      	mov	r2, r3
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c42:	683b      	ldr	r3, [r7, #0]
    4c44:	2201      	movs	r2, #1
    4c46:	601a      	str	r2, [r3, #0]
		break;
    4c48:	f000 bcb9 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4c4c:	68bb      	ldr	r3, [r7, #8]
    4c4e:	881b      	ldrh	r3, [r3, #0]
    4c50:	2b00      	cmp	r3, #0
    4c52:	d004      	beq.n	4c5e <vendor_request_handler+0x166>
			USRLED_SET;
    4c54:	4b94      	ldr	r3, [pc, #592]	; (4ea8 <vendor_request_handler+0x3b0>)
    4c56:	2202      	movs	r2, #2
    4c58:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    4c5a:	f000 bcb0 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    4c5e:	4b93      	ldr	r3, [pc, #588]	; (4eac <vendor_request_handler+0x3b4>)
    4c60:	2202      	movs	r2, #2
    4c62:	601a      	str	r2, [r3, #0]
		break;
    4c64:	f000 bcab 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4c68:	4b8e      	ldr	r3, [pc, #568]	; (4ea4 <vendor_request_handler+0x3ac>)
    4c6a:	681b      	ldr	r3, [r3, #0]
    4c6c:	f003 0310 	and.w	r3, r3, #16
    4c70:	2b00      	cmp	r3, #0
    4c72:	bf14      	ite	ne
    4c74:	2301      	movne	r3, #1
    4c76:	2300      	moveq	r3, #0
    4c78:	b2db      	uxtb	r3, r3
    4c7a:	461a      	mov	r2, r3
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c80:	683b      	ldr	r3, [r7, #0]
    4c82:	2201      	movs	r2, #1
    4c84:	601a      	str	r2, [r3, #0]
		break;
    4c86:	f000 bc9a 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4c8a:	68bb      	ldr	r3, [r7, #8]
    4c8c:	881b      	ldrh	r3, [r3, #0]
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d004      	beq.n	4c9c <vendor_request_handler+0x1a4>
			RXLED_SET;
    4c92:	4b85      	ldr	r3, [pc, #532]	; (4ea8 <vendor_request_handler+0x3b0>)
    4c94:	2210      	movs	r2, #16
    4c96:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4c98:	f000 bc91 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4c9c:	4b83      	ldr	r3, [pc, #524]	; (4eac <vendor_request_handler+0x3b4>)
    4c9e:	2210      	movs	r2, #16
    4ca0:	601a      	str	r2, [r3, #0]
		break;
    4ca2:	f000 bc8c 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4ca6:	4b7f      	ldr	r3, [pc, #508]	; (4ea4 <vendor_request_handler+0x3ac>)
    4ca8:	681b      	ldr	r3, [r3, #0]
    4caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4cae:	2b00      	cmp	r3, #0
    4cb0:	bf14      	ite	ne
    4cb2:	2301      	movne	r3, #1
    4cb4:	2300      	moveq	r3, #0
    4cb6:	b2db      	uxtb	r3, r3
    4cb8:	461a      	mov	r2, r3
    4cba:	687b      	ldr	r3, [r7, #4]
    4cbc:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4cbe:	683b      	ldr	r3, [r7, #0]
    4cc0:	2201      	movs	r2, #1
    4cc2:	601a      	str	r2, [r3, #0]
		break;
    4cc4:	f000 bc7b 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	881b      	ldrh	r3, [r3, #0]
    4ccc:	2b00      	cmp	r3, #0
    4cce:	d005      	beq.n	4cdc <vendor_request_handler+0x1e4>
			TXLED_SET;
    4cd0:	4b75      	ldr	r3, [pc, #468]	; (4ea8 <vendor_request_handler+0x3b0>)
    4cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cd6:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4cd8:	f000 bc71 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4cdc:	4b73      	ldr	r3, [pc, #460]	; (4eac <vendor_request_handler+0x3b4>)
    4cde:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ce2:	601a      	str	r2, [r3, #0]
		break;
    4ce4:	f000 bc6b 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4ce8:	4b6e      	ldr	r3, [pc, #440]	; (4ea4 <vendor_request_handler+0x3ac>)
    4cea:	681b      	ldr	r3, [r3, #0]
    4cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	bf14      	ite	ne
    4cf4:	2301      	movne	r3, #1
    4cf6:	2300      	moveq	r3, #0
    4cf8:	b2db      	uxtb	r3, r3
    4cfa:	461a      	mov	r2, r3
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d00:	683b      	ldr	r3, [r7, #0]
    4d02:	2201      	movs	r2, #1
    4d04:	601a      	str	r2, [r3, #0]
		break;
    4d06:	f000 bc5a 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4d0a:	68bb      	ldr	r3, [r7, #8]
    4d0c:	881b      	ldrh	r3, [r3, #0]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d005      	beq.n	4d1e <vendor_request_handler+0x226>
			CC1V8_SET;
    4d12:	4b65      	ldr	r3, [pc, #404]	; (4ea8 <vendor_request_handler+0x3b0>)
    4d14:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d18:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4d1a:	f000 bc50 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4d1e:	4b63      	ldr	r3, [pc, #396]	; (4eac <vendor_request_handler+0x3b4>)
    4d20:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d24:	601a      	str	r2, [r3, #0]
		break;
    4d26:	f000 bc4a 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4d2a:	2336      	movs	r3, #54	; 0x36
    4d2c:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d2e:	4b60      	ldr	r3, [pc, #384]	; (4eb0 <vendor_request_handler+0x3b8>)
    4d30:	681b      	ldr	r3, [r3, #0]
    4d32:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4d36:	f107 0210 	add.w	r2, r7, #16
    4d3a:	4608      	mov	r0, r1
    4d3c:	4611      	mov	r1, r2
    4d3e:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4d40:	693b      	ldr	r3, [r7, #16]
    4d42:	b2da      	uxtb	r2, r3
    4d44:	687b      	ldr	r3, [r7, #4]
    4d46:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4d48:	687b      	ldr	r3, [r7, #4]
    4d4a:	3301      	adds	r3, #1
    4d4c:	697a      	ldr	r2, [r7, #20]
    4d4e:	b2d2      	uxtb	r2, r2
    4d50:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4d52:	687b      	ldr	r3, [r7, #4]
    4d54:	3302      	adds	r3, #2
    4d56:	697a      	ldr	r2, [r7, #20]
    4d58:	0a12      	lsrs	r2, r2, #8
    4d5a:	b2d2      	uxtb	r2, r2
    4d5c:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	3303      	adds	r3, #3
    4d62:	697a      	ldr	r2, [r7, #20]
    4d64:	0c12      	lsrs	r2, r2, #16
    4d66:	b2d2      	uxtb	r2, r2
    4d68:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	3304      	adds	r3, #4
    4d6e:	697a      	ldr	r2, [r7, #20]
    4d70:	0e12      	lsrs	r2, r2, #24
    4d72:	b2d2      	uxtb	r2, r2
    4d74:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4d76:	683b      	ldr	r3, [r7, #0]
    4d78:	2205      	movs	r2, #5
    4d7a:	601a      	str	r2, [r3, #0]
		break;
    4d7c:	f000 bc1f 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4d80:	4b47      	ldr	r3, [pc, #284]	; (4ea0 <vendor_request_handler+0x3a8>)
    4d82:	220b      	movs	r2, #11
    4d84:	701a      	strb	r2, [r3, #0]
		break;
    4d86:	f000 bc1a 	b.w	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4d8a:	233a      	movs	r3, #58	; 0x3a
    4d8c:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d8e:	4b48      	ldr	r3, [pc, #288]	; (4eb0 <vendor_request_handler+0x3b8>)
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4d96:	f107 0210 	add.w	r2, r7, #16
    4d9a:	4608      	mov	r0, r1
    4d9c:	4611      	mov	r1, r2
    4d9e:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4da0:	693b      	ldr	r3, [r7, #16]
    4da2:	b2da      	uxtb	r2, r3
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4da8:	687b      	ldr	r3, [r7, #4]
    4daa:	3301      	adds	r3, #1
    4dac:	697a      	ldr	r2, [r7, #20]
    4dae:	b2d2      	uxtb	r2, r2
    4db0:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4db2:	687b      	ldr	r3, [r7, #4]
    4db4:	3302      	adds	r3, #2
    4db6:	697a      	ldr	r2, [r7, #20]
    4db8:	0a12      	lsrs	r2, r2, #8
    4dba:	b2d2      	uxtb	r2, r2
    4dbc:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4dbe:	687b      	ldr	r3, [r7, #4]
    4dc0:	3303      	adds	r3, #3
    4dc2:	697a      	ldr	r2, [r7, #20]
    4dc4:	0c12      	lsrs	r2, r2, #16
    4dc6:	b2d2      	uxtb	r2, r2
    4dc8:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	3304      	adds	r3, #4
    4dce:	697a      	ldr	r2, [r7, #20]
    4dd0:	0e12      	lsrs	r2, r2, #24
    4dd2:	b2d2      	uxtb	r2, r2
    4dd4:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	3305      	adds	r3, #5
    4dda:	69ba      	ldr	r2, [r7, #24]
    4ddc:	b2d2      	uxtb	r2, r2
    4dde:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	3306      	adds	r3, #6
    4de4:	69ba      	ldr	r2, [r7, #24]
    4de6:	0a12      	lsrs	r2, r2, #8
    4de8:	b2d2      	uxtb	r2, r2
    4dea:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	3307      	adds	r3, #7
    4df0:	69ba      	ldr	r2, [r7, #24]
    4df2:	0c12      	lsrs	r2, r2, #16
    4df4:	b2d2      	uxtb	r2, r2
    4df6:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	3308      	adds	r3, #8
    4dfc:	69ba      	ldr	r2, [r7, #24]
    4dfe:	0e12      	lsrs	r2, r2, #24
    4e00:	b2d2      	uxtb	r2, r2
    4e02:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4e04:	687b      	ldr	r3, [r7, #4]
    4e06:	3309      	adds	r3, #9
    4e08:	69fa      	ldr	r2, [r7, #28]
    4e0a:	b2d2      	uxtb	r2, r2
    4e0c:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4e0e:	687b      	ldr	r3, [r7, #4]
    4e10:	330a      	adds	r3, #10
    4e12:	69fa      	ldr	r2, [r7, #28]
    4e14:	0a12      	lsrs	r2, r2, #8
    4e16:	b2d2      	uxtb	r2, r2
    4e18:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	330b      	adds	r3, #11
    4e1e:	69fa      	ldr	r2, [r7, #28]
    4e20:	0c12      	lsrs	r2, r2, #16
    4e22:	b2d2      	uxtb	r2, r2
    4e24:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	330c      	adds	r3, #12
    4e2a:	69fa      	ldr	r2, [r7, #28]
    4e2c:	0e12      	lsrs	r2, r2, #24
    4e2e:	b2d2      	uxtb	r2, r2
    4e30:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	330d      	adds	r3, #13
    4e36:	6a3a      	ldr	r2, [r7, #32]
    4e38:	b2d2      	uxtb	r2, r2
    4e3a:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4e3c:	687b      	ldr	r3, [r7, #4]
    4e3e:	330e      	adds	r3, #14
    4e40:	6a3a      	ldr	r2, [r7, #32]
    4e42:	0a12      	lsrs	r2, r2, #8
    4e44:	b2d2      	uxtb	r2, r2
    4e46:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	330f      	adds	r3, #15
    4e4c:	6a3a      	ldr	r2, [r7, #32]
    4e4e:	0c12      	lsrs	r2, r2, #16
    4e50:	b2d2      	uxtb	r2, r2
    4e52:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	3310      	adds	r3, #16
    4e58:	6a3a      	ldr	r2, [r7, #32]
    4e5a:	0e12      	lsrs	r2, r2, #24
    4e5c:	b2d2      	uxtb	r2, r2
    4e5e:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	2211      	movs	r2, #17
    4e64:	601a      	str	r2, [r3, #0]
		break;
    4e66:	e3aa      	b.n	55be <vendor_request_handler+0xac6>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4e68:	4b12      	ldr	r3, [pc, #72]	; (4eb4 <vendor_request_handler+0x3bc>)
    4e6a:	681b      	ldr	r3, [r3, #0]
    4e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e70:	2b00      	cmp	r3, #0
    4e72:	bf14      	ite	ne
    4e74:	2301      	movne	r3, #1
    4e76:	2300      	moveq	r3, #0
    4e78:	b2db      	uxtb	r3, r3
    4e7a:	461a      	mov	r2, r3
    4e7c:	687b      	ldr	r3, [r7, #4]
    4e7e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e80:	683b      	ldr	r3, [r7, #0]
    4e82:	2201      	movs	r2, #1
    4e84:	601a      	str	r2, [r3, #0]
		break;
    4e86:	e39a      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4e88:	68bb      	ldr	r3, [r7, #8]
    4e8a:	881b      	ldrh	r3, [r3, #0]
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d003      	beq.n	4e98 <vendor_request_handler+0x3a0>
			PAEN_SET;
    4e90:	4b09      	ldr	r3, [pc, #36]	; (4eb8 <vendor_request_handler+0x3c0>)
    4e92:	2280      	movs	r2, #128	; 0x80
    4e94:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4e96:	e392      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4e98:	4b08      	ldr	r3, [pc, #32]	; (4ebc <vendor_request_handler+0x3c4>)
    4e9a:	2280      	movs	r2, #128	; 0x80
    4e9c:	601a      	str	r2, [r3, #0]
		break;
    4e9e:	e38e      	b.n	55be <vendor_request_handler+0xac6>
    4ea0:	10000a3f 	.word	0x10000a3f
    4ea4:	2009c034 	.word	0x2009c034
    4ea8:	2009c038 	.word	0x2009c038
    4eac:	2009c03c 	.word	0x2009c03c
    4eb0:	10000448 	.word	0x10000448
    4eb4:	2009c054 	.word	0x2009c054
    4eb8:	2009c058 	.word	0x2009c058
    4ebc:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4ec0:	4b92      	ldr	r3, [pc, #584]	; (510c <vendor_request_handler+0x614>)
    4ec2:	681b      	ldr	r3, [r3, #0]
    4ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4ec8:	2b00      	cmp	r3, #0
    4eca:	bf14      	ite	ne
    4ecc:	2301      	movne	r3, #1
    4ece:	2300      	moveq	r3, #0
    4ed0:	b2db      	uxtb	r3, r3
    4ed2:	461a      	mov	r2, r3
    4ed4:	687b      	ldr	r3, [r7, #4]
    4ed6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4ed8:	683b      	ldr	r3, [r7, #0]
    4eda:	2201      	movs	r2, #1
    4edc:	601a      	str	r2, [r3, #0]
		break;
    4ede:	e36e      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4ee0:	68bb      	ldr	r3, [r7, #8]
    4ee2:	881b      	ldrh	r3, [r3, #0]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d004      	beq.n	4ef2 <vendor_request_handler+0x3fa>
			HGM_SET;
    4ee8:	4b89      	ldr	r3, [pc, #548]	; (5110 <vendor_request_handler+0x618>)
    4eea:	f44f 7280 	mov.w	r2, #256	; 0x100
    4eee:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4ef0:	e365      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4ef2:	4b88      	ldr	r3, [pc, #544]	; (5114 <vendor_request_handler+0x61c>)
    4ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ef8:	601a      	str	r2, [r3, #0]
		break;
    4efa:	e360      	b.n	55be <vendor_request_handler+0xac6>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4efc:	4b86      	ldr	r3, [pc, #536]	; (5118 <vendor_request_handler+0x620>)
    4efe:	2203      	movs	r2, #3
    4f00:	701a      	strb	r2, [r3, #0]
		break;
    4f02:	e35c      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4f04:	2005      	movs	r0, #5
    4f06:	f005 f823 	bl	9f50 <cc2400_get>
    4f0a:	4603      	mov	r3, r0
    4f0c:	b2db      	uxtb	r3, r3
    4f0e:	f003 0307 	and.w	r3, r3, #7
    4f12:	b2da      	uxtb	r2, r3
    4f14:	687b      	ldr	r3, [r7, #4]
    4f16:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f18:	683b      	ldr	r3, [r7, #0]
    4f1a:	2201      	movs	r2, #1
    4f1c:	601a      	str	r2, [r3, #0]
		break;
    4f1e:	e34e      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4f20:	68bb      	ldr	r3, [r7, #8]
    4f22:	881b      	ldrh	r3, [r3, #0]
    4f24:	2b07      	cmp	r3, #7
    4f26:	d809      	bhi.n	4f3c <vendor_request_handler+0x444>
			cc2400_set(FREND, 8 | request_params[0]);
    4f28:	68bb      	ldr	r3, [r7, #8]
    4f2a:	881b      	ldrh	r3, [r3, #0]
    4f2c:	f043 0308 	orr.w	r3, r3, #8
    4f30:	b29b      	uxth	r3, r3
    4f32:	2005      	movs	r0, #5
    4f34:	4619      	mov	r1, r3
    4f36:	f005 f821 	bl	9f7c <cc2400_set>
		} else {
			return 0;
		}
		break;
    4f3a:	e340      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4f3c:	2300      	movs	r3, #0
    4f3e:	e33f      	b.n	55c0 <vendor_request_handler+0xac8>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4f40:	4b75      	ldr	r3, [pc, #468]	; (5118 <vendor_request_handler+0x620>)
    4f42:	2205      	movs	r2, #5
    4f44:	701a      	strb	r2, [r3, #0]
		break;
    4f46:	e33a      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4f48:	4b73      	ldr	r3, [pc, #460]	; (5118 <vendor_request_handler+0x620>)
    4f4a:	2206      	movs	r2, #6
    4f4c:	701a      	strb	r2, [r3, #0]
		break;
    4f4e:	e336      	b.n	55be <vendor_request_handler+0xac6>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4f50:	4b72      	ldr	r3, [pc, #456]	; (511c <vendor_request_handler+0x624>)
    4f52:	781a      	ldrb	r2, [r3, #0]
    4f54:	687b      	ldr	r3, [r7, #4]
    4f56:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4f58:	687b      	ldr	r3, [r7, #4]
    4f5a:	3301      	adds	r3, #1
    4f5c:	4a6f      	ldr	r2, [pc, #444]	; (511c <vendor_request_handler+0x624>)
    4f5e:	7852      	ldrb	r2, [r2, #1]
    4f60:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	3302      	adds	r3, #2
    4f66:	4a6d      	ldr	r2, [pc, #436]	; (511c <vendor_request_handler+0x624>)
    4f68:	7892      	ldrb	r2, [r2, #2]
    4f6a:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	3303      	adds	r3, #3
    4f70:	4a6a      	ldr	r2, [pc, #424]	; (511c <vendor_request_handler+0x624>)
    4f72:	78d2      	ldrb	r2, [r2, #3]
    4f74:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	3304      	adds	r3, #4
    4f7a:	4a68      	ldr	r2, [pc, #416]	; (511c <vendor_request_handler+0x624>)
    4f7c:	7912      	ldrb	r2, [r2, #4]
    4f7e:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4f80:	683b      	ldr	r3, [r7, #0]
    4f82:	2205      	movs	r2, #5
    4f84:	601a      	str	r2, [r3, #0]
		break;
    4f86:	e31a      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4f88:	4b63      	ldr	r3, [pc, #396]	; (5118 <vendor_request_handler+0x620>)
    4f8a:	2200      	movs	r2, #0
    4f8c:	701a      	strb	r2, [r3, #0]
		break;
    4f8e:	e316      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4f90:	4b63      	ldr	r3, [pc, #396]	; (5120 <vendor_request_handler+0x628>)
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	b2da      	uxtb	r2, r3
    4f96:	687b      	ldr	r3, [r7, #4]
    4f98:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f9a:	683b      	ldr	r3, [r7, #0]
    4f9c:	2201      	movs	r2, #1
    4f9e:	601a      	str	r2, [r3, #0]
		break;
    4fa0:	e30d      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4fa2:	68bb      	ldr	r3, [r7, #8]
    4fa4:	881b      	ldrh	r3, [r3, #0]
    4fa6:	b2da      	uxtb	r2, r3
    4fa8:	4b5d      	ldr	r3, [pc, #372]	; (5120 <vendor_request_handler+0x628>)
    4faa:	701a      	strb	r2, [r3, #0]
		break;
    4fac:	e307      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4fae:	4b5d      	ldr	r3, [pc, #372]	; (5124 <vendor_request_handler+0x62c>)
    4fb0:	881b      	ldrh	r3, [r3, #0]
    4fb2:	b29b      	uxth	r3, r3
    4fb4:	b2da      	uxtb	r2, r3
    4fb6:	687b      	ldr	r3, [r7, #4]
    4fb8:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4fba:	687b      	ldr	r3, [r7, #4]
    4fbc:	3301      	adds	r3, #1
    4fbe:	4a59      	ldr	r2, [pc, #356]	; (5124 <vendor_request_handler+0x62c>)
    4fc0:	8812      	ldrh	r2, [r2, #0]
    4fc2:	b292      	uxth	r2, r2
    4fc4:	0a12      	lsrs	r2, r2, #8
    4fc6:	b292      	uxth	r2, r2
    4fc8:	b2d2      	uxtb	r2, r2
    4fca:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4fcc:	683b      	ldr	r3, [r7, #0]
    4fce:	2202      	movs	r2, #2
    4fd0:	601a      	str	r2, [r3, #0]
		break;
    4fd2:	e2f4      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4fd4:	68bb      	ldr	r3, [r7, #8]
    4fd6:	881a      	ldrh	r2, [r3, #0]
    4fd8:	4b53      	ldr	r3, [pc, #332]	; (5128 <vendor_request_handler+0x630>)
    4fda:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4fdc:	4b52      	ldr	r3, [pc, #328]	; (5128 <vendor_request_handler+0x630>)
    4fde:	881b      	ldrh	r3, [r3, #0]
    4fe0:	b29b      	uxth	r3, r3
    4fe2:	f640 22ea 	movw	r2, #2794	; 0xaea
    4fe6:	4293      	cmp	r3, r2
    4fe8:	d907      	bls.n	4ffa <vendor_request_handler+0x502>
			hop_mode = HOP_SWEEP;
    4fea:	4b50      	ldr	r3, [pc, #320]	; (512c <vendor_request_handler+0x634>)
    4fec:	2201      	movs	r2, #1
    4fee:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4ff0:	4b4d      	ldr	r3, [pc, #308]	; (5128 <vendor_request_handler+0x630>)
    4ff2:	f640 1262 	movw	r2, #2402	; 0x962
    4ff6:	801a      	strh	r2, [r3, #0]
    4ff8:	e020      	b.n	503c <vendor_request_handler+0x544>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4ffa:	4b4c      	ldr	r3, [pc, #304]	; (512c <vendor_request_handler+0x634>)
    4ffc:	2200      	movs	r2, #0
    4ffe:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    5000:	4b49      	ldr	r3, [pc, #292]	; (5128 <vendor_request_handler+0x630>)
    5002:	881b      	ldrh	r3, [r3, #0]
    5004:	b29b      	uxth	r3, r3
    5006:	f640 02dc 	movw	r2, #2268	; 0x8dc
    500a:	4293      	cmp	r3, r2
    500c:	d903      	bls.n	5016 <vendor_request_handler+0x51e>
    500e:	4b46      	ldr	r3, [pc, #280]	; (5128 <vendor_request_handler+0x630>)
    5010:	881b      	ldrh	r3, [r3, #0]
    5012:	b29b      	uxth	r3, r3
    5014:	e001      	b.n	501a <vendor_request_handler+0x522>
    5016:	f640 03dc 	movw	r3, #2268	; 0x8dc
    501a:	4a43      	ldr	r2, [pc, #268]	; (5128 <vendor_request_handler+0x630>)
    501c:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    501e:	4b42      	ldr	r3, [pc, #264]	; (5128 <vendor_request_handler+0x630>)
    5020:	881b      	ldrh	r3, [r3, #0]
    5022:	b29b      	uxth	r3, r3
    5024:	f640 22e9 	movw	r2, #2793	; 0xae9
    5028:	4293      	cmp	r3, r2
    502a:	d803      	bhi.n	5034 <vendor_request_handler+0x53c>
    502c:	4b3e      	ldr	r3, [pc, #248]	; (5128 <vendor_request_handler+0x630>)
    502e:	881b      	ldrh	r3, [r3, #0]
    5030:	b29b      	uxth	r3, r3
    5032:	e001      	b.n	5038 <vendor_request_handler+0x540>
    5034:	f640 23ea 	movw	r3, #2794	; 0xaea
    5038:	4a3b      	ldr	r2, [pc, #236]	; (5128 <vendor_request_handler+0x630>)
    503a:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    503c:	4b3c      	ldr	r3, [pc, #240]	; (5130 <vendor_request_handler+0x638>)
    503e:	781b      	ldrb	r3, [r3, #0]
    5040:	b2db      	uxtb	r3, r3
    5042:	2b09      	cmp	r3, #9
    5044:	d00a      	beq.n	505c <vendor_request_handler+0x564>
			channel = requested_channel;
    5046:	4b38      	ldr	r3, [pc, #224]	; (5128 <vendor_request_handler+0x630>)
    5048:	881b      	ldrh	r3, [r3, #0]
    504a:	b29a      	uxth	r2, r3
    504c:	4b35      	ldr	r3, [pc, #212]	; (5124 <vendor_request_handler+0x62c>)
    504e:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    5050:	4b35      	ldr	r3, [pc, #212]	; (5128 <vendor_request_handler+0x630>)
    5052:	2200      	movs	r2, #0
    5054:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    5056:	f7ff fcd9 	bl	4a0c <cs_threshold_calc_and_set>
		}
		break;
    505a:	e2b0      	b.n	55be <vendor_request_handler+0xac6>
    505c:	e2af      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    505e:	2339      	movs	r3, #57	; 0x39
    5060:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    5062:	4b34      	ldr	r3, [pc, #208]	; (5134 <vendor_request_handler+0x63c>)
    5064:	681b      	ldr	r3, [r3, #0]
    5066:	f107 0124 	add.w	r1, r7, #36	; 0x24
    506a:	f107 0210 	add.w	r2, r7, #16
    506e:	4608      	mov	r0, r1
    5070:	4611      	mov	r1, r2
    5072:	4798      	blx	r3
		*data_len = 0; /* should never return */
    5074:	683b      	ldr	r3, [r7, #0]
    5076:	2200      	movs	r2, #0
    5078:	601a      	str	r2, [r3, #0]
		break;
    507a:	e2a0      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    507c:	4b2e      	ldr	r3, [pc, #184]	; (5138 <vendor_request_handler+0x640>)
    507e:	4a2f      	ldr	r2, [pc, #188]	; (513c <vendor_request_handler+0x644>)
    5080:	601a      	str	r2, [r3, #0]
		reset();
    5082:	f005 f947 	bl	a314 <reset>
		break;
    5086:	e29a      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    5088:	68bb      	ldr	r3, [r7, #8]
    508a:	881b      	ldrh	r3, [r3, #0]
    508c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5090:	d917      	bls.n	50c2 <vendor_request_handler+0x5ca>
    5092:	68bb      	ldr	r3, [r7, #8]
    5094:	881b      	ldrh	r3, [r3, #0]
    5096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    509a:	d812      	bhi.n	50c2 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    509c:	68bb      	ldr	r3, [r7, #8]
    509e:	3302      	adds	r3, #2
    50a0:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    50a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    50a6:	d90c      	bls.n	50c2 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    50a8:	68bb      	ldr	r3, [r7, #8]
    50aa:	3302      	adds	r3, #2
    50ac:	881b      	ldrh	r3, [r3, #0]
    50ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    50b2:	d806      	bhi.n	50c2 <vendor_request_handler+0x5ca>
				request_params[1] < request_params[0])
    50b4:	68bb      	ldr	r3, [r7, #8]
    50b6:	3302      	adds	r3, #2
    50b8:	881a      	ldrh	r2, [r3, #0]
    50ba:	68bb      	ldr	r3, [r7, #8]
    50bc:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    50be:	429a      	cmp	r2, r3
    50c0:	d201      	bcs.n	50c6 <vendor_request_handler+0x5ce>
				request_params[1] < request_params[0])
			return 0;
    50c2:	2300      	movs	r3, #0
    50c4:	e27c      	b.n	55c0 <vendor_request_handler+0xac8>
		low_freq = request_params[0];
    50c6:	68bb      	ldr	r3, [r7, #8]
    50c8:	881a      	ldrh	r2, [r3, #0]
    50ca:	4b1d      	ldr	r3, [pc, #116]	; (5140 <vendor_request_handler+0x648>)
    50cc:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    50ce:	68bb      	ldr	r3, [r7, #8]
    50d0:	885a      	ldrh	r2, [r3, #2]
    50d2:	4b1c      	ldr	r3, [pc, #112]	; (5144 <vendor_request_handler+0x64c>)
    50d4:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    50d6:	4b10      	ldr	r3, [pc, #64]	; (5118 <vendor_request_handler+0x620>)
    50d8:	2204      	movs	r2, #4
    50da:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    50dc:	683b      	ldr	r3, [r7, #0]
    50de:	2200      	movs	r2, #0
    50e0:	601a      	str	r2, [r3, #0]
		break;
    50e2:	e26c      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    50e4:	68bb      	ldr	r3, [r7, #8]
    50e6:	881b      	ldrh	r3, [r3, #0]
    50e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    50ec:	d901      	bls.n	50f2 <vendor_request_handler+0x5fa>
			return 0;
    50ee:	2300      	movs	r3, #0
    50f0:	e266      	b.n	55c0 <vendor_request_handler+0xac8>
		rssi_threshold = (int8_t)request_params[0];
    50f2:	68bb      	ldr	r3, [r7, #8]
    50f4:	881b      	ldrh	r3, [r3, #0]
    50f6:	b2da      	uxtb	r2, r3
    50f8:	4b13      	ldr	r3, [pc, #76]	; (5148 <vendor_request_handler+0x650>)
    50fa:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    50fc:	4b06      	ldr	r3, [pc, #24]	; (5118 <vendor_request_handler+0x620>)
    50fe:	2207      	movs	r2, #7
    5100:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    5102:	683b      	ldr	r3, [r7, #0]
    5104:	2200      	movs	r2, #0
    5106:	601a      	str	r2, [r3, #0]
		break;
    5108:	e259      	b.n	55be <vendor_request_handler+0xac6>
    510a:	bf00      	nop
    510c:	2009c054 	.word	0x2009c054
    5110:	2009c058 	.word	0x2009c058
    5114:	2009c05c 	.word	0x2009c05c
    5118:	10000a3f 	.word	0x10000a3f
    511c:	100010b8 	.word	0x100010b8
    5120:	10000a42 	.word	0x10000a42
    5124:	1000049c 	.word	0x1000049c
    5128:	10000a44 	.word	0x10000a44
    512c:	1000097c 	.word	0x1000097c
    5130:	10000a3e 	.word	0x10000a3e
    5134:	10000448 	.word	0x10000448
    5138:	1000001c 	.word	0x1000001c
    513c:	4305bb21 	.word	0x4305bb21
    5140:	1000049e 	.word	0x1000049e
    5144:	100004a0 	.word	0x100004a0
    5148:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	2200      	movs	r2, #0
    5150:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	3301      	adds	r3, #1
    5156:	2200      	movs	r2, #0
    5158:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    515a:	48a4      	ldr	r0, [pc, #656]	; (53ec <vendor_request_handler+0x8f4>)
    515c:	f006 f96e 	bl	b43c <strlen>
    5160:	4603      	mov	r3, r0
    5162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    5166:	687b      	ldr	r3, [r7, #4]
    5168:	3302      	adds	r3, #2
    516a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    516e:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	1cda      	adds	r2, r3, #3
    5174:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    5178:	4610      	mov	r0, r2
    517a:	499c      	ldr	r1, [pc, #624]	; (53ec <vendor_request_handler+0x8f4>)
    517c:	461a      	mov	r2, r3
    517e:	f006 f8e7 	bl	b350 <memcpy>

		*data_len = 2 + 1 + length;
    5182:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    5186:	1cda      	adds	r2, r3, #3
    5188:	683b      	ldr	r3, [r7, #0]
    518a:	601a      	str	r2, [r3, #0]
		break;
    518c:	e217      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    518e:	4898      	ldr	r0, [pc, #608]	; (53f0 <vendor_request_handler+0x8f8>)
    5190:	f006 f954 	bl	b43c <strlen>
    5194:	4603      	mov	r3, r0
    5196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    519a:	687b      	ldr	r3, [r7, #4]
    519c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    51a0:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	1c5a      	adds	r2, r3, #1
    51a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51aa:	4610      	mov	r0, r2
    51ac:	4990      	ldr	r1, [pc, #576]	; (53f0 <vendor_request_handler+0x8f8>)
    51ae:	461a      	mov	r2, r3
    51b0:	f006 f8ce 	bl	b350 <memcpy>
		*data_len = 1 + length;
    51b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51b8:	1c5a      	adds	r2, r3, #1
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	601a      	str	r2, [r3, #0]
		break;
    51be:	e1fe      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	2201      	movs	r2, #1
    51c4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    51c6:	683b      	ldr	r3, [r7, #0]
    51c8:	2201      	movs	r2, #1
    51ca:	601a      	str	r2, [r3, #0]
		break;
    51cc:	e1f7      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    51ce:	68bb      	ldr	r3, [r7, #8]
    51d0:	881b      	ldrh	r3, [r3, #0]
    51d2:	b2da      	uxtb	r2, r3
    51d4:	4b87      	ldr	r3, [pc, #540]	; (53f4 <vendor_request_handler+0x8fc>)
    51d6:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    51d8:	f7ff fc18 	bl	4a0c <cs_threshold_calc_and_set>
		break;
    51dc:	e1ef      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    51de:	4b85      	ldr	r3, [pc, #532]	; (53f4 <vendor_request_handler+0x8fc>)
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	b2da      	uxtb	r2, r3
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    51e8:	683b      	ldr	r3, [r7, #0]
    51ea:	2201      	movs	r2, #1
    51ec:	601a      	str	r2, [r3, #0]
		break;
    51ee:	e1e6      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    51f0:	4981      	ldr	r1, [pc, #516]	; (53f8 <vendor_request_handler+0x900>)
    51f2:	f04f 0200 	mov.w	r2, #0
    51f6:	f04f 0300 	mov.w	r3, #0
    51fa:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    51fe:	497e      	ldr	r1, [pc, #504]	; (53f8 <vendor_request_handler+0x900>)
    5200:	f04f 0200 	mov.w	r2, #0
    5204:	f04f 0300 	mov.w	r3, #0
    5208:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    520c:	2300      	movs	r3, #0
    520e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5210:	e025      	b.n	525e <vendor_request_handler+0x766>
			target.address |= (uint64_t)data[i] << 8*i;
    5212:	4b79      	ldr	r3, [pc, #484]	; (53f8 <vendor_request_handler+0x900>)
    5214:	e9d3 ab00 	ldrd	sl, fp, [r3]
    5218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    521a:	687a      	ldr	r2, [r7, #4]
    521c:	4413      	add	r3, r2
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	b2da      	uxtb	r2, r3
    5222:	f04f 0300 	mov.w	r3, #0
    5226:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5228:	00c9      	lsls	r1, r1, #3
    522a:	f1a1 0620 	sub.w	r6, r1, #32
    522e:	f1c1 0020 	rsb	r0, r1, #32
    5232:	fa03 f901 	lsl.w	r9, r3, r1
    5236:	fa02 f606 	lsl.w	r6, r2, r6
    523a:	ea49 0906 	orr.w	r9, r9, r6
    523e:	fa22 f000 	lsr.w	r0, r2, r0
    5242:	ea49 0900 	orr.w	r9, r9, r0
    5246:	fa02 f801 	lsl.w	r8, r2, r1
    524a:	ea4a 0208 	orr.w	r2, sl, r8
    524e:	ea4b 0309 	orr.w	r3, fp, r9
    5252:	4969      	ldr	r1, [pc, #420]	; (53f8 <vendor_request_handler+0x900>)
    5254:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    5258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    525a:	3301      	adds	r3, #1
    525c:	64fb      	str	r3, [r7, #76]	; 0x4c
    525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5260:	2b07      	cmp	r3, #7
    5262:	ddd6      	ble.n	5212 <vendor_request_handler+0x71a>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5264:	2300      	movs	r3, #0
    5266:	64fb      	str	r3, [r7, #76]	; 0x4c
    5268:	e024      	b.n	52b4 <vendor_request_handler+0x7bc>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    526a:	4b63      	ldr	r3, [pc, #396]	; (53f8 <vendor_request_handler+0x900>)
    526c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    5270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5272:	3308      	adds	r3, #8
    5274:	687a      	ldr	r2, [r7, #4]
    5276:	4413      	add	r3, r2
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	b2da      	uxtb	r2, r3
    527c:	f04f 0300 	mov.w	r3, #0
    5280:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5282:	00c9      	lsls	r1, r1, #3
    5284:	f1a1 0620 	sub.w	r6, r1, #32
    5288:	f1c1 0020 	rsb	r0, r1, #32
    528c:	fa03 f501 	lsl.w	r5, r3, r1
    5290:	fa02 f606 	lsl.w	r6, r2, r6
    5294:	4335      	orrs	r5, r6
    5296:	fa22 f000 	lsr.w	r0, r2, r0
    529a:	4305      	orrs	r5, r0
    529c:	fa02 f401 	lsl.w	r4, r2, r1
    52a0:	ea48 0204 	orr.w	r2, r8, r4
    52a4:	ea49 0305 	orr.w	r3, r9, r5
    52a8:	4953      	ldr	r1, [pc, #332]	; (53f8 <vendor_request_handler+0x900>)
    52aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    52ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52b0:	3301      	adds	r3, #1
    52b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    52b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52b6:	2b07      	cmp	r3, #7
    52b8:	ddd7      	ble.n	526a <vendor_request_handler+0x772>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    52ba:	e180      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    52bc:	2300      	movs	r3, #0
    52be:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    52c0:	2300      	movs	r3, #0
    52c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    52c4:	e00d      	b.n	52e2 <vendor_request_handler+0x7ea>
			clock_offset <<= 8;
    52c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52c8:	021b      	lsls	r3, r3, #8
    52ca:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    52cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52ce:	687a      	ldr	r2, [r7, #4]
    52d0:	4413      	add	r3, r2
    52d2:	781b      	ldrb	r3, [r3, #0]
    52d4:	461a      	mov	r2, r3
    52d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52d8:	4313      	orrs	r3, r2
    52da:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    52dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52de:	3301      	adds	r3, #1
    52e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    52e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52e4:	2b03      	cmp	r3, #3
    52e6:	ddee      	ble.n	52c6 <vendor_request_handler+0x7ce>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    52e8:	4b44      	ldr	r3, [pc, #272]	; (53fc <vendor_request_handler+0x904>)
    52ea:	681a      	ldr	r2, [r3, #0]
    52ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52ee:	4413      	add	r3, r2
    52f0:	4a42      	ldr	r2, [pc, #264]	; (53fc <vendor_request_handler+0x904>)
    52f2:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    52f4:	4b42      	ldr	r3, [pc, #264]	; (5400 <vendor_request_handler+0x908>)
    52f6:	2202      	movs	r2, #2
    52f8:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    52fa:	4b42      	ldr	r3, [pc, #264]	; (5404 <vendor_request_handler+0x90c>)
    52fc:	2208      	movs	r2, #8
    52fe:	701a      	strb	r2, [r3, #0]
		break;
    5300:	e15d      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	781b      	ldrb	r3, [r3, #0]
    5306:	461a      	mov	r2, r3
    5308:	687b      	ldr	r3, [r7, #4]
    530a:	3301      	adds	r3, #1
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	021b      	lsls	r3, r3, #8
    5310:	431a      	orrs	r2, r3
    5312:	687b      	ldr	r3, [r7, #4]
    5314:	3302      	adds	r3, #2
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	041b      	lsls	r3, r3, #16
    531a:	431a      	orrs	r2, r3
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	3303      	adds	r3, #3
    5320:	781b      	ldrb	r3, [r3, #0]
    5322:	061b      	lsls	r3, r3, #24
    5324:	4313      	orrs	r3, r2
    5326:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    5328:	4a34      	ldr	r2, [pc, #208]	; (53fc <vendor_request_handler+0x904>)
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    532e:	f7ff fb6d 	bl	4a0c <cs_threshold_calc_and_set>
		break;
    5332:	e144      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    5334:	2300      	movs	r3, #0
    5336:	64fb      	str	r3, [r7, #76]	; 0x4c
    5338:	e00b      	b.n	5352 <vendor_request_handler+0x85a>
			afh_map[i] = data[i];
    533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    533c:	687a      	ldr	r2, [r7, #4]
    533e:	4413      	add	r3, r2
    5340:	7819      	ldrb	r1, [r3, #0]
    5342:	4a31      	ldr	r2, [pc, #196]	; (5408 <vendor_request_handler+0x910>)
    5344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5346:	4413      	add	r3, r2
    5348:	460a      	mov	r2, r1
    534a:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    534e:	3301      	adds	r3, #1
    5350:	64fb      	str	r3, [r7, #76]	; 0x4c
    5352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5354:	2b09      	cmp	r3, #9
    5356:	ddf0      	ble.n	533a <vendor_request_handler+0x842>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    5358:	4b2c      	ldr	r3, [pc, #176]	; (540c <vendor_request_handler+0x914>)
    535a:	2201      	movs	r2, #1
    535c:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    535e:	683b      	ldr	r3, [r7, #0]
    5360:	220a      	movs	r2, #10
    5362:	601a      	str	r2, [r3, #0]
		break;
    5364:	e12b      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    5366:	2300      	movs	r3, #0
    5368:	64fb      	str	r3, [r7, #76]	; 0x4c
    536a:	e007      	b.n	537c <vendor_request_handler+0x884>
			afh_map[i] = 0;
    536c:	4a26      	ldr	r2, [pc, #152]	; (5408 <vendor_request_handler+0x910>)
    536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5370:	4413      	add	r3, r2
    5372:	2200      	movs	r2, #0
    5374:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    5376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5378:	3301      	adds	r3, #1
    537a:	64fb      	str	r3, [r7, #76]	; 0x4c
    537c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    537e:	2b09      	cmp	r3, #9
    5380:	ddf4      	ble.n	536c <vendor_request_handler+0x874>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5382:	4b22      	ldr	r3, [pc, #136]	; (540c <vendor_request_handler+0x914>)
    5384:	2200      	movs	r2, #0
    5386:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5388:	683b      	ldr	r3, [r7, #0]
    538a:	220a      	movs	r2, #10
    538c:	601a      	str	r2, [r3, #0]
		break;
    538e:	e116      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5390:	4b1a      	ldr	r3, [pc, #104]	; (53fc <vendor_request_handler+0x904>)
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    5396:	2300      	movs	r3, #0
    5398:	64fb      	str	r3, [r7, #76]	; 0x4c
    539a:	e00c      	b.n	53b6 <vendor_request_handler+0x8be>
			data[i] = (clock >> (8*i)) & 0xff;
    539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    539e:	687a      	ldr	r2, [r7, #4]
    53a0:	4413      	add	r3, r2
    53a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    53a4:	00d2      	lsls	r2, r2, #3
    53a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    53a8:	fa21 f202 	lsr.w	r2, r1, r2
    53ac:	b2d2      	uxtb	r2, r2
    53ae:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    53b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53b2:	3301      	adds	r3, #1
    53b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    53b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53b8:	2b03      	cmp	r3, #3
    53ba:	ddef      	ble.n	539c <vendor_request_handler+0x8a4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    53bc:	683b      	ldr	r3, [r7, #0]
    53be:	2204      	movs	r2, #4
    53c0:	601a      	str	r2, [r3, #0]
		break;
    53c2:	e0fc      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    53c4:	683b      	ldr	r3, [r7, #0]
    53c6:	2200      	movs	r2, #0
    53c8:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    53ca:	4b11      	ldr	r3, [pc, #68]	; (5410 <vendor_request_handler+0x918>)
    53cc:	2200      	movs	r2, #0
    53ce:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    53d0:	4b0b      	ldr	r3, [pc, #44]	; (5400 <vendor_request_handler+0x908>)
    53d2:	2203      	movs	r2, #3
    53d4:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    53d6:	4b0b      	ldr	r3, [pc, #44]	; (5404 <vendor_request_handler+0x90c>)
    53d8:	2209      	movs	r2, #9
    53da:	701a      	strb	r2, [r3, #0]

		queue_init();
    53dc:	f003 fb54 	bl	8a88 <queue_init>
		cs_threshold_calc_and_set();
    53e0:	f7ff fb14 	bl	4a0c <cs_threshold_calc_and_set>
		break;
    53e4:	e0eb      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    53e6:	2300      	movs	r3, #0
    53e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    53ea:	e021      	b.n	5430 <vendor_request_handler+0x938>
    53ec:	0000bd80 	.word	0x0000bd80
    53f0:	0000bd1c 	.word	0x0000bd1c
    53f4:	1000044c 	.word	0x1000044c
    53f8:	10001100 	.word	0x10001100
    53fc:	10000c2c 	.word	0x10000c2c
    5400:	1000097c 	.word	0x1000097c
    5404:	10000a3f 	.word	0x10000a3f
    5408:	10000c04 	.word	0x10000c04
    540c:	1000106c 	.word	0x1000106c
    5410:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    5414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5416:	687a      	ldr	r2, [r7, #4]
    5418:	4413      	add	r3, r2
    541a:	4a6c      	ldr	r2, [pc, #432]	; (55cc <vendor_request_handler+0xad4>)
    541c:	6811      	ldr	r1, [r2, #0]
    541e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5420:	00d2      	lsls	r2, r2, #3
    5422:	fa21 f202 	lsr.w	r2, r1, r2
    5426:	b2d2      	uxtb	r2, r2
    5428:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    542a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    542c:	3301      	adds	r3, #1
    542e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5432:	2b03      	cmp	r3, #3
    5434:	ddee      	ble.n	5414 <vendor_request_handler+0x91c>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5436:	683b      	ldr	r3, [r7, #0]
    5438:	2204      	movs	r2, #4
    543a:	601a      	str	r2, [r3, #0]
		break;
    543c:	e0bf      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    543e:	687b      	ldr	r3, [r7, #4]
    5440:	781b      	ldrb	r3, [r3, #0]
    5442:	461a      	mov	r2, r3
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	3301      	adds	r3, #1
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	021b      	lsls	r3, r3, #8
    544c:	431a      	orrs	r2, r3
    544e:	687b      	ldr	r3, [r7, #4]
    5450:	3302      	adds	r3, #2
    5452:	781b      	ldrb	r3, [r3, #0]
    5454:	041b      	lsls	r3, r3, #16
    5456:	431a      	orrs	r2, r3
    5458:	687b      	ldr	r3, [r7, #4]
    545a:	3303      	adds	r3, #3
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	061b      	lsls	r3, r3, #24
    5460:	4313      	orrs	r3, r2
    5462:	4618      	mov	r0, r3
    5464:	f001 f8c2 	bl	65ec <le_set_access_address>
		le.target_set = 1;
    5468:	4b58      	ldr	r3, [pc, #352]	; (55cc <vendor_request_handler+0xad4>)
    546a:	2201      	movs	r2, #1
    546c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    546e:	e0a6      	b.n	55be <vendor_request_handler+0xac6>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	2213      	movs	r2, #19
    5474:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    5476:	687b      	ldr	r3, [r7, #4]
    5478:	3301      	adds	r3, #1
    547a:	2237      	movs	r2, #55	; 0x37
    547c:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    547e:	683b      	ldr	r3, [r7, #0]
    5480:	2202      	movs	r2, #2
    5482:	601a      	str	r2, [r3, #0]
		break;
    5484:	e09b      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    5486:	4b51      	ldr	r3, [pc, #324]	; (55cc <vendor_request_handler+0xad4>)
    5488:	691b      	ldr	r3, [r3, #16]
    548a:	2b00      	cmp	r3, #0
    548c:	bf14      	ite	ne
    548e:	2301      	movne	r3, #1
    5490:	2300      	moveq	r3, #0
    5492:	b2db      	uxtb	r3, r3
    5494:	461a      	mov	r2, r3
    5496:	687b      	ldr	r3, [r7, #4]
    5498:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    549a:	683b      	ldr	r3, [r7, #0]
    549c:	2201      	movs	r2, #1
    549e:	601a      	str	r2, [r3, #0]
		break;
    54a0:	e08d      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    54a2:	68bb      	ldr	r3, [r7, #8]
    54a4:	881b      	ldrh	r3, [r3, #0]
    54a6:	2b00      	cmp	r3, #0
    54a8:	bf14      	ite	ne
    54aa:	2301      	movne	r3, #1
    54ac:	2300      	moveq	r3, #0
    54ae:	b2db      	uxtb	r3, r3
    54b0:	461a      	mov	r2, r3
    54b2:	4b46      	ldr	r3, [pc, #280]	; (55cc <vendor_request_handler+0xad4>)
    54b4:	611a      	str	r2, [r3, #16]
		break;
    54b6:	e082      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_POLL:
		p = dequeue();
    54b8:	f003 fb26 	bl	8b08 <dequeue>
    54bc:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    54be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    54c0:	2b00      	cmp	r3, #0
    54c2:	d008      	beq.n	54d6 <vendor_request_handler+0x9de>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    54c4:	6878      	ldr	r0, [r7, #4]
    54c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
    54c8:	2240      	movs	r2, #64	; 0x40
    54ca:	f005 ff41 	bl	b350 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    54ce:	683b      	ldr	r3, [r7, #0]
    54d0:	2240      	movs	r2, #64	; 0x40
    54d2:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    54d4:	e073      	b.n	55be <vendor_request_handler+0xac6>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    54d6:	687b      	ldr	r3, [r7, #4]
    54d8:	2200      	movs	r2, #0
    54da:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    54dc:	683b      	ldr	r3, [r7, #0]
    54de:	2201      	movs	r2, #1
    54e0:	601a      	str	r2, [r3, #0]
		}
		break;
    54e2:	e06c      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    54e4:	683b      	ldr	r3, [r7, #0]
    54e6:	2200      	movs	r2, #0
    54e8:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    54ea:	4b39      	ldr	r3, [pc, #228]	; (55d0 <vendor_request_handler+0xad8>)
    54ec:	2200      	movs	r2, #0
    54ee:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    54f0:	4b38      	ldr	r3, [pc, #224]	; (55d4 <vendor_request_handler+0xadc>)
    54f2:	220a      	movs	r2, #10
    54f4:	701a      	strb	r2, [r3, #0]

		queue_init();
    54f6:	f003 fac7 	bl	8a88 <queue_init>
		cs_threshold_calc_and_set();
    54fa:	f7ff fa87 	bl	4a0c <cs_threshold_calc_and_set>
		break;
    54fe:	e05e      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    5500:	68bb      	ldr	r3, [r7, #8]
    5502:	881b      	ldrh	r3, [r3, #0]
    5504:	b2db      	uxtb	r3, r3
    5506:	4618      	mov	r0, r3
    5508:	f004 fd22 	bl	9f50 <cc2400_get>
    550c:	4603      	mov	r3, r0
    550e:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    5510:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    5512:	0a1b      	lsrs	r3, r3, #8
    5514:	b29b      	uxth	r3, r3
    5516:	b2da      	uxtb	r2, r3
    5518:	687b      	ldr	r3, [r7, #4]
    551a:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    551c:	687b      	ldr	r3, [r7, #4]
    551e:	3301      	adds	r3, #1
    5520:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    5522:	b2d2      	uxtb	r2, r2
    5524:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5526:	683b      	ldr	r3, [r7, #0]
    5528:	2202      	movs	r2, #2
    552a:	601a      	str	r2, [r3, #0]
		break;
    552c:	e047      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    552e:	68bb      	ldr	r3, [r7, #8]
    5530:	881b      	ldrh	r3, [r3, #0]
    5532:	b2da      	uxtb	r2, r3
    5534:	68bb      	ldr	r3, [r7, #8]
    5536:	3302      	adds	r3, #2
    5538:	881b      	ldrh	r3, [r3, #0]
    553a:	4610      	mov	r0, r2
    553c:	4619      	mov	r1, r3
    553e:	f004 fd1d 	bl	9f7c <cc2400_set>
		break;
    5542:	e03c      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    5544:	4824      	ldr	r0, [pc, #144]	; (55d8 <vendor_request_handler+0xae0>)
    5546:	6879      	ldr	r1, [r7, #4]
    5548:	2206      	movs	r2, #6
    554a:	f005 ff01 	bl	b350 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    554e:	4b21      	ldr	r3, [pc, #132]	; (55d4 <vendor_request_handler+0xadc>)
    5550:	220c      	movs	r2, #12
    5552:	701a      	strb	r2, [r3, #0]
		break;
    5554:	e033      	b.n	55be <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	795a      	ldrb	r2, [r3, #5]
    555a:	4b1c      	ldr	r3, [pc, #112]	; (55cc <vendor_request_handler+0xad4>)
    555c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    5560:	687b      	ldr	r3, [r7, #4]
    5562:	791a      	ldrb	r2, [r3, #4]
    5564:	4b19      	ldr	r3, [pc, #100]	; (55cc <vendor_request_handler+0xad4>)
    5566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    556a:	687b      	ldr	r3, [r7, #4]
    556c:	78da      	ldrb	r2, [r3, #3]
    556e:	4b17      	ldr	r3, [pc, #92]	; (55cc <vendor_request_handler+0xad4>)
    5570:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	789a      	ldrb	r2, [r3, #2]
    5578:	4b14      	ldr	r3, [pc, #80]	; (55cc <vendor_request_handler+0xad4>)
    557a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	785a      	ldrb	r2, [r3, #1]
    5582:	4b12      	ldr	r3, [pc, #72]	; (55cc <vendor_request_handler+0xad4>)
    5584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	781a      	ldrb	r2, [r3, #0]
    558c:	4b0f      	ldr	r3, [pc, #60]	; (55cc <vendor_request_handler+0xad4>)
    558e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5592:	4b0e      	ldr	r3, [pc, #56]	; (55cc <vendor_request_handler+0xad4>)
    5594:	2201      	movs	r2, #1
    5596:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5598:	e011      	b.n	55be <vendor_request_handler+0xac6>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    559a:	68bb      	ldr	r3, [r7, #8]
    559c:	881b      	ldrh	r3, [r3, #0]
    559e:	b2da      	uxtb	r2, r3
    55a0:	4b0e      	ldr	r3, [pc, #56]	; (55dc <vendor_request_handler+0xae4>)
    55a2:	701a      	strb	r2, [r3, #0]
		break;
    55a4:	e00b      	b.n	55be <vendor_request_handler+0xac6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    55a6:	4b0b      	ldr	r3, [pc, #44]	; (55d4 <vendor_request_handler+0xadc>)
    55a8:	220d      	movs	r2, #13
    55aa:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    55ac:	68bb      	ldr	r3, [r7, #8]
    55ae:	881b      	ldrh	r3, [r3, #0]
    55b0:	b2da      	uxtb	r2, r3
    55b2:	4b0b      	ldr	r3, [pc, #44]	; (55e0 <vendor_request_handler+0xae8>)
    55b4:	701a      	strb	r2, [r3, #0]
		break;
    55b6:	e002      	b.n	55be <vendor_request_handler+0xac6>

	default:
		return 0;
    55b8:	2300      	movs	r3, #0
    55ba:	e001      	b.n	55c0 <vendor_request_handler+0xac8>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    55bc:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    55be:	2301      	movs	r3, #1
}
    55c0:	4618      	mov	r0, r3
    55c2:	3754      	adds	r7, #84	; 0x54
    55c4:	46bd      	mov	sp, r7
    55c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55ca:	bf00      	nop
    55cc:	10000458 	.word	0x10000458
    55d0:	1000097c 	.word	0x1000097c
    55d4:	10000a3f 	.word	0x10000a3f
    55d8:	1000098c 	.word	0x1000098c
    55dc:	10000a40 	.word	0x10000a40
    55e0:	10000a41 	.word	0x10000a41

000055e4 <clkn_init>:

static void clkn_init()
{
    55e4:	b480      	push	{r7}
    55e6:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    55e8:	4b0c      	ldr	r3, [pc, #48]	; (561c <clkn_init+0x38>)
    55ea:	2202      	movs	r2, #2
    55ec:	601a      	str	r2, [r3, #0]
	clkn = 0;
    55ee:	4b0c      	ldr	r3, [pc, #48]	; (5620 <clkn_init+0x3c>)
    55f0:	2200      	movs	r2, #0
    55f2:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    55f4:	4b0b      	ldr	r3, [pc, #44]	; (5624 <clkn_init+0x40>)
    55f6:	2204      	movs	r2, #4
    55f8:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    55fa:	4b0b      	ldr	r3, [pc, #44]	; (5628 <clkn_init+0x44>)
    55fc:	f640 4234 	movw	r2, #3124	; 0xc34
    5600:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    5602:	4b0a      	ldr	r3, [pc, #40]	; (562c <clkn_init+0x48>)
    5604:	2203      	movs	r2, #3
    5606:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    5608:	4b09      	ldr	r3, [pc, #36]	; (5630 <clkn_init+0x4c>)
    560a:	2202      	movs	r2, #2
    560c:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    560e:	4b03      	ldr	r3, [pc, #12]	; (561c <clkn_init+0x38>)
    5610:	2201      	movs	r2, #1
    5612:	601a      	str	r2, [r3, #0]
}
    5614:	46bd      	mov	sp, r7
    5616:	f85d 7b04 	ldr.w	r7, [sp], #4
    561a:	4770      	bx	lr
    561c:	40004004 	.word	0x40004004
    5620:	10000c2c 	.word	0x10000c2c
    5624:	4000400c 	.word	0x4000400c
    5628:	40004018 	.word	0x40004018
    562c:	40004014 	.word	0x40004014
    5630:	e000e100 	.word	0xe000e100

00005634 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5634:	b480      	push	{r7}
    5636:	b083      	sub	sp, #12
    5638:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    563a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    563e:	681b      	ldr	r3, [r3, #0]
    5640:	f003 0301 	and.w	r3, r3, #1
    5644:	2b00      	cmp	r3, #0
    5646:	d06d      	beq.n	5724 <TIMER0_IRQHandler+0xf0>

		clkn++;
    5648:	4b39      	ldr	r3, [pc, #228]	; (5730 <TIMER0_IRQHandler+0xfc>)
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	3301      	adds	r3, #1
    564e:	4a38      	ldr	r2, [pc, #224]	; (5730 <TIMER0_IRQHandler+0xfc>)
    5650:	6013      	str	r3, [r2, #0]
		next = clkn;
    5652:	4b37      	ldr	r3, [pc, #220]	; (5730 <TIMER0_IRQHandler+0xfc>)
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    5658:	4b36      	ldr	r3, [pc, #216]	; (5734 <TIMER0_IRQHandler+0x100>)
    565a:	699b      	ldr	r3, [r3, #24]
    565c:	687a      	ldr	r2, [r7, #4]
    565e:	1ad3      	subs	r3, r2, r3
    5660:	f003 0303 	and.w	r3, r3, #3
    5664:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5666:	4b34      	ldr	r3, [pc, #208]	; (5738 <TIMER0_IRQHandler+0x104>)
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	2b00      	cmp	r3, #0
    566c:	d003      	beq.n	5676 <TIMER0_IRQHandler+0x42>
    566e:	4b32      	ldr	r3, [pc, #200]	; (5738 <TIMER0_IRQHandler+0x104>)
    5670:	781b      	ldrb	r3, [r3, #0]
    5672:	2b01      	cmp	r3, #1
    5674:	d109      	bne.n	568a <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    5676:	687b      	ldr	r3, [r7, #4]
    5678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    567c:	2b00      	cmp	r3, #0
    567e:	d103      	bne.n	5688 <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5680:	4b2e      	ldr	r3, [pc, #184]	; (573c <TIMER0_IRQHandler+0x108>)
    5682:	2201      	movs	r2, #1
    5684:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    5686:	e037      	b.n	56f8 <TIMER0_IRQHandler+0xc4>
    5688:	e036      	b.n	56f8 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    568a:	4b2b      	ldr	r3, [pc, #172]	; (5738 <TIMER0_IRQHandler+0x104>)
    568c:	781b      	ldrb	r3, [r3, #0]
    568e:	2b02      	cmp	r3, #2
    5690:	d108      	bne.n	56a4 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	f003 0301 	and.w	r3, r3, #1
    5698:	2b00      	cmp	r3, #0
    569a:	d12d      	bne.n	56f8 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    569c:	4b27      	ldr	r3, [pc, #156]	; (573c <TIMER0_IRQHandler+0x108>)
    569e:	2201      	movs	r2, #1
    56a0:	701a      	strb	r2, [r3, #0]
    56a2:	e029      	b.n	56f8 <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    56a4:	4b24      	ldr	r3, [pc, #144]	; (5738 <TIMER0_IRQHandler+0x104>)
    56a6:	781b      	ldrb	r3, [r3, #0]
    56a8:	2b03      	cmp	r3, #3
    56aa:	d125      	bne.n	56f8 <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    56ac:	4b21      	ldr	r3, [pc, #132]	; (5734 <TIMER0_IRQHandler+0x100>)
    56ae:	7d1b      	ldrb	r3, [r3, #20]
    56b0:	2b03      	cmp	r3, #3
    56b2:	d121      	bne.n	56f8 <TIMER0_IRQHandler+0xc4>
    56b4:	683b      	ldr	r3, [r7, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d11e      	bne.n	56f8 <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    56ba:	4b1e      	ldr	r3, [pc, #120]	; (5734 <TIMER0_IRQHandler+0x100>)
    56bc:	8b9b      	ldrh	r3, [r3, #28]
    56be:	b29b      	uxth	r3, r3
    56c0:	3b01      	subs	r3, #1
    56c2:	b29a      	uxth	r2, r3
    56c4:	4b1b      	ldr	r3, [pc, #108]	; (5734 <TIMER0_IRQHandler+0x100>)
    56c6:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    56c8:	4b1a      	ldr	r3, [pc, #104]	; (5734 <TIMER0_IRQHandler+0x100>)
    56ca:	8b9b      	ldrh	r3, [r3, #28]
    56cc:	b29b      	uxth	r3, r3
    56ce:	2b00      	cmp	r3, #0
    56d0:	d10e      	bne.n	56f0 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    56d2:	4b1a      	ldr	r3, [pc, #104]	; (573c <TIMER0_IRQHandler+0x108>)
    56d4:	2201      	movs	r2, #1
    56d6:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    56d8:	4b16      	ldr	r3, [pc, #88]	; (5734 <TIMER0_IRQHandler+0x100>)
    56da:	8c1b      	ldrh	r3, [r3, #32]
    56dc:	b29b      	uxth	r3, r3
    56de:	3301      	adds	r3, #1
    56e0:	b29a      	uxth	r2, r3
    56e2:	4b14      	ldr	r3, [pc, #80]	; (5734 <TIMER0_IRQHandler+0x100>)
    56e4:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    56e6:	4b13      	ldr	r3, [pc, #76]	; (5734 <TIMER0_IRQHandler+0x100>)
    56e8:	8bda      	ldrh	r2, [r3, #30]
    56ea:	4b12      	ldr	r3, [pc, #72]	; (5734 <TIMER0_IRQHandler+0x100>)
    56ec:	839a      	strh	r2, [r3, #28]
    56ee:	e003      	b.n	56f8 <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    56f0:	4b13      	ldr	r3, [pc, #76]	; (5740 <TIMER0_IRQHandler+0x10c>)
    56f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    56f6:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    56fe:	2b00      	cmp	r3, #0
    5700:	d102      	bne.n	5708 <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    5702:	4b10      	ldr	r3, [pc, #64]	; (5744 <TIMER0_IRQHandler+0x110>)
    5704:	2201      	movs	r2, #1
    5706:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    5708:	4a0f      	ldr	r2, [pc, #60]	; (5748 <TIMER0_IRQHandler+0x114>)
    570a:	4b10      	ldr	r3, [pc, #64]	; (574c <TIMER0_IRQHandler+0x118>)
    570c:	681b      	ldr	r3, [r3, #0]
    570e:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    5712:	3304      	adds	r3, #4
    5714:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    5716:	4b0d      	ldr	r3, [pc, #52]	; (574c <TIMER0_IRQHandler+0x118>)
    5718:	2200      	movs	r2, #0
    571a:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    571c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5720:	2201      	movs	r2, #1
    5722:	601a      	str	r2, [r3, #0]
	}
}
    5724:	370c      	adds	r7, #12
    5726:	46bd      	mov	sp, r7
    5728:	f85d 7b04 	ldr.w	r7, [sp], #4
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	10000c2c 	.word	0x10000c2c
    5734:	10000458 	.word	0x10000458
    5738:	1000097c 	.word	0x1000097c
    573c:	1000097d 	.word	0x1000097d
    5740:	2009c03c 	.word	0x2009c03c
    5744:	10000c28 	.word	0x10000c28
    5748:	40004018 	.word	0x40004018
    574c:	10000984 	.word	0x10000984

00005750 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    5750:	b480      	push	{r7}
    5752:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    5754:	4b0b      	ldr	r3, [pc, #44]	; (5784 <EINT3_IRQHandler+0x34>)
    5756:	2204      	movs	r2, #4
    5758:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    575a:	4b0b      	ldr	r3, [pc, #44]	; (5788 <EINT3_IRQHandler+0x38>)
    575c:	2201      	movs	r2, #1
    575e:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    5760:	4b0a      	ldr	r3, [pc, #40]	; (578c <EINT3_IRQHandler+0x3c>)
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5768:	f640 4235 	movw	r2, #3125	; 0xc35
    576c:	fb02 f203 	mul.w	r2, r2, r3
    5770:	4b07      	ldr	r3, [pc, #28]	; (5790 <EINT3_IRQHandler+0x40>)
    5772:	681b      	ldr	r3, [r3, #0]
    5774:	4413      	add	r3, r2
    5776:	4a07      	ldr	r2, [pc, #28]	; (5794 <EINT3_IRQHandler+0x44>)
    5778:	6013      	str	r3, [r2, #0]
}
    577a:	46bd      	mov	sp, r7
    577c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5780:	4770      	bx	lr
    5782:	bf00      	nop
    5784:	400280ac 	.word	0x400280ac
    5788:	100010f8 	.word	0x100010f8
    578c:	10000c2c 	.word	0x10000c2c
    5790:	40004008 	.word	0x40004008
    5794:	10000c24 	.word	0x10000c24

00005798 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5798:	b480      	push	{r7}
    579a:	b085      	sub	sp, #20
    579c:	af00      	add	r7, sp, #0
    579e:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 3125 / 1000;  // millis -> clkn ticks
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	f640 4235 	movw	r2, #3125	; 0xc35
    57a6:	fb02 f303 	mul.w	r3, r2, r3
    57aa:	4a09      	ldr	r2, [pc, #36]	; (57d0 <msleep+0x38>)
    57ac:	fba2 2303 	umull	r2, r3, r2, r3
    57b0:	099a      	lsrs	r2, r3, #6
    57b2:	4b08      	ldr	r3, [pc, #32]	; (57d4 <msleep+0x3c>)
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	4413      	add	r3, r2
    57b8:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    57ba:	4b06      	ldr	r3, [pc, #24]	; (57d4 <msleep+0x3c>)
    57bc:	681a      	ldr	r2, [r3, #0]
    57be:	68fb      	ldr	r3, [r7, #12]
    57c0:	429a      	cmp	r2, r3
    57c2:	d3fa      	bcc.n	57ba <msleep+0x22>
}
    57c4:	3714      	adds	r7, #20
    57c6:	46bd      	mov	sp, r7
    57c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    57cc:	4770      	bx	lr
    57ce:	bf00      	nop
    57d0:	10624dd3 	.word	0x10624dd3
    57d4:	10000c2c 	.word	0x10000c2c

000057d8 <dma_init>:

static void dma_init()
{
    57d8:	b480      	push	{r7}
    57da:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    57dc:	4a3f      	ldr	r2, [pc, #252]	; (58dc <dma_init+0x104>)
    57de:	4b3f      	ldr	r3, [pc, #252]	; (58dc <dma_init+0x104>)
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    57e6:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    57e8:	4b3d      	ldr	r3, [pc, #244]	; (58e0 <dma_init+0x108>)
    57ea:	2200      	movs	r2, #0
    57ec:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    57ee:	4b3d      	ldr	r3, [pc, #244]	; (58e4 <dma_init+0x10c>)
    57f0:	2200      	movs	r2, #0
    57f2:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    57f4:	4b3c      	ldr	r3, [pc, #240]	; (58e8 <dma_init+0x110>)
    57f6:	2200      	movs	r2, #0
    57f8:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    57fa:	4b3c      	ldr	r3, [pc, #240]	; (58ec <dma_init+0x114>)
    57fc:	2200      	movs	r2, #0
    57fe:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5800:	4b3b      	ldr	r3, [pc, #236]	; (58f0 <dma_init+0x118>)
    5802:	2200      	movs	r2, #0
    5804:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5806:	4b3b      	ldr	r3, [pc, #236]	; (58f4 <dma_init+0x11c>)
    5808:	2200      	movs	r2, #0
    580a:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    580c:	4b3a      	ldr	r3, [pc, #232]	; (58f8 <dma_init+0x120>)
    580e:	2200      	movs	r2, #0
    5810:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5812:	4b3a      	ldr	r3, [pc, #232]	; (58fc <dma_init+0x124>)
    5814:	2200      	movs	r2, #0
    5816:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5818:	4b39      	ldr	r3, [pc, #228]	; (5900 <dma_init+0x128>)
    581a:	22ff      	movs	r2, #255	; 0xff
    581c:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    581e:	4b39      	ldr	r3, [pc, #228]	; (5904 <dma_init+0x12c>)
    5820:	22ff      	movs	r2, #255	; 0xff
    5822:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    5824:	4b38      	ldr	r3, [pc, #224]	; (5908 <dma_init+0x130>)
    5826:	4a39      	ldr	r2, [pc, #228]	; (590c <dma_init+0x134>)
    5828:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    582a:	4a39      	ldr	r2, [pc, #228]	; (5910 <dma_init+0x138>)
    582c:	4b36      	ldr	r3, [pc, #216]	; (5908 <dma_init+0x130>)
    582e:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5830:	4a38      	ldr	r2, [pc, #224]	; (5914 <dma_init+0x13c>)
    5832:	4b35      	ldr	r3, [pc, #212]	; (5908 <dma_init+0x130>)
    5834:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    5836:	4b34      	ldr	r3, [pc, #208]	; (5908 <dma_init+0x130>)
    5838:	4a37      	ldr	r2, [pc, #220]	; (5918 <dma_init+0x140>)
    583a:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    583c:	4b35      	ldr	r3, [pc, #212]	; (5914 <dma_init+0x13c>)
    583e:	4a33      	ldr	r2, [pc, #204]	; (590c <dma_init+0x134>)
    5840:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    5842:	4a36      	ldr	r2, [pc, #216]	; (591c <dma_init+0x144>)
    5844:	4b33      	ldr	r3, [pc, #204]	; (5914 <dma_init+0x13c>)
    5846:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5848:	4a2f      	ldr	r2, [pc, #188]	; (5908 <dma_init+0x130>)
    584a:	4b32      	ldr	r3, [pc, #200]	; (5914 <dma_init+0x13c>)
    584c:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    584e:	4b31      	ldr	r3, [pc, #196]	; (5914 <dma_init+0x13c>)
    5850:	4a31      	ldr	r2, [pc, #196]	; (5918 <dma_init+0x140>)
    5852:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    5854:	4b32      	ldr	r3, [pc, #200]	; (5920 <dma_init+0x148>)
    5856:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    585a:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    585c:	4b31      	ldr	r3, [pc, #196]	; (5924 <dma_init+0x14c>)
    585e:	2201      	movs	r2, #1
    5860:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5862:	bf00      	nop
    5864:	4b2f      	ldr	r3, [pc, #188]	; (5924 <dma_init+0x14c>)
    5866:	681b      	ldr	r3, [r3, #0]
    5868:	f003 0301 	and.w	r3, r3, #1
    586c:	2b00      	cmp	r3, #0
    586e:	d0f9      	beq.n	5864 <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5870:	4a2d      	ldr	r2, [pc, #180]	; (5928 <dma_init+0x150>)
    5872:	4b25      	ldr	r3, [pc, #148]	; (5908 <dma_init+0x130>)
    5874:	681b      	ldr	r3, [r3, #0]
    5876:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5878:	4a2c      	ldr	r2, [pc, #176]	; (592c <dma_init+0x154>)
    587a:	4b23      	ldr	r3, [pc, #140]	; (5908 <dma_init+0x130>)
    587c:	685b      	ldr	r3, [r3, #4]
    587e:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5880:	4a2b      	ldr	r2, [pc, #172]	; (5930 <dma_init+0x158>)
    5882:	4b21      	ldr	r3, [pc, #132]	; (5908 <dma_init+0x130>)
    5884:	689b      	ldr	r3, [r3, #8]
    5886:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5888:	4a2a      	ldr	r2, [pc, #168]	; (5934 <dma_init+0x15c>)
    588a:	4b1f      	ldr	r3, [pc, #124]	; (5908 <dma_init+0x130>)
    588c:	68db      	ldr	r3, [r3, #12]
    588e:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5890:	4b13      	ldr	r3, [pc, #76]	; (58e0 <dma_init+0x108>)
    5892:	f24d 0206 	movw	r2, #53254	; 0xd006
    5896:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5898:	4b27      	ldr	r3, [pc, #156]	; (5938 <dma_init+0x160>)
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	0d1b      	lsrs	r3, r3, #20
    589e:	b2db      	uxtb	r3, r3
    58a0:	4a26      	ldr	r2, [pc, #152]	; (593c <dma_init+0x164>)
    58a2:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58a4:	4b24      	ldr	r3, [pc, #144]	; (5938 <dma_init+0x160>)
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58ac:	f640 4235 	movw	r2, #3125	; 0xc35
    58b0:	fb02 f203 	mul.w	r2, r2, r3
    58b4:	4b22      	ldr	r3, [pc, #136]	; (5940 <dma_init+0x168>)
    58b6:	681b      	ldr	r3, [r3, #0]
    58b8:	4413      	add	r3, r2
    58ba:	4a22      	ldr	r2, [pc, #136]	; (5944 <dma_init+0x16c>)
    58bc:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    58be:	4b22      	ldr	r3, [pc, #136]	; (5948 <dma_init+0x170>)
    58c0:	881b      	ldrh	r3, [r3, #0]
    58c2:	b29a      	uxth	r2, r3
    58c4:	4b21      	ldr	r3, [pc, #132]	; (594c <dma_init+0x174>)
    58c6:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    58c8:	4b21      	ldr	r3, [pc, #132]	; (5950 <dma_init+0x178>)
    58ca:	2200      	movs	r2, #0
    58cc:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    58ce:	4b21      	ldr	r3, [pc, #132]	; (5954 <dma_init+0x17c>)
    58d0:	2200      	movs	r2, #0
    58d2:	601a      	str	r2, [r3, #0]
}
    58d4:	46bd      	mov	sp, r7
    58d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    58da:	4770      	bx	lr
    58dc:	400fc0c4 	.word	0x400fc0c4
    58e0:	50004110 	.word	0x50004110
    58e4:	50004130 	.word	0x50004130
    58e8:	50004150 	.word	0x50004150
    58ec:	50004170 	.word	0x50004170
    58f0:	50004190 	.word	0x50004190
    58f4:	500041b0 	.word	0x500041b0
    58f8:	500041d0 	.word	0x500041d0
    58fc:	500041f0 	.word	0x500041f0
    5900:	50004008 	.word	0x50004008
    5904:	50004010 	.word	0x50004010
    5908:	100010a8 	.word	0x100010a8
    590c:	40030008 	.word	0x40030008
    5910:	100010c0 	.word	0x100010c0
    5914:	10000c14 	.word	0x10000c14
    5918:	88009032 	.word	0x88009032
    591c:	10001074 	.word	0x10001074
    5920:	e000e180 	.word	0xe000e180
    5924:	50004030 	.word	0x50004030
    5928:	50004100 	.word	0x50004100
    592c:	50004104 	.word	0x50004104
    5930:	50004108 	.word	0x50004108
    5934:	5000410c 	.word	0x5000410c
    5938:	10000c2c 	.word	0x10000c2c
    593c:	10000c30 	.word	0x10000c30
    5940:	40004008 	.word	0x40004008
    5944:	10001068 	.word	0x10001068
    5948:	1000049c 	.word	0x1000049c
    594c:	1000098a 	.word	0x1000098a
    5950:	10000b00 	.word	0x10000b00
    5954:	100010f4 	.word	0x100010f4

00005958 <dma_init_le>:

static void dma_init_le()
{
    5958:	b480      	push	{r7}
    595a:	b083      	sub	sp, #12
    595c:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    595e:	4a4b      	ldr	r2, [pc, #300]	; (5a8c <dma_init_le+0x134>)
    5960:	4b4a      	ldr	r3, [pc, #296]	; (5a8c <dma_init_le+0x134>)
    5962:	681b      	ldr	r3, [r3, #0]
    5964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5968:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    596a:	4b49      	ldr	r3, [pc, #292]	; (5a90 <dma_init_le+0x138>)
    596c:	2200      	movs	r2, #0
    596e:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5970:	4b48      	ldr	r3, [pc, #288]	; (5a94 <dma_init_le+0x13c>)
    5972:	2200      	movs	r2, #0
    5974:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5976:	4b48      	ldr	r3, [pc, #288]	; (5a98 <dma_init_le+0x140>)
    5978:	2200      	movs	r2, #0
    597a:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    597c:	4b47      	ldr	r3, [pc, #284]	; (5a9c <dma_init_le+0x144>)
    597e:	2200      	movs	r2, #0
    5980:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5982:	4b47      	ldr	r3, [pc, #284]	; (5aa0 <dma_init_le+0x148>)
    5984:	2200      	movs	r2, #0
    5986:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5988:	4b46      	ldr	r3, [pc, #280]	; (5aa4 <dma_init_le+0x14c>)
    598a:	2200      	movs	r2, #0
    598c:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    598e:	4b46      	ldr	r3, [pc, #280]	; (5aa8 <dma_init_le+0x150>)
    5990:	2200      	movs	r2, #0
    5992:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5994:	4b45      	ldr	r3, [pc, #276]	; (5aac <dma_init_le+0x154>)
    5996:	2200      	movs	r2, #0
    5998:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    599a:	4b45      	ldr	r3, [pc, #276]	; (5ab0 <dma_init_le+0x158>)
    599c:	22ff      	movs	r2, #255	; 0xff
    599e:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    59a0:	4b44      	ldr	r3, [pc, #272]	; (5ab4 <dma_init_le+0x15c>)
    59a2:	22ff      	movs	r2, #255	; 0xff
    59a4:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    59a6:	4b44      	ldr	r3, [pc, #272]	; (5ab8 <dma_init_le+0x160>)
    59a8:	2201      	movs	r2, #1
    59aa:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    59ac:	bf00      	nop
    59ae:	4b42      	ldr	r3, [pc, #264]	; (5ab8 <dma_init_le+0x160>)
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	f003 0301 	and.w	r3, r3, #1
    59b6:	2b00      	cmp	r3, #0
    59b8:	d0f9      	beq.n	59ae <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    59ba:	2300      	movs	r3, #0
    59bc:	607b      	str	r3, [r7, #4]
    59be:	e02a      	b.n	5a16 <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    59c0:	4a3e      	ldr	r2, [pc, #248]	; (5abc <dma_init_le+0x164>)
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	011b      	lsls	r3, r3, #4
    59c6:	4413      	add	r3, r2
    59c8:	4a3d      	ldr	r2, [pc, #244]	; (5ac0 <dma_init_le+0x168>)
    59ca:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    59cc:	687b      	ldr	r3, [r7, #4]
    59ce:	009b      	lsls	r3, r3, #2
    59d0:	4a3c      	ldr	r2, [pc, #240]	; (5ac4 <dma_init_le+0x16c>)
    59d2:	4413      	add	r3, r2
    59d4:	4619      	mov	r1, r3
    59d6:	4a39      	ldr	r2, [pc, #228]	; (5abc <dma_init_le+0x164>)
    59d8:	687b      	ldr	r3, [r7, #4]
    59da:	011b      	lsls	r3, r3, #4
    59dc:	4413      	add	r3, r2
    59de:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	2b09      	cmp	r3, #9
    59e4:	dc06      	bgt.n	59f4 <dma_init_le+0x9c>
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	3301      	adds	r3, #1
    59ea:	011b      	lsls	r3, r3, #4
    59ec:	4a33      	ldr	r2, [pc, #204]	; (5abc <dma_init_le+0x164>)
    59ee:	4413      	add	r3, r2
    59f0:	461a      	mov	r2, r3
    59f2:	e000      	b.n	59f6 <dma_init_le+0x9e>
    59f4:	2200      	movs	r2, #0
    59f6:	4931      	ldr	r1, [pc, #196]	; (5abc <dma_init_le+0x164>)
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	011b      	lsls	r3, r3, #4
    59fc:	440b      	add	r3, r1
    59fe:	3308      	adds	r3, #8
    5a00:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    5a02:	4a2e      	ldr	r2, [pc, #184]	; (5abc <dma_init_le+0x164>)
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	011b      	lsls	r3, r3, #4
    5a08:	4413      	add	r3, r2
    5a0a:	3308      	adds	r3, #8
    5a0c:	4a2e      	ldr	r2, [pc, #184]	; (5ac8 <dma_init_le+0x170>)
    5a0e:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	3301      	adds	r3, #1
    5a14:	607b      	str	r3, [r7, #4]
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	2b0a      	cmp	r3, #10
    5a1a:	ddd1      	ble.n	59c0 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    5a1c:	4a2b      	ldr	r2, [pc, #172]	; (5acc <dma_init_le+0x174>)
    5a1e:	4b27      	ldr	r3, [pc, #156]	; (5abc <dma_init_le+0x164>)
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    5a24:	4a2a      	ldr	r2, [pc, #168]	; (5ad0 <dma_init_le+0x178>)
    5a26:	4b25      	ldr	r3, [pc, #148]	; (5abc <dma_init_le+0x164>)
    5a28:	685b      	ldr	r3, [r3, #4]
    5a2a:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5a2c:	4a29      	ldr	r2, [pc, #164]	; (5ad4 <dma_init_le+0x17c>)
    5a2e:	4b23      	ldr	r3, [pc, #140]	; (5abc <dma_init_le+0x164>)
    5a30:	689b      	ldr	r3, [r3, #8]
    5a32:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    5a34:	4a28      	ldr	r2, [pc, #160]	; (5ad8 <dma_init_le+0x180>)
    5a36:	4b21      	ldr	r3, [pc, #132]	; (5abc <dma_init_le+0x164>)
    5a38:	68db      	ldr	r3, [r3, #12]
    5a3a:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5a3c:	4b14      	ldr	r3, [pc, #80]	; (5a90 <dma_init_le+0x138>)
    5a3e:	f24d 0206 	movw	r2, #53254	; 0xd006
    5a42:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5a44:	4b25      	ldr	r3, [pc, #148]	; (5adc <dma_init_le+0x184>)
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	0d1b      	lsrs	r3, r3, #20
    5a4a:	b2db      	uxtb	r3, r3
    5a4c:	4a24      	ldr	r2, [pc, #144]	; (5ae0 <dma_init_le+0x188>)
    5a4e:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5a50:	4b22      	ldr	r3, [pc, #136]	; (5adc <dma_init_le+0x184>)
    5a52:	681b      	ldr	r3, [r3, #0]
    5a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5a58:	f640 4235 	movw	r2, #3125	; 0xc35
    5a5c:	fb02 f203 	mul.w	r2, r2, r3
    5a60:	4b20      	ldr	r3, [pc, #128]	; (5ae4 <dma_init_le+0x18c>)
    5a62:	681b      	ldr	r3, [r3, #0]
    5a64:	4413      	add	r3, r2
    5a66:	4a20      	ldr	r2, [pc, #128]	; (5ae8 <dma_init_le+0x190>)
    5a68:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5a6a:	4b20      	ldr	r3, [pc, #128]	; (5aec <dma_init_le+0x194>)
    5a6c:	881b      	ldrh	r3, [r3, #0]
    5a6e:	b29a      	uxth	r2, r3
    5a70:	4b1f      	ldr	r3, [pc, #124]	; (5af0 <dma_init_le+0x198>)
    5a72:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5a74:	4b1f      	ldr	r3, [pc, #124]	; (5af4 <dma_init_le+0x19c>)
    5a76:	2200      	movs	r2, #0
    5a78:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5a7a:	4b1f      	ldr	r3, [pc, #124]	; (5af8 <dma_init_le+0x1a0>)
    5a7c:	2200      	movs	r2, #0
    5a7e:	601a      	str	r2, [r3, #0]
}
    5a80:	370c      	adds	r7, #12
    5a82:	46bd      	mov	sp, r7
    5a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a88:	4770      	bx	lr
    5a8a:	bf00      	nop
    5a8c:	400fc0c4 	.word	0x400fc0c4
    5a90:	50004110 	.word	0x50004110
    5a94:	50004130 	.word	0x50004130
    5a98:	50004150 	.word	0x50004150
    5a9c:	50004170 	.word	0x50004170
    5aa0:	50004190 	.word	0x50004190
    5aa4:	500041b0 	.word	0x500041b0
    5aa8:	500041d0 	.word	0x500041d0
    5aac:	500041f0 	.word	0x500041f0
    5ab0:	50004008 	.word	0x50004008
    5ab4:	50004010 	.word	0x50004010
    5ab8:	50004030 	.word	0x50004030
    5abc:	10000b08 	.word	0x10000b08
    5ac0:	40030008 	.word	0x40030008
    5ac4:	100010c0 	.word	0x100010c0
    5ac8:	88001004 	.word	0x88001004
    5acc:	50004100 	.word	0x50004100
    5ad0:	50004104 	.word	0x50004104
    5ad4:	50004108 	.word	0x50004108
    5ad8:	5000410c 	.word	0x5000410c
    5adc:	10000c2c 	.word	0x10000c2c
    5ae0:	10000c30 	.word	0x10000c30
    5ae4:	40004008 	.word	0x40004008
    5ae8:	10001068 	.word	0x10001068
    5aec:	1000049c 	.word	0x1000049c
    5af0:	1000098a 	.word	0x1000098a
    5af4:	10000b00 	.word	0x10000b00
    5af8:	100010f4 	.word	0x100010f4

00005afc <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    5afc:	b480      	push	{r7}
    5afe:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    5b00:	4b25      	ldr	r3, [pc, #148]	; (5b98 <bt_stream_dma_handler+0x9c>)
    5b02:	681b      	ldr	r3, [r3, #0]
    5b04:	4a25      	ldr	r2, [pc, #148]	; (5b9c <bt_stream_dma_handler+0xa0>)
    5b06:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5b08:	4b25      	ldr	r3, [pc, #148]	; (5ba0 <bt_stream_dma_handler+0xa4>)
    5b0a:	681b      	ldr	r3, [r3, #0]
    5b0c:	0d1b      	lsrs	r3, r3, #20
    5b0e:	b2db      	uxtb	r3, r3
    5b10:	4a21      	ldr	r2, [pc, #132]	; (5b98 <bt_stream_dma_handler+0x9c>)
    5b12:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    5b14:	4b23      	ldr	r3, [pc, #140]	; (5ba4 <bt_stream_dma_handler+0xa8>)
    5b16:	681b      	ldr	r3, [r3, #0]
    5b18:	4a23      	ldr	r2, [pc, #140]	; (5ba8 <bt_stream_dma_handler+0xac>)
    5b1a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5b1c:	4b20      	ldr	r3, [pc, #128]	; (5ba0 <bt_stream_dma_handler+0xa4>)
    5b1e:	681b      	ldr	r3, [r3, #0]
    5b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5b24:	f640 4235 	movw	r2, #3125	; 0xc35
    5b28:	fb02 f203 	mul.w	r2, r2, r3
    5b2c:	4b1f      	ldr	r3, [pc, #124]	; (5bac <bt_stream_dma_handler+0xb0>)
    5b2e:	681b      	ldr	r3, [r3, #0]
    5b30:	4413      	add	r3, r2
    5b32:	4a1c      	ldr	r2, [pc, #112]	; (5ba4 <bt_stream_dma_handler+0xa8>)
    5b34:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    5b36:	4b1e      	ldr	r3, [pc, #120]	; (5bb0 <bt_stream_dma_handler+0xb4>)
    5b38:	881b      	ldrh	r3, [r3, #0]
    5b3a:	b29a      	uxth	r2, r3
    5b3c:	4b1d      	ldr	r3, [pc, #116]	; (5bb4 <bt_stream_dma_handler+0xb8>)
    5b3e:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5b40:	4b1d      	ldr	r3, [pc, #116]	; (5bb8 <bt_stream_dma_handler+0xbc>)
    5b42:	881b      	ldrh	r3, [r3, #0]
    5b44:	b29a      	uxth	r2, r3
    5b46:	4b1a      	ldr	r3, [pc, #104]	; (5bb0 <bt_stream_dma_handler+0xb4>)
    5b48:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5b4a:	4b1c      	ldr	r3, [pc, #112]	; (5bbc <bt_stream_dma_handler+0xc0>)
    5b4c:	681b      	ldr	r3, [r3, #0]
    5b4e:	f003 0301 	and.w	r3, r3, #1
    5b52:	2b00      	cmp	r3, #0
    5b54:	d01b      	beq.n	5b8e <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    5b56:	4b1a      	ldr	r3, [pc, #104]	; (5bc0 <bt_stream_dma_handler+0xc4>)
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	f003 0301 	and.w	r3, r3, #1
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d007      	beq.n	5b72 <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    5b62:	4b18      	ldr	r3, [pc, #96]	; (5bc4 <bt_stream_dma_handler+0xc8>)
    5b64:	2201      	movs	r2, #1
    5b66:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5b68:	4b17      	ldr	r3, [pc, #92]	; (5bc8 <bt_stream_dma_handler+0xcc>)
    5b6a:	681b      	ldr	r3, [r3, #0]
    5b6c:	3301      	adds	r3, #1
    5b6e:	4a16      	ldr	r2, [pc, #88]	; (5bc8 <bt_stream_dma_handler+0xcc>)
    5b70:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    5b72:	4b16      	ldr	r3, [pc, #88]	; (5bcc <bt_stream_dma_handler+0xd0>)
    5b74:	681b      	ldr	r3, [r3, #0]
    5b76:	f003 0301 	and.w	r3, r3, #1
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d007      	beq.n	5b8e <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5b7e:	4b14      	ldr	r3, [pc, #80]	; (5bd0 <bt_stream_dma_handler+0xd4>)
    5b80:	2201      	movs	r2, #1
    5b82:	601a      	str	r2, [r3, #0]
			++rx_err;
    5b84:	4b13      	ldr	r3, [pc, #76]	; (5bd4 <bt_stream_dma_handler+0xd8>)
    5b86:	681b      	ldr	r3, [r3, #0]
    5b88:	3301      	adds	r3, #1
    5b8a:	4a12      	ldr	r2, [pc, #72]	; (5bd4 <bt_stream_dma_handler+0xd8>)
    5b8c:	6013      	str	r3, [r2, #0]
		}
	}
}
    5b8e:	46bd      	mov	sp, r7
    5b90:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b94:	4770      	bx	lr
    5b96:	bf00      	nop
    5b98:	10000c30 	.word	0x10000c30
    5b9c:	10001070 	.word	0x10001070
    5ba0:	10000c2c 	.word	0x10000c2c
    5ba4:	10001068 	.word	0x10001068
    5ba8:	10000c10 	.word	0x10000c10
    5bac:	40004008 	.word	0x40004008
    5bb0:	1000098a 	.word	0x1000098a
    5bb4:	10000988 	.word	0x10000988
    5bb8:	1000049c 	.word	0x1000049c
    5bbc:	50004000 	.word	0x50004000
    5bc0:	50004004 	.word	0x50004004
    5bc4:	50004008 	.word	0x50004008
    5bc8:	10000b00 	.word	0x10000b00
    5bcc:	5000400c 	.word	0x5000400c
    5bd0:	50004010 	.word	0x50004010
    5bd4:	100010f4 	.word	0x100010f4

00005bd8 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    5bd8:	b580      	push	{r7, lr}
    5bda:	af00      	add	r7, sp, #0
	switch (mode) {
    5bdc:	4b12      	ldr	r3, [pc, #72]	; (5c28 <DMA_IRQHandler+0x50>)
    5bde:	781b      	ldrb	r3, [r3, #0]
    5be0:	b2db      	uxtb	r3, r3
    5be2:	3b01      	subs	r3, #1
    5be4:	2b0b      	cmp	r3, #11
    5be6:	d81e      	bhi.n	5c26 <DMA_IRQHandler+0x4e>
    5be8:	a201      	add	r2, pc, #4	; (adr r2, 5bf0 <DMA_IRQHandler+0x18>)
    5bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5bee:	bf00      	nop
    5bf0:	00005c21 	.word	0x00005c21
    5bf4:	00005c27 	.word	0x00005c27
    5bf8:	00005c27 	.word	0x00005c27
    5bfc:	00005c21 	.word	0x00005c21
    5c00:	00005c27 	.word	0x00005c27
    5c04:	00005c27 	.word	0x00005c27
    5c08:	00005c27 	.word	0x00005c27
    5c0c:	00005c21 	.word	0x00005c21
    5c10:	00005c21 	.word	0x00005c21
    5c14:	00005c21 	.word	0x00005c21
    5c18:	00005c27 	.word	0x00005c27
    5c1c:	00005c21 	.word	0x00005c21
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5c20:	f7ff ff6c 	bl	5afc <bt_stream_dma_handler>
			break;
    5c24:	bf00      	nop
	}
}
    5c26:	bd80      	pop	{r7, pc}
    5c28:	10000a3e 	.word	0x10000a3e

00005c2c <dio_ssp_start>:

static void dio_ssp_start()
{
    5c2c:	b480      	push	{r7}
    5c2e:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5c30:	4b10      	ldr	r3, [pc, #64]	; (5c74 <dio_ssp_start+0x48>)
    5c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c36:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5c38:	4a0f      	ldr	r2, [pc, #60]	; (5c78 <dio_ssp_start+0x4c>)
    5c3a:	4b0f      	ldr	r3, [pc, #60]	; (5c78 <dio_ssp_start+0x4c>)
    5c3c:	681b      	ldr	r3, [r3, #0]
    5c3e:	f043 0301 	orr.w	r3, r3, #1
    5c42:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5c44:	4a0d      	ldr	r2, [pc, #52]	; (5c7c <dio_ssp_start+0x50>)
    5c46:	4b0d      	ldr	r3, [pc, #52]	; (5c7c <dio_ssp_start+0x50>)
    5c48:	681b      	ldr	r3, [r3, #0]
    5c4a:	f043 0302 	orr.w	r3, r3, #2
    5c4e:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5c50:	4a0b      	ldr	r2, [pc, #44]	; (5c80 <dio_ssp_start+0x54>)
    5c52:	4b0b      	ldr	r3, [pc, #44]	; (5c80 <dio_ssp_start+0x54>)
    5c54:	681b      	ldr	r3, [r3, #0]
    5c56:	f043 0301 	orr.w	r3, r3, #1
    5c5a:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5c5c:	4b09      	ldr	r3, [pc, #36]	; (5c84 <dio_ssp_start+0x58>)
    5c5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5c62:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5c64:	4b08      	ldr	r3, [pc, #32]	; (5c88 <dio_ssp_start+0x5c>)
    5c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c6a:	601a      	str	r2, [r3, #0]
}
    5c6c:	46bd      	mov	sp, r7
    5c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c72:	4770      	bx	lr
    5c74:	2009c098 	.word	0x2009c098
    5c78:	40030024 	.word	0x40030024
    5c7c:	40030004 	.word	0x40030004
    5c80:	50004110 	.word	0x50004110
    5c84:	e000e100 	.word	0xe000e100
    5c88:	2009c09c 	.word	0x2009c09c

00005c8c <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5c8c:	b480      	push	{r7}
    5c8e:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5c90:	4b21      	ldr	r3, [pc, #132]	; (5d18 <dio_ssp_stop+0x8c>)
    5c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c96:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5c98:	4a20      	ldr	r2, [pc, #128]	; (5d1c <dio_ssp_stop+0x90>)
    5c9a:	4b20      	ldr	r3, [pc, #128]	; (5d1c <dio_ssp_stop+0x90>)
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	f023 0301 	bic.w	r3, r3, #1
    5ca2:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5ca4:	4a1e      	ldr	r2, [pc, #120]	; (5d20 <dio_ssp_stop+0x94>)
    5ca6:	4b1e      	ldr	r3, [pc, #120]	; (5d20 <dio_ssp_stop+0x94>)
    5ca8:	681b      	ldr	r3, [r3, #0]
    5caa:	f023 0302 	bic.w	r3, r3, #2
    5cae:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5cb0:	4b1c      	ldr	r3, [pc, #112]	; (5d24 <dio_ssp_stop+0x98>)
    5cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5cb6:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5cb8:	4b1b      	ldr	r3, [pc, #108]	; (5d28 <dio_ssp_stop+0x9c>)
    5cba:	2200      	movs	r2, #0
    5cbc:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5cbe:	4b1b      	ldr	r3, [pc, #108]	; (5d2c <dio_ssp_stop+0xa0>)
    5cc0:	2200      	movs	r2, #0
    5cc2:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5cc4:	4b1a      	ldr	r3, [pc, #104]	; (5d30 <dio_ssp_stop+0xa4>)
    5cc6:	2200      	movs	r2, #0
    5cc8:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5cca:	4b1a      	ldr	r3, [pc, #104]	; (5d34 <dio_ssp_stop+0xa8>)
    5ccc:	2200      	movs	r2, #0
    5cce:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5cd0:	4b19      	ldr	r3, [pc, #100]	; (5d38 <dio_ssp_stop+0xac>)
    5cd2:	2200      	movs	r2, #0
    5cd4:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5cd6:	4b19      	ldr	r3, [pc, #100]	; (5d3c <dio_ssp_stop+0xb0>)
    5cd8:	2200      	movs	r2, #0
    5cda:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5cdc:	4b18      	ldr	r3, [pc, #96]	; (5d40 <dio_ssp_stop+0xb4>)
    5cde:	2200      	movs	r2, #0
    5ce0:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5ce2:	4b18      	ldr	r3, [pc, #96]	; (5d44 <dio_ssp_stop+0xb8>)
    5ce4:	2200      	movs	r2, #0
    5ce6:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5ce8:	4b17      	ldr	r3, [pc, #92]	; (5d48 <dio_ssp_stop+0xbc>)
    5cea:	22ff      	movs	r2, #255	; 0xff
    5cec:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5cee:	4b17      	ldr	r3, [pc, #92]	; (5d4c <dio_ssp_stop+0xc0>)
    5cf0:	22ff      	movs	r2, #255	; 0xff
    5cf2:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5cf4:	4a16      	ldr	r2, [pc, #88]	; (5d50 <dio_ssp_stop+0xc4>)
    5cf6:	4b16      	ldr	r3, [pc, #88]	; (5d50 <dio_ssp_stop+0xc4>)
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	f023 0301 	bic.w	r3, r3, #1
    5cfe:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5d00:	bf00      	nop
    5d02:	4b13      	ldr	r3, [pc, #76]	; (5d50 <dio_ssp_stop+0xc4>)
    5d04:	681b      	ldr	r3, [r3, #0]
    5d06:	f003 0301 	and.w	r3, r3, #1
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d1f9      	bne.n	5d02 <dio_ssp_stop+0x76>
}
    5d0e:	46bd      	mov	sp, r7
    5d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d14:	4770      	bx	lr
    5d16:	bf00      	nop
    5d18:	2009c098 	.word	0x2009c098
    5d1c:	40030024 	.word	0x40030024
    5d20:	40030004 	.word	0x40030004
    5d24:	e000e180 	.word	0xe000e180
    5d28:	50004110 	.word	0x50004110
    5d2c:	50004130 	.word	0x50004130
    5d30:	50004150 	.word	0x50004150
    5d34:	50004170 	.word	0x50004170
    5d38:	50004190 	.word	0x50004190
    5d3c:	500041b0 	.word	0x500041b0
    5d40:	500041d0 	.word	0x500041d0
    5d44:	500041f0 	.word	0x500041f0
    5d48:	50004008 	.word	0x50004008
    5d4c:	50004010 	.word	0x50004010
    5d50:	50004030 	.word	0x50004030

00005d54 <cc2400_idle>:

static void cc2400_idle()
{
    5d54:	b580      	push	{r7, lr}
    5d56:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5d58:	2064      	movs	r0, #100	; 0x64
    5d5a:	f004 f9d1 	bl	a100 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d5e:	bf00      	nop
    5d60:	f004 f9c4 	bl	a0ec <cc2400_status>
    5d64:	4603      	mov	r3, r0
    5d66:	f003 0304 	and.w	r3, r3, #4
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d1f8      	bne.n	5d60 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5d6e:	4b0a      	ldr	r3, [pc, #40]	; (5d98 <cc2400_idle+0x44>)
    5d70:	2280      	movs	r2, #128	; 0x80
    5d72:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5d74:	4b08      	ldr	r3, [pc, #32]	; (5d98 <cc2400_idle+0x44>)
    5d76:	f44f 7280 	mov.w	r2, #256	; 0x100
    5d7a:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5d7c:	4b07      	ldr	r3, [pc, #28]	; (5d9c <cc2400_idle+0x48>)
    5d7e:	2210      	movs	r2, #16
    5d80:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5d82:	4b06      	ldr	r3, [pc, #24]	; (5d9c <cc2400_idle+0x48>)
    5d84:	f44f 7280 	mov.w	r2, #256	; 0x100
    5d88:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5d8a:	4b04      	ldr	r3, [pc, #16]	; (5d9c <cc2400_idle+0x48>)
    5d8c:	2202      	movs	r2, #2
    5d8e:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5d90:	4b03      	ldr	r3, [pc, #12]	; (5da0 <cc2400_idle+0x4c>)
    5d92:	2200      	movs	r2, #0
    5d94:	701a      	strb	r2, [r3, #0]
}
    5d96:	bd80      	pop	{r7, pc}
    5d98:	2009c05c 	.word	0x2009c05c
    5d9c:	2009c03c 	.word	0x2009c03c
    5da0:	10000a3e 	.word	0x10000a3e

00005da4 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5da4:	b580      	push	{r7, lr}
    5da6:	b082      	sub	sp, #8
    5da8:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5daa:	4b2a      	ldr	r3, [pc, #168]	; (5e54 <cc2400_rx+0xb0>)
    5dac:	781b      	ldrb	r3, [r3, #0]
    5dae:	b2db      	uxtb	r3, r3
    5db0:	2b00      	cmp	r3, #0
    5db2:	d102      	bne.n	5dba <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5db4:	2329      	movs	r3, #41	; 0x29
    5db6:	80fb      	strh	r3, [r7, #6]
    5db8:	e008      	b.n	5dcc <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5dba:	4b26      	ldr	r3, [pc, #152]	; (5e54 <cc2400_rx+0xb0>)
    5dbc:	781b      	ldrb	r3, [r3, #0]
    5dbe:	b2db      	uxtb	r3, r3
    5dc0:	2b01      	cmp	r3, #1
    5dc2:	d102      	bne.n	5dca <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5dc4:	2340      	movs	r3, #64	; 0x40
    5dc6:	80fb      	strh	r3, [r7, #6]
    5dc8:	e000      	b.n	5dcc <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5dca:	e03f      	b.n	5e4c <cc2400_rx+0xa8>
	}

	cc2400_set(MANAND,  0x7fff);
    5dcc:	200d      	movs	r0, #13
    5dce:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5dd2:	f004 f8d3 	bl	9f7c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5dd6:	2012      	movs	r0, #18
    5dd8:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ddc:	f004 f8ce 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x164b); // without PRNG
    5de0:	2014      	movs	r0, #20
    5de2:	f241 614b 	movw	r1, #5707	; 0x164b
    5de6:	f004 f8c9 	bl	9f7c <cc2400_set>
//	cc2400_set(GRMDM,   0x0560); // un-buffered mode, GFSK
  cc2400_set(GRMDM,   0x0100); // un-buffered mode, GFSK //gjlee
    5dea:	2020      	movs	r0, #32
    5dec:	f44f 7180 	mov.w	r1, #256	; 0x100
    5df0:	f004 f8c4 	bl	9f7c <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5df4:	4b18      	ldr	r3, [pc, #96]	; (5e58 <cc2400_rx+0xb4>)
    5df6:	881b      	ldrh	r3, [r3, #0]
    5df8:	b29b      	uxth	r3, r3
    5dfa:	3b01      	subs	r3, #1
    5dfc:	b29b      	uxth	r3, r3
    5dfe:	2002      	movs	r0, #2
    5e00:	4619      	mov	r1, r3
    5e02:	f004 f8bb 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);
    5e06:	2003      	movs	r0, #3
    5e08:	2140      	movs	r1, #64	; 0x40
    5e0a:	f004 f8b7 	bl	9f7c <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5e0e:	f7fe fdfd 	bl	4a0c <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5e12:	bf00      	nop
    5e14:	f004 f96a 	bl	a0ec <cc2400_status>
    5e18:	4603      	mov	r3, r0
    5e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d0f8      	beq.n	5e14 <cc2400_rx+0x70>
	cc2400_strobe(SFSON);
    5e22:	2061      	movs	r0, #97	; 0x61
    5e24:	f004 f96c 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5e28:	bf00      	nop
    5e2a:	f004 f95f 	bl	a0ec <cc2400_status>
    5e2e:	4603      	mov	r3, r0
    5e30:	f003 0304 	and.w	r3, r3, #4
    5e34:	2b00      	cmp	r3, #0
    5e36:	d0f8      	beq.n	5e2a <cc2400_rx+0x86>
	cc2400_strobe(SRX);
    5e38:	2062      	movs	r0, #98	; 0x62
    5e3a:	f004 f961 	bl	a100 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5e3e:	4b07      	ldr	r3, [pc, #28]	; (5e5c <cc2400_rx+0xb8>)
    5e40:	2280      	movs	r2, #128	; 0x80
    5e42:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5e44:	4b05      	ldr	r3, [pc, #20]	; (5e5c <cc2400_rx+0xb8>)
    5e46:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e4a:	601a      	str	r2, [r3, #0]
#endif
}
    5e4c:	3708      	adds	r7, #8
    5e4e:	46bd      	mov	sp, r7
    5e50:	bd80      	pop	{r7, pc}
    5e52:	bf00      	nop
    5e54:	10000a42 	.word	0x10000a42
    5e58:	1000049c 	.word	0x1000049c
    5e5c:	2009c058 	.word	0x2009c058

00005e60 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5e60:	b580      	push	{r7, lr}
    5e62:	b084      	sub	sp, #16
    5e64:	af00      	add	r7, sp, #0
    5e66:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5e68:	4b33      	ldr	r3, [pc, #204]	; (5f38 <cc2400_rx_sync+0xd8>)
    5e6a:	781b      	ldrb	r3, [r3, #0]
    5e6c:	b2db      	uxtb	r3, r3
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d105      	bne.n	5e7e <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5e72:	2329      	movs	r3, #41	; 0x29
    5e74:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5e76:	f240 4361 	movw	r3, #1121	; 0x461
    5e7a:	81fb      	strh	r3, [r7, #14]
    5e7c:	e00b      	b.n	5e96 <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5e7e:	4b2e      	ldr	r3, [pc, #184]	; (5f38 <cc2400_rx_sync+0xd8>)
    5e80:	781b      	ldrb	r3, [r3, #0]
    5e82:	b2db      	uxtb	r3, r3
    5e84:	2b01      	cmp	r3, #1
    5e86:	d105      	bne.n	5e94 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5e88:	2340      	movs	r3, #64	; 0x40
    5e8a:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0560; // un-buffered mode, packet w/ sync word detection //gjlee
    5e8c:	f44f 63ac 	mov.w	r3, #1376	; 0x560
    5e90:	81fb      	strh	r3, [r7, #14]
    5e92:	e000      	b.n	5e96 <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5e94:	e04d      	b.n	5f32 <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5e96:	200d      	movs	r0, #13
    5e98:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e9c:	f004 f86e 	bl	9f7c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5ea0:	2012      	movs	r0, #18
    5ea2:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ea6:	f004 f869 	bl	9f7c <cc2400_set>

	cc2400_set(MDMTST0, 0x164b);
    5eaa:	2014      	movs	r0, #20
    5eac:	f241 614b 	movw	r1, #5707	; 0x164b
    5eb0:	f004 f864 	bl	9f7c <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5eb4:	89fb      	ldrh	r3, [r7, #14]
    5eb6:	2020      	movs	r0, #32
    5eb8:	4619      	mov	r1, r3
    5eba:	f004 f85f 	bl	9f7c <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5ebe:	687b      	ldr	r3, [r7, #4]
    5ec0:	b29b      	uxth	r3, r3
    5ec2:	202c      	movs	r0, #44	; 0x2c
    5ec4:	4619      	mov	r1, r3
    5ec6:	f004 f859 	bl	9f7c <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	0c1b      	lsrs	r3, r3, #16
    5ece:	b29b      	uxth	r3, r3
    5ed0:	202d      	movs	r0, #45	; 0x2d
    5ed2:	4619      	mov	r1, r3
    5ed4:	f004 f852 	bl	9f7c <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5ed8:	4b18      	ldr	r3, [pc, #96]	; (5f3c <cc2400_rx_sync+0xdc>)
    5eda:	881b      	ldrh	r3, [r3, #0]
    5edc:	b29b      	uxth	r3, r3
    5ede:	3b01      	subs	r3, #1
    5ee0:	b29b      	uxth	r3, r3
    5ee2:	2002      	movs	r0, #2
    5ee4:	4619      	mov	r1, r3
    5ee6:	f004 f849 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5eea:	89bb      	ldrh	r3, [r7, #12]
    5eec:	2003      	movs	r0, #3
    5eee:	4619      	mov	r1, r3
    5ef0:	f004 f844 	bl	9f7c <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5ef4:	f7fe fd8a 	bl	4a0c <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5ef8:	bf00      	nop
    5efa:	f004 f8f7 	bl	a0ec <cc2400_status>
    5efe:	4603      	mov	r3, r0
    5f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f04:	2b00      	cmp	r3, #0
    5f06:	d0f8      	beq.n	5efa <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5f08:	2061      	movs	r0, #97	; 0x61
    5f0a:	f004 f8f9 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f0e:	bf00      	nop
    5f10:	f004 f8ec 	bl	a0ec <cc2400_status>
    5f14:	4603      	mov	r3, r0
    5f16:	f003 0304 	and.w	r3, r3, #4
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d0f8      	beq.n	5f10 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5f1e:	2062      	movs	r0, #98	; 0x62
    5f20:	f004 f8ee 	bl	a100 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f24:	4b06      	ldr	r3, [pc, #24]	; (5f40 <cc2400_rx_sync+0xe0>)
    5f26:	2280      	movs	r2, #128	; 0x80
    5f28:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5f2a:	4b05      	ldr	r3, [pc, #20]	; (5f40 <cc2400_rx_sync+0xe0>)
    5f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f30:	601a      	str	r2, [r3, #0]
#endif
}
    5f32:	3710      	adds	r7, #16
    5f34:	46bd      	mov	sp, r7
    5f36:	bd80      	pop	{r7, pc}
    5f38:	10000a42 	.word	0x10000a42
    5f3c:	1000049c 	.word	0x1000049c
    5f40:	2009c058 	.word	0x2009c058

00005f44 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5f44:	b580      	push	{r7, lr}
    5f46:	b09a      	sub	sp, #104	; 0x68
    5f48:	af00      	add	r7, sp, #0
    5f4a:	60f8      	str	r0, [r7, #12]
    5f4c:	460b      	mov	r3, r1
    5f4e:	607a      	str	r2, [r7, #4]
    5f50:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5f52:	2300      	movs	r3, #0
    5f54:	667b      	str	r3, [r7, #100]	; 0x64
    5f56:	e035      	b.n	5fc4 <le_transmit+0x80>
		byte = aa & 0xff;
    5f58:	68fb      	ldr	r3, [r7, #12]
    5f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		aa >>= 8;
    5f5e:	68fb      	ldr	r3, [r7, #12]
    5f60:	0a1b      	lsrs	r3, r3, #8
    5f62:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5f64:	f107 0210 	add.w	r2, r7, #16
    5f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f6a:	4413      	add	r3, r2
    5f6c:	2200      	movs	r2, #0
    5f6e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5f70:	2300      	movs	r3, #0
    5f72:	663b      	str	r3, [r7, #96]	; 0x60
    5f74:	e020      	b.n	5fb8 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5f76:	f107 0210 	add.w	r2, r7, #16
    5f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f7c:	4413      	add	r3, r2
    5f7e:	781b      	ldrb	r3, [r3, #0]
    5f80:	b2d9      	uxtb	r1, r3
    5f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5f86:	f003 0301 	and.w	r3, r3, #1
    5f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5f8c:	f1c2 0207 	rsb	r2, r2, #7
    5f90:	4093      	lsls	r3, r2
    5f92:	b2db      	uxtb	r3, r3
    5f94:	460a      	mov	r2, r1
    5f96:	4313      	orrs	r3, r2
    5f98:	b2db      	uxtb	r3, r3
    5f9a:	b2d9      	uxtb	r1, r3
    5f9c:	f107 0210 	add.w	r2, r7, #16
    5fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fa2:	4413      	add	r3, r2
    5fa4:	460a      	mov	r2, r1
    5fa6:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5fac:	085b      	lsrs	r3, r3, #1
    5fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5fb4:	3301      	adds	r3, #1
    5fb6:	663b      	str	r3, [r7, #96]	; 0x60
    5fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5fba:	2b07      	cmp	r3, #7
    5fbc:	d9db      	bls.n	5f76 <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fc0:	3301      	adds	r3, #1
    5fc2:	667b      	str	r3, [r7, #100]	; 0x64
    5fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fc6:	2b03      	cmp	r3, #3
    5fc8:	d9c6      	bls.n	5f58 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5fca:	4b79      	ldr	r3, [pc, #484]	; (61b0 <le_transmit+0x26c>)
    5fcc:	881b      	ldrh	r3, [r3, #0]
    5fce:	b29b      	uxth	r3, r3
    5fd0:	b2db      	uxtb	r3, r3
    5fd2:	3b62      	subs	r3, #98	; 0x62
    5fd4:	b2db      	uxtb	r3, r3
    5fd6:	4618      	mov	r0, r3
    5fd8:	f002 fbd6 	bl	8788 <btle_channel_index>
    5fdc:	4603      	mov	r3, r0
    5fde:	461a      	mov	r2, r3
    5fe0:	4b74      	ldr	r3, [pc, #464]	; (61b4 <le_transmit+0x270>)
    5fe2:	5c9b      	ldrb	r3, [r3, r2]
    5fe4:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5fe6:	2300      	movs	r3, #0
    5fe8:	667b      	str	r3, [r7, #100]	; 0x64
    5fea:	e050      	b.n	608e <le_transmit+0x14a>
		byte = data[i];
    5fec:	687a      	ldr	r2, [r7, #4]
    5fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ff0:	4413      	add	r3, r2
    5ff2:	781b      	ldrb	r3, [r3, #0]
    5ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		txbuf[i+4] = 0;
    5ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ffa:	3304      	adds	r3, #4
    5ffc:	f107 0268 	add.w	r2, r7, #104	; 0x68
    6000:	4413      	add	r3, r2
    6002:	2200      	movs	r2, #0
    6004:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    6008:	2300      	movs	r3, #0
    600a:	663b      	str	r3, [r7, #96]	; 0x60
    600c:	e039      	b.n	6082 <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    600e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    6012:	f003 0301 	and.w	r3, r3, #1
    6016:	4968      	ldr	r1, [pc, #416]	; (61b8 <le_transmit+0x274>)
    6018:	6dba      	ldr	r2, [r7, #88]	; 0x58
    601a:	440a      	add	r2, r1
    601c:	7812      	ldrb	r2, [r2, #0]
    601e:	4053      	eors	r3, r2
    6020:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    6022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6024:	3301      	adds	r3, #1
    6026:	4619      	mov	r1, r3
    6028:	4b64      	ldr	r3, [pc, #400]	; (61bc <le_transmit+0x278>)
    602a:	fba1 2303 	umull	r2, r3, r1, r3
    602e:	1ac8      	subs	r0, r1, r3
    6030:	0840      	lsrs	r0, r0, #1
    6032:	4403      	add	r3, r0
    6034:	099a      	lsrs	r2, r3, #6
    6036:	4613      	mov	r3, r2
    6038:	01db      	lsls	r3, r3, #7
    603a:	1a9b      	subs	r3, r3, r2
    603c:	1aca      	subs	r2, r1, r3
    603e:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    6040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    6044:	085b      	lsrs	r3, r3, #1
    6046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			txbuf[i+4] |= bit << (7 - j);
    604a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    604c:	3304      	adds	r3, #4
    604e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6050:	3204      	adds	r2, #4
    6052:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6056:	440a      	add	r2, r1
    6058:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    605c:	b2d1      	uxtb	r1, r2
    605e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6060:	f1c2 0207 	rsb	r2, r2, #7
    6064:	4610      	mov	r0, r2
    6066:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6068:	4082      	lsls	r2, r0
    606a:	b2d2      	uxtb	r2, r2
    606c:	430a      	orrs	r2, r1
    606e:	b2d2      	uxtb	r2, r2
    6070:	b2d2      	uxtb	r2, r2
    6072:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6076:	440b      	add	r3, r1
    6078:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    607c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    607e:	3301      	adds	r3, #1
    6080:	663b      	str	r3, [r7, #96]	; 0x60
    6082:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6084:	2b07      	cmp	r3, #7
    6086:	d9c2      	bls.n	600e <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    6088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    608a:	3301      	adds	r3, #1
    608c:	667b      	str	r3, [r7, #100]	; 0x64
    608e:	7afa      	ldrb	r2, [r7, #11]
    6090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6092:	429a      	cmp	r2, r3
    6094:	d8aa      	bhi.n	5fec <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    6096:	7afb      	ldrb	r3, [r7, #11]
    6098:	3304      	adds	r3, #4
    609a:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    609c:	200d      	movs	r0, #13
    609e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    60a2:	f003 ff6b 	bl	9f7c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    60a6:	2012      	movs	r0, #18
    60a8:	f642 3122 	movw	r1, #11042	; 0x2b22
    60ac:	f003 ff66 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    60b0:	2014      	movs	r0, #20
    60b2:	f241 314b 	movw	r1, #4939	; 0x134b
    60b6:	f003 ff61 	bl	9f7c <cc2400_set>

	cc2400_set(GRMDM,   0x0d60); //gjlee
    60ba:	2020      	movs	r0, #32
    60bc:	f44f 6156 	mov.w	r1, #3424	; 0xd60
    60c0:	f003 ff5c 	bl	9f7c <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   2402);
    60c4:	2002      	movs	r0, #2
    60c6:	f640 1162 	movw	r1, #2402	; 0x962
    60ca:	f003 ff57 	bl	9f7c <cc2400_set>
	//cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    60ce:	2003      	movs	r0, #3
    60d0:	2140      	movs	r1, #64	; 0x40
    60d2:	f003 ff53 	bl	9f7c <cc2400_set>
//	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    60d6:	68fb      	ldr	r3, [r7, #12]
    60d8:	f003 0301 	and.w	r3, r3, #1
    60dc:	2b00      	cmp	r3, #0
    60de:	d005      	beq.n	60ec <le_transmit+0x1a8>
		cc2400_set(SYNCH,   0xaaaa);
    60e0:	202d      	movs	r0, #45	; 0x2d
    60e2:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    60e6:	f003 ff49 	bl	9f7c <cc2400_set>
    60ea:	e004      	b.n	60f6 <le_transmit+0x1b2>
	else
		cc2400_set(SYNCH,   0x5555);
    60ec:	202d      	movs	r0, #45	; 0x2d
    60ee:	f245 5155 	movw	r1, #21845	; 0x5555
    60f2:	f003 ff43 	bl	9f7c <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    60f6:	2008      	movs	r0, #8
    60f8:	f003 ff2a 	bl	9f50 <cc2400_get>
    60fc:	4603      	mov	r3, r0
    60fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
//	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while (!(cc2400_status() & XOSC16M_STABLE));
    6102:	bf00      	nop
    6104:	f003 fff2 	bl	a0ec <cc2400_status>
    6108:	4603      	mov	r3, r0
    610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    610e:	2b00      	cmp	r3, #0
    6110:	d0f8      	beq.n	6104 <le_transmit+0x1c0>
	cc2400_strobe(SFSON);
    6112:	2061      	movs	r0, #97	; 0x61
    6114:	f003 fff4 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6118:	bf00      	nop
    611a:	f003 ffe7 	bl	a0ec <cc2400_status>
    611e:	4603      	mov	r3, r0
    6120:	f003 0304 	and.w	r3, r3, #4
    6124:	2b00      	cmp	r3, #0
    6126:	d0f8      	beq.n	611a <le_transmit+0x1d6>
	TXLED_SET;
    6128:	4b25      	ldr	r3, [pc, #148]	; (61c0 <le_transmit+0x27c>)
    612a:	f44f 7280 	mov.w	r2, #256	; 0x100
    612e:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6130:	4b24      	ldr	r3, [pc, #144]	; (61c4 <le_transmit+0x280>)
    6132:	2280      	movs	r2, #128	; 0x80
    6134:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6136:	bf00      	nop
    6138:	200e      	movs	r0, #14
    613a:	f003 ff09 	bl	9f50 <cc2400_get>
    613e:	4603      	mov	r3, r0
    6140:	f003 031f 	and.w	r3, r3, #31
    6144:	2b0f      	cmp	r3, #15
    6146:	d1f7      	bne.n	6138 <le_transmit+0x1f4>
	cc2400_strobe(STX);
    6148:	2063      	movs	r0, #99	; 0x63
    614a:	f003 ffd9 	bl	a100 <cc2400_strobe>

	if (len > 32)
    614e:	7afb      	ldrb	r3, [r7, #11]
    6150:	2b20      	cmp	r3, #32
    6152:	d901      	bls.n	6158 <le_transmit+0x214>
		len = 32;
    6154:	2320      	movs	r3, #32
    6156:	72fb      	strb	r3, [r7, #11]
	cc2400_spi_buf(FIFOREG, len, txbuf);
    6158:	7afa      	ldrb	r2, [r7, #11]
    615a:	f107 0310 	add.w	r3, r7, #16
    615e:	2070      	movs	r0, #112	; 0x70
    6160:	4611      	mov	r1, r2
    6162:	461a      	mov	r2, r3
    6164:	f003 ff4c 	bl	a000 <cc2400_spi_buf>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}
*/
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6168:	bf00      	nop
    616a:	200e      	movs	r0, #14
    616c:	f003 fef0 	bl	9f50 <cc2400_get>
    6170:	4603      	mov	r3, r0
    6172:	f003 031f 	and.w	r3, r3, #31
    6176:	2b0f      	cmp	r3, #15
    6178:	d1f7      	bne.n	616a <le_transmit+0x226>
	TXLED_CLR;
    617a:	4b13      	ldr	r3, [pc, #76]	; (61c8 <le_transmit+0x284>)
    617c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6180:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6182:	2064      	movs	r0, #100	; 0x64
    6184:	f003 ffbc 	bl	a100 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6188:	bf00      	nop
    618a:	f003 ffaf 	bl	a0ec <cc2400_status>
    618e:	4603      	mov	r3, r0
    6190:	f003 0304 	and.w	r3, r3, #4
    6194:	2b00      	cmp	r3, #0
    6196:	d1f8      	bne.n	618a <le_transmit+0x246>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6198:	4b0c      	ldr	r3, [pc, #48]	; (61cc <le_transmit+0x288>)
    619a:	2280      	movs	r2, #128	; 0x80
    619c:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    619e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    61a2:	2008      	movs	r0, #8
    61a4:	4619      	mov	r1, r3
    61a6:	f003 fee9 	bl	9f7c <cc2400_set>
}
    61aa:	3768      	adds	r7, #104	; 0x68
    61ac:	46bd      	mov	sp, r7
    61ae:	bd80      	pop	{r7, pc}
    61b0:	1000049c 	.word	0x1000049c
    61b4:	0000b54c 	.word	0x0000b54c
    61b8:	0000b4cc 	.word	0x0000b4cc
    61bc:	02040811 	.word	0x02040811
    61c0:	2009c038 	.word	0x2009c038
    61c4:	2009c058 	.word	0x2009c058
    61c8:	2009c03c 	.word	0x2009c03c
    61cc:	2009c05c 	.word	0x2009c05c

000061d0 <le_jam>:

void le_jam(void) {
    61d0:	b580      	push	{r7, lr}
    61d2:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    61d4:	200d      	movs	r0, #13
    61d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    61da:	f003 fecf 	bl	9f7c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    61de:	2012      	movs	r0, #18
    61e0:	f642 3122 	movw	r1, #11042	; 0x2b22
    61e4:	f003 feca 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    61e8:	2014      	movs	r0, #20
    61ea:	f242 314b 	movw	r1, #9035	; 0x234b
    61ee:	f003 fec5 	bl	9f7c <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    61f2:	2020      	movs	r0, #32
    61f4:	f640 4101 	movw	r1, #3073	; 0xc01
    61f8:	f003 fec0 	bl	9f7c <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    61fc:	2005      	movs	r0, #5
    61fe:	210b      	movs	r1, #11
    6200:	f003 febc 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6204:	2003      	movs	r0, #3
    6206:	2140      	movs	r1, #64	; 0x40
    6208:	f003 feb8 	bl	9f7c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    620c:	bf00      	nop
    620e:	f003 ff6d 	bl	a0ec <cc2400_status>
    6212:	4603      	mov	r3, r0
    6214:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6218:	2b00      	cmp	r3, #0
    621a:	d0f8      	beq.n	620e <le_jam+0x3e>
	cc2400_strobe(SFSON);
    621c:	2061      	movs	r0, #97	; 0x61
    621e:	f003 ff6f 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6222:	bf00      	nop
    6224:	f003 ff62 	bl	a0ec <cc2400_status>
    6228:	4603      	mov	r3, r0
    622a:	f003 0304 	and.w	r3, r3, #4
    622e:	2b00      	cmp	r3, #0
    6230:	d0f8      	beq.n	6224 <le_jam+0x54>
	TXLED_SET;
    6232:	4b0a      	ldr	r3, [pc, #40]	; (625c <le_jam+0x8c>)
    6234:	f44f 7280 	mov.w	r2, #256	; 0x100
    6238:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    623a:	4b09      	ldr	r3, [pc, #36]	; (6260 <le_jam+0x90>)
    623c:	2280      	movs	r2, #128	; 0x80
    623e:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6240:	bf00      	nop
    6242:	200e      	movs	r0, #14
    6244:	f003 fe84 	bl	9f50 <cc2400_get>
    6248:	4603      	mov	r3, r0
    624a:	f003 031f 	and.w	r3, r3, #31
    624e:	2b0f      	cmp	r3, #15
    6250:	d1f7      	bne.n	6242 <le_jam+0x72>
	cc2400_strobe(STX);
    6252:	2063      	movs	r0, #99	; 0x63
    6254:	f003 ff54 	bl	a100 <cc2400_strobe>
#endif
}
    6258:	bd80      	pop	{r7, pc}
    625a:	bf00      	nop
    625c:	2009c038 	.word	0x2009c038
    6260:	2009c058 	.word	0x2009c058

00006264 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    6264:	b580      	push	{r7, lr}
    6266:	af00      	add	r7, sp, #0
	do_hop = 0;
    6268:	4b41      	ldr	r3, [pc, #260]	; (6370 <hop+0x10c>)
    626a:	2200      	movs	r2, #0
    626c:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    626e:	4b41      	ldr	r3, [pc, #260]	; (6374 <hop+0x110>)
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	2b00      	cmp	r3, #0
    6274:	d10b      	bne.n	628e <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    6276:	2002      	movs	r0, #2
    6278:	f003 fe6a 	bl	9f50 <cc2400_get>
    627c:	4603      	mov	r3, r0
    627e:	461a      	mov	r2, r3
    6280:	4b3d      	ldr	r3, [pc, #244]	; (6378 <hop+0x114>)
    6282:	881b      	ldrh	r3, [r3, #0]
    6284:	b29b      	uxth	r3, r3
    6286:	3b01      	subs	r3, #1
    6288:	429a      	cmp	r2, r3
    628a:	d147      	bne.n	631c <hop+0xb8>
			return;
    628c:	e06e      	b.n	636c <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    628e:	4b39      	ldr	r3, [pc, #228]	; (6374 <hop+0x110>)
    6290:	781b      	ldrb	r3, [r3, #0]
    6292:	2b01      	cmp	r3, #1
    6294:	d114      	bne.n	62c0 <hop+0x5c>
		channel += 32;
    6296:	4b38      	ldr	r3, [pc, #224]	; (6378 <hop+0x114>)
    6298:	881b      	ldrh	r3, [r3, #0]
    629a:	b29b      	uxth	r3, r3
    629c:	3320      	adds	r3, #32
    629e:	b29a      	uxth	r2, r3
    62a0:	4b35      	ldr	r3, [pc, #212]	; (6378 <hop+0x114>)
    62a2:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    62a4:	4b34      	ldr	r3, [pc, #208]	; (6378 <hop+0x114>)
    62a6:	881b      	ldrh	r3, [r3, #0]
    62a8:	b29b      	uxth	r3, r3
    62aa:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    62ae:	d935      	bls.n	631c <hop+0xb8>
			channel -= 79;
    62b0:	4b31      	ldr	r3, [pc, #196]	; (6378 <hop+0x114>)
    62b2:	881b      	ldrh	r3, [r3, #0]
    62b4:	b29b      	uxth	r3, r3
    62b6:	3b4f      	subs	r3, #79	; 0x4f
    62b8:	b29a      	uxth	r2, r3
    62ba:	4b2f      	ldr	r3, [pc, #188]	; (6378 <hop+0x114>)
    62bc:	801a      	strh	r2, [r3, #0]
    62be:	e02d      	b.n	631c <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    62c0:	4b2c      	ldr	r3, [pc, #176]	; (6374 <hop+0x110>)
    62c2:	781b      	ldrb	r3, [r3, #0]
    62c4:	2b02      	cmp	r3, #2
    62c6:	d10d      	bne.n	62e4 <hop+0x80>
		TXLED_SET;
    62c8:	4b2c      	ldr	r3, [pc, #176]	; (637c <hop+0x118>)
    62ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    62ce:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    62d0:	4b2b      	ldr	r3, [pc, #172]	; (6380 <hop+0x11c>)
    62d2:	681b      	ldr	r3, [r3, #0]
    62d4:	4618      	mov	r0, r3
    62d6:	f002 f969 	bl	85ac <next_hop>
    62da:	4603      	mov	r3, r0
    62dc:	461a      	mov	r2, r3
    62de:	4b26      	ldr	r3, [pc, #152]	; (6378 <hop+0x114>)
    62e0:	801a      	strh	r2, [r3, #0]
    62e2:	e01b      	b.n	631c <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    62e4:	4b23      	ldr	r3, [pc, #140]	; (6374 <hop+0x110>)
    62e6:	781b      	ldrb	r3, [r3, #0]
    62e8:	2b03      	cmp	r3, #3
    62ea:	d10b      	bne.n	6304 <hop+0xa0>
		TXLED_SET;
    62ec:	4b23      	ldr	r3, [pc, #140]	; (637c <hop+0x118>)
    62ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    62f2:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    62f4:	4823      	ldr	r0, [pc, #140]	; (6384 <hop+0x120>)
    62f6:	f002 fa1f 	bl	8738 <btle_next_hop>
    62fa:	4603      	mov	r3, r0
    62fc:	461a      	mov	r2, r3
    62fe:	4b1e      	ldr	r3, [pc, #120]	; (6378 <hop+0x114>)
    6300:	801a      	strh	r2, [r3, #0]
    6302:	e00b      	b.n	631c <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6304:	4b1b      	ldr	r3, [pc, #108]	; (6374 <hop+0x110>)
    6306:	781b      	ldrb	r3, [r3, #0]
    6308:	2b04      	cmp	r3, #4
    630a:	d107      	bne.n	631c <hop+0xb8>
		TXLED_SET;
    630c:	4b1b      	ldr	r3, [pc, #108]	; (637c <hop+0x118>)
    630e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6312:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    6314:	4b1c      	ldr	r3, [pc, #112]	; (6388 <hop+0x124>)
    6316:	881a      	ldrh	r2, [r3, #0]
    6318:	4b17      	ldr	r3, [pc, #92]	; (6378 <hop+0x114>)
    631a:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    631c:	2064      	movs	r0, #100	; 0x64
    631e:	f003 feef 	bl	a100 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6322:	bf00      	nop
    6324:	f003 fee2 	bl	a0ec <cc2400_status>
    6328:	4603      	mov	r3, r0
    632a:	f003 0304 	and.w	r3, r3, #4
    632e:	2b00      	cmp	r3, #0
    6330:	d1f8      	bne.n	6324 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    6332:	4b11      	ldr	r3, [pc, #68]	; (6378 <hop+0x114>)
    6334:	881b      	ldrh	r3, [r3, #0]
    6336:	b29b      	uxth	r3, r3
    6338:	3b01      	subs	r3, #1
    633a:	b29b      	uxth	r3, r3
    633c:	2002      	movs	r0, #2
    633e:	4619      	mov	r1, r3
    6340:	f003 fe1c 	bl	9f7c <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    6344:	4b0b      	ldr	r3, [pc, #44]	; (6374 <hop+0x110>)
    6346:	781b      	ldrb	r3, [r3, #0]
    6348:	2b00      	cmp	r3, #0
    634a:	d001      	beq.n	6350 <hop+0xec>
		cs_threshold_calc_and_set();
    634c:	f7fe fb5e 	bl	4a0c <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    6350:	2061      	movs	r0, #97	; 0x61
    6352:	f003 fed5 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6356:	bf00      	nop
    6358:	f003 fec8 	bl	a0ec <cc2400_status>
    635c:	4603      	mov	r3, r0
    635e:	f003 0304 	and.w	r3, r3, #4
    6362:	2b00      	cmp	r3, #0
    6364:	d0f8      	beq.n	6358 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    6366:	2062      	movs	r0, #98	; 0x62
    6368:	f003 feca 	bl	a100 <cc2400_strobe>

}
    636c:	bd80      	pop	{r7, pc}
    636e:	bf00      	nop
    6370:	1000097d 	.word	0x1000097d
    6374:	1000097c 	.word	0x1000097c
    6378:	1000049c 	.word	0x1000049c
    637c:	2009c038 	.word	0x2009c038
    6380:	10000c2c 	.word	0x10000c2c
    6384:	10000458 	.word	0x10000458
    6388:	10000980 	.word	0x10000980

0000638c <bt_stream_rx>:

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    638c:	b5b0      	push	{r4, r5, r7, lr}
    638e:	b082      	sub	sp, #8
    6390:	af00      	add	r7, sp, #0
	u8 *tmp = NULL;
    6392:	2300      	movs	r3, #0
    6394:	603b      	str	r3, [r7, #0]
	int8_t rssi;
	int i;
	int16_t packet_offset;
	int8_t rssi_at_trigger;
	
	RXLED_CLR;
    6396:	4b83      	ldr	r3, [pc, #524]	; (65a4 <bt_stream_rx+0x218>)
    6398:	2210      	movs	r2, #16
    639a:	601a      	str	r2, [r3, #0]

	queue_init();
    639c:	f002 fb74 	bl	8a88 <queue_init>
	dio_ssp_init();
    63a0:	f003 fd1a 	bl	9dd8 <dio_ssp_init>
	dma_init();
    63a4:	f7ff fa18 	bl	57d8 <dma_init>
	dio_ssp_start();
    63a8:	f7ff fc40 	bl	5c2c <dio_ssp_start>
	
	if(mode == MODE_BT_FOLLOW) {
    63ac:	4b7e      	ldr	r3, [pc, #504]	; (65a8 <bt_stream_rx+0x21c>)
    63ae:	781b      	ldrb	r3, [r3, #0]
    63b0:	b2db      	uxtb	r3, r3
    63b2:	2b08      	cmp	r3, #8
    63b4:	d10b      	bne.n	63ce <bt_stream_rx+0x42>
		precalc();
    63b6:	f001 ff17 	bl	81e8 <precalc>
		cc2400_rx_sync((syncword >> 32) & 0xffffffff);
    63ba:	4b7c      	ldr	r3, [pc, #496]	; (65ac <bt_stream_rx+0x220>)
    63bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    63c0:	001c      	movs	r4, r3
    63c2:	2500      	movs	r5, #0
    63c4:	4623      	mov	r3, r4
    63c6:	4618      	mov	r0, r3
    63c8:	f7ff fd4a 	bl	5e60 <cc2400_rx_sync>
    63cc:	e001      	b.n	63d2 <bt_stream_rx+0x46>
	} else {
		cc2400_rx();
    63ce:	f7ff fce9 	bl	5da4 <cc2400_rx>
	}
	cs_trigger_enable();
    63d2:	f7fe fb55 	bl	4a80 <cs_trigger_enable>

	hold = 0;
    63d6:	2300      	movs	r3, #0
    63d8:	71fb      	strb	r3, [r7, #7]

	while ((requested_mode == MODE_RX_SYMBOLS) ||
    63da:	e0d0      	b.n	657e <bt_stream_rx+0x1f2>

		/* If timer says time to hop, do it. TODO - set
		 * per-channel carrier sense threshold. Set by
		 * firmware or host. TODO - if hop happened, clear
		 * hold. */
		if (do_hop)
    63dc:	4b74      	ldr	r3, [pc, #464]	; (65b0 <bt_stream_rx+0x224>)
    63de:	781b      	ldrb	r3, [r3, #0]
    63e0:	b2db      	uxtb	r3, r3
    63e2:	2b00      	cmp	r3, #0
    63e4:	d001      	beq.n	63ea <bt_stream_rx+0x5e>
			hop();
    63e6:	f7ff ff3d 	bl	6264 <hop>

		RXLED_CLR;
    63ea:	4b6e      	ldr	r3, [pc, #440]	; (65a4 <bt_stream_rx+0x218>)
    63ec:	2210      	movs	r2, #16
    63ee:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    63f0:	f7fd ffac 	bl	434c <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    63f4:	2380      	movs	r3, #128	; 0x80
    63f6:	717b      	strb	r3, [r7, #5]
		while ((rx_tc == 0) && (rx_err == 0)) {
    63f8:	e022      	b.n	6440 <bt_stream_rx+0xb4>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    63fa:	2006      	movs	r0, #6
    63fc:	f003 fda8 	bl	9f50 <cc2400_get>
    6400:	4603      	mov	r3, r0
    6402:	0a1b      	lsrs	r3, r3, #8
    6404:	b29b      	uxth	r3, r3
    6406:	71bb      	strb	r3, [r7, #6]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    6408:	4b6a      	ldr	r3, [pc, #424]	; (65b4 <bt_stream_rx+0x228>)
    640a:	781b      	ldrb	r3, [r3, #0]
    640c:	b2db      	uxtb	r3, r3
    640e:	2b00      	cmp	r3, #0
    6410:	d011      	beq.n	6436 <bt_stream_rx+0xaa>
    6412:	f997 3005 	ldrsb.w	r3, [r7, #5]
    6416:	f113 0f80 	cmn.w	r3, #128	; 0x80
    641a:	d10c      	bne.n	6436 <bt_stream_rx+0xaa>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    641c:	4b66      	ldr	r3, [pc, #408]	; (65b8 <bt_stream_rx+0x22c>)
    641e:	781b      	ldrb	r3, [r3, #0]
    6420:	b25b      	sxtb	r3, r3
    6422:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6426:	f997 3006 	ldrsb.w	r3, [r7, #6]
    642a:	4293      	cmp	r3, r2
    642c:	bfb8      	it	lt
    642e:	4613      	movlt	r3, r2
    6430:	71bb      	strb	r3, [r7, #6]
				rssi_at_trigger = rssi;
    6432:	79bb      	ldrb	r3, [r7, #6]
    6434:	717b      	strb	r3, [r7, #5]
			}
			rssi_add(rssi);
    6436:	f997 3006 	ldrsb.w	r3, [r7, #6]
    643a:	4618      	mov	r0, r3
    643c:	f7fd ffaa 	bl	4394 <rssi_add>
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0)) {
    6440:	4b5e      	ldr	r3, [pc, #376]	; (65bc <bt_stream_rx+0x230>)
    6442:	681b      	ldr	r3, [r3, #0]
    6444:	2b00      	cmp	r3, #0
    6446:	d103      	bne.n	6450 <bt_stream_rx+0xc4>
    6448:	4b5d      	ldr	r3, [pc, #372]	; (65c0 <bt_stream_rx+0x234>)
    644a:	681b      	ldr	r3, [r3, #0]
    644c:	2b00      	cmp	r3, #0
    644e:	d0d4      	beq.n	63fa <bt_stream_rx+0x6e>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    6450:	4b5a      	ldr	r3, [pc, #360]	; (65bc <bt_stream_rx+0x230>)
    6452:	681b      	ldr	r3, [r3, #0]
    6454:	f003 0301 	and.w	r3, r3, #1
    6458:	2b00      	cmp	r3, #0
    645a:	d009      	beq.n	6470 <bt_stream_rx+0xe4>
			tmp = active_rxbuf;
    645c:	4b59      	ldr	r3, [pc, #356]	; (65c4 <bt_stream_rx+0x238>)
    645e:	681b      	ldr	r3, [r3, #0]
    6460:	603b      	str	r3, [r7, #0]
			active_rxbuf = idle_rxbuf;
    6462:	4b59      	ldr	r3, [pc, #356]	; (65c8 <bt_stream_rx+0x23c>)
    6464:	681b      	ldr	r3, [r3, #0]
    6466:	4a57      	ldr	r2, [pc, #348]	; (65c4 <bt_stream_rx+0x238>)
    6468:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    646a:	4a57      	ldr	r2, [pc, #348]	; (65c8 <bt_stream_rx+0x23c>)
    646c:	683b      	ldr	r3, [r7, #0]
    646e:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    6470:	4b53      	ldr	r3, [pc, #332]	; (65c0 <bt_stream_rx+0x234>)
    6472:	681b      	ldr	r3, [r3, #0]
    6474:	2b00      	cmp	r3, #0
    6476:	d007      	beq.n	6488 <bt_stream_rx+0xfc>
			status |= DMA_ERROR;
    6478:	4b54      	ldr	r3, [pc, #336]	; (65cc <bt_stream_rx+0x240>)
    647a:	781b      	ldrb	r3, [r3, #0]
    647c:	b2db      	uxtb	r3, r3
    647e:	f043 0302 	orr.w	r3, r3, #2
    6482:	b2da      	uxtb	r2, r3
    6484:	4b51      	ldr	r3, [pc, #324]	; (65cc <bt_stream_rx+0x240>)
    6486:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    6488:	4b4c      	ldr	r3, [pc, #304]	; (65bc <bt_stream_rx+0x230>)
    648a:	681b      	ldr	r3, [r3, #0]
    648c:	2b00      	cmp	r3, #0
    648e:	d100      	bne.n	6492 <bt_stream_rx+0x106>
			goto rx_continue;
    6490:	e06a      	b.n	6568 <bt_stream_rx+0x1dc>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    6492:	4b4a      	ldr	r3, [pc, #296]	; (65bc <bt_stream_rx+0x230>)
    6494:	681b      	ldr	r3, [r3, #0]
    6496:	2b01      	cmp	r3, #1
    6498:	d907      	bls.n	64aa <bt_stream_rx+0x11e>
			status |= DMA_OVERFLOW;
    649a:	4b4c      	ldr	r3, [pc, #304]	; (65cc <bt_stream_rx+0x240>)
    649c:	781b      	ldrb	r3, [r3, #0]
    649e:	b2db      	uxtb	r3, r3
    64a0:	f043 0301 	orr.w	r3, r3, #1
    64a4:	b2da      	uxtb	r2, r3
    64a6:	4b49      	ldr	r3, [pc, #292]	; (65cc <bt_stream_rx+0x240>)
    64a8:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    64aa:	f7fe f833 	bl	4514 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    64ae:	4b41      	ldr	r3, [pc, #260]	; (65b4 <bt_stream_rx+0x228>)
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	b2db      	uxtb	r3, r3
    64b4:	2b00      	cmp	r3, #0
    64b6:	d103      	bne.n	64c0 <bt_stream_rx+0x134>
    64b8:	4b45      	ldr	r3, [pc, #276]	; (65d0 <bt_stream_rx+0x244>)
    64ba:	781b      	ldrb	r3, [r3, #0]
    64bc:	2b00      	cmp	r3, #0
    64be:	d00c      	beq.n	64da <bt_stream_rx+0x14e>
			status |= CS_TRIGGER;
    64c0:	4b42      	ldr	r3, [pc, #264]	; (65cc <bt_stream_rx+0x240>)
    64c2:	781b      	ldrb	r3, [r3, #0]
    64c4:	b2db      	uxtb	r3, r3
    64c6:	f043 0308 	orr.w	r3, r3, #8
    64ca:	b2da      	uxtb	r2, r3
    64cc:	4b3f      	ldr	r3, [pc, #252]	; (65cc <bt_stream_rx+0x240>)
    64ce:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    64d0:	2302      	movs	r3, #2
    64d2:	71fb      	strb	r3, [r7, #7]
			cs_trigger = 0;
    64d4:	4b37      	ldr	r3, [pc, #220]	; (65b4 <bt_stream_rx+0x228>)
    64d6:	2200      	movs	r2, #0
    64d8:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    64da:	4b3e      	ldr	r3, [pc, #248]	; (65d4 <bt_stream_rx+0x248>)
    64dc:	781b      	ldrb	r3, [r3, #0]
    64de:	b25a      	sxtb	r2, r3
    64e0:	4b35      	ldr	r3, [pc, #212]	; (65b8 <bt_stream_rx+0x22c>)
    64e2:	781b      	ldrb	r3, [r3, #0]
    64e4:	b25b      	sxtb	r3, r3
    64e6:	3336      	adds	r3, #54	; 0x36
    64e8:	429a      	cmp	r2, r3
    64ea:	db09      	blt.n	6500 <bt_stream_rx+0x174>
			status |= RSSI_TRIGGER;
    64ec:	4b37      	ldr	r3, [pc, #220]	; (65cc <bt_stream_rx+0x240>)
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	b2db      	uxtb	r3, r3
    64f2:	f043 0310 	orr.w	r3, r3, #16
    64f6:	b2da      	uxtb	r2, r3
    64f8:	4b34      	ldr	r3, [pc, #208]	; (65cc <bt_stream_rx+0x240>)
    64fa:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    64fc:	2302      	movs	r3, #2
    64fe:	71fb      	strb	r3, [r7, #7]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    6500:	4b35      	ldr	r3, [pc, #212]	; (65d8 <bt_stream_rx+0x24c>)
    6502:	781b      	ldrb	r3, [r3, #0]
    6504:	b2db      	uxtb	r3, r3
    6506:	2b00      	cmp	r3, #0
    6508:	d007      	beq.n	651a <bt_stream_rx+0x18e>
			if (hold == 0)
    650a:	79fb      	ldrb	r3, [r7, #7]
    650c:	2b00      	cmp	r3, #0
    650e:	d101      	bne.n	6514 <bt_stream_rx+0x188>
				hold = 1;
    6510:	2301      	movs	r3, #1
    6512:	71fb      	strb	r3, [r7, #7]
			keepalive_trigger = 0;
    6514:	4b30      	ldr	r3, [pc, #192]	; (65d8 <bt_stream_rx+0x24c>)
    6516:	2200      	movs	r2, #0
    6518:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    651a:	79fb      	ldrb	r3, [r7, #7]
    651c:	2b00      	cmp	r3, #0
    651e:	d100      	bne.n	6522 <bt_stream_rx+0x196>
			goto rx_continue;
    6520:	e022      	b.n	6568 <bt_stream_rx+0x1dc>
		}
		hold--;
    6522:	79fb      	ldrb	r3, [r7, #7]
    6524:	3b01      	subs	r3, #1
    6526:	71fb      	strb	r3, [r7, #7]
		
		/* Queue data from DMA buffer. */
		switch (hop_mode) {
    6528:	4b2c      	ldr	r3, [pc, #176]	; (65dc <bt_stream_rx+0x250>)
    652a:	781b      	ldrb	r3, [r3, #0]
    652c:	2b02      	cmp	r3, #2
    652e:	d10d      	bne.n	654c <bt_stream_rx+0x1c0>
			case HOP_BLUETOOTH:
				//if ((packet_offset = find_access_code(idle_rxbuf)) >= 0) {
				//		clock_trim = 20 - packet_offset;
						if (enqueue(BR_PACKET, idle_rxbuf)) {
    6530:	4b25      	ldr	r3, [pc, #148]	; (65c8 <bt_stream_rx+0x23c>)
    6532:	681b      	ldr	r3, [r3, #0]
    6534:	2000      	movs	r0, #0
    6536:	4619      	mov	r1, r3
    6538:	f7fe f918 	bl	476c <enqueue>
    653c:	4603      	mov	r3, r0
    653e:	2b00      	cmp	r3, #0
    6540:	d003      	beq.n	654a <bt_stream_rx+0x1be>
								RXLED_SET;
    6542:	4b27      	ldr	r3, [pc, #156]	; (65e0 <bt_stream_rx+0x254>)
    6544:	2210      	movs	r2, #16
    6546:	601a      	str	r2, [r3, #0]
						}
				//}
				break;
    6548:	e00e      	b.n	6568 <bt_stream_rx+0x1dc>
    654a:	e00d      	b.n	6568 <bt_stream_rx+0x1dc>
			default:
				if (enqueue(BR_PACKET, idle_rxbuf)) {
    654c:	4b1e      	ldr	r3, [pc, #120]	; (65c8 <bt_stream_rx+0x23c>)
    654e:	681b      	ldr	r3, [r3, #0]
    6550:	2000      	movs	r0, #0
    6552:	4619      	mov	r1, r3
    6554:	f7fe f90a 	bl	476c <enqueue>
    6558:	4603      	mov	r3, r0
    655a:	2b00      	cmp	r3, #0
    655c:	d003      	beq.n	6566 <bt_stream_rx+0x1da>
						RXLED_SET;
    655e:	4b20      	ldr	r3, [pc, #128]	; (65e0 <bt_stream_rx+0x254>)
    6560:	2210      	movs	r2, #16
    6562:	601a      	str	r2, [r3, #0]
				}
				break;
    6564:	e7ff      	b.n	6566 <bt_stream_rx+0x1da>
    6566:	bf00      	nop
		}

	rx_continue:
		handle_usb(clkn);
    6568:	4b1e      	ldr	r3, [pc, #120]	; (65e4 <bt_stream_rx+0x258>)
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	4618      	mov	r0, r3
    656e:	f002 fb2b 	bl	8bc8 <handle_usb>
		rx_tc = 0;
    6572:	4b12      	ldr	r3, [pc, #72]	; (65bc <bt_stream_rx+0x230>)
    6574:	2200      	movs	r2, #0
    6576:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6578:	4b11      	ldr	r3, [pc, #68]	; (65c0 <bt_stream_rx+0x234>)
    657a:	2200      	movs	r2, #0
    657c:	601a      	str	r2, [r3, #0]
	}
	cs_trigger_enable();

	hold = 0;

	while ((requested_mode == MODE_RX_SYMBOLS) ||
    657e:	4b1a      	ldr	r3, [pc, #104]	; (65e8 <bt_stream_rx+0x25c>)
    6580:	781b      	ldrb	r3, [r3, #0]
    6582:	b2db      	uxtb	r3, r3
    6584:	2b01      	cmp	r3, #1
    6586:	f43f af29 	beq.w	63dc <bt_stream_rx+0x50>
		   (requested_mode == MODE_BT_FOLLOW)) {
    658a:	4b17      	ldr	r3, [pc, #92]	; (65e8 <bt_stream_rx+0x25c>)
    658c:	781b      	ldrb	r3, [r3, #0]
    658e:	b2db      	uxtb	r3, r3
	}
	cs_trigger_enable();

	hold = 0;

	while ((requested_mode == MODE_RX_SYMBOLS) ||
    6590:	2b08      	cmp	r3, #8
    6592:	f43f af23 	beq.w	63dc <bt_stream_rx+0x50>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    6596:	f7ff fb79 	bl	5c8c <dio_ssp_stop>
	cs_trigger_disable();
    659a:	f7fe fa8f 	bl	4abc <cs_trigger_disable>
}
    659e:	3708      	adds	r7, #8
    65a0:	46bd      	mov	sp, r7
    65a2:	bdb0      	pop	{r4, r5, r7, pc}
    65a4:	2009c03c 	.word	0x2009c03c
    65a8:	10000a3e 	.word	0x10000a3e
    65ac:	10000d40 	.word	0x10000d40
    65b0:	1000097d 	.word	0x1000097d
    65b4:	100010f8 	.word	0x100010f8
    65b8:	1000044d 	.word	0x1000044d
    65bc:	10000b00 	.word	0x10000b00
    65c0:	100010f4 	.word	0x100010f4
    65c4:	10000450 	.word	0x10000450
    65c8:	10000454 	.word	0x10000454
    65cc:	10000a48 	.word	0x10000a48
    65d0:	1000097e 	.word	0x1000097e
    65d4:	10000b04 	.word	0x10000b04
    65d8:	10000c28 	.word	0x10000c28
    65dc:	1000097c 	.word	0x1000097c
    65e0:	2009c038 	.word	0x2009c038
    65e4:	10000c2c 	.word	0x10000c2c
    65e8:	10000a3f 	.word	0x10000a3f

000065ec <le_set_access_address>:

/* set LE access address */
static void le_set_access_address(u32 aa) {
    65ec:	b580      	push	{r7, lr}
    65ee:	b084      	sub	sp, #16
    65f0:	af00      	add	r7, sp, #0
    65f2:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    65f4:	4a09      	ldr	r2, [pc, #36]	; (661c <le_set_access_address+0x30>)
    65f6:	687b      	ldr	r3, [r7, #4]
    65f8:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    65fa:	6878      	ldr	r0, [r7, #4]
    65fc:	f003 faec 	bl	9bd8 <rbit>
    6600:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    6602:	68fb      	ldr	r3, [r7, #12]
    6604:	b29a      	uxth	r2, r3
    6606:	4b05      	ldr	r3, [pc, #20]	; (661c <le_set_access_address+0x30>)
    6608:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    660a:	68fb      	ldr	r3, [r7, #12]
    660c:	0c1b      	lsrs	r3, r3, #16
    660e:	b29a      	uxth	r2, r3
    6610:	4b02      	ldr	r3, [pc, #8]	; (661c <le_set_access_address+0x30>)
    6612:	809a      	strh	r2, [r3, #4]
}
    6614:	3710      	adds	r7, #16
    6616:	46bd      	mov	sp, r7
    6618:	bd80      	pop	{r7, pc}
    661a:	bf00      	nop
    661c:	10000458 	.word	0x10000458

00006620 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    6620:	b580      	push	{r7, lr}
    6622:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    6624:	481f      	ldr	r0, [pc, #124]	; (66a4 <reset_le+0x84>)
    6626:	f7ff ffe1 	bl	65ec <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    662a:	4b1f      	ldr	r3, [pc, #124]	; (66a8 <reset_le+0x88>)
    662c:	4a1f      	ldr	r2, [pc, #124]	; (66ac <reset_le+0x8c>)
    662e:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    6630:	4b1d      	ldr	r3, [pc, #116]	; (66a8 <reset_le+0x88>)
    6632:	4a1f      	ldr	r2, [pc, #124]	; (66b0 <reset_le+0x90>)
    6634:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    6636:	4b1c      	ldr	r3, [pc, #112]	; (66a8 <reset_le+0x88>)
    6638:	2201      	movs	r2, #1
    663a:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    663c:	4b1a      	ldr	r3, [pc, #104]	; (66a8 <reset_le+0x88>)
    663e:	2200      	movs	r2, #0
    6640:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    6642:	4b19      	ldr	r3, [pc, #100]	; (66a8 <reset_le+0x88>)
    6644:	2200      	movs	r2, #0
    6646:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    6648:	4b17      	ldr	r3, [pc, #92]	; (66a8 <reset_le+0x88>)
    664a:	2200      	movs	r2, #0
    664c:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    664e:	4b16      	ldr	r3, [pc, #88]	; (66a8 <reset_le+0x88>)
    6650:	2200      	movs	r2, #0
    6652:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    6654:	4b14      	ldr	r3, [pc, #80]	; (66a8 <reset_le+0x88>)
    6656:	2200      	movs	r2, #0
    6658:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    665a:	4b13      	ldr	r3, [pc, #76]	; (66a8 <reset_le+0x88>)
    665c:	2200      	movs	r2, #0
    665e:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    6660:	4b11      	ldr	r3, [pc, #68]	; (66a8 <reset_le+0x88>)
    6662:	2200      	movs	r2, #0
    6664:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    6666:	4b10      	ldr	r3, [pc, #64]	; (66a8 <reset_le+0x88>)
    6668:	2200      	movs	r2, #0
    666a:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    666c:	4b0e      	ldr	r3, [pc, #56]	; (66a8 <reset_le+0x88>)
    666e:	2200      	movs	r2, #0
    6670:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    6672:	4b0d      	ldr	r3, [pc, #52]	; (66a8 <reset_le+0x88>)
    6674:	2200      	movs	r2, #0
    6676:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    667a:	4b0b      	ldr	r3, [pc, #44]	; (66a8 <reset_le+0x88>)
    667c:	2200      	movs	r2, #0
    667e:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    6680:	4b09      	ldr	r3, [pc, #36]	; (66a8 <reset_le+0x88>)
    6682:	2200      	movs	r2, #0
    6684:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    6686:	4b08      	ldr	r3, [pc, #32]	; (66a8 <reset_le+0x88>)
    6688:	2200      	movs	r2, #0
    668a:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    668c:	4b06      	ldr	r3, [pc, #24]	; (66a8 <reset_le+0x88>)
    668e:	2200      	movs	r2, #0
    6690:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    6692:	4b05      	ldr	r3, [pc, #20]	; (66a8 <reset_le+0x88>)
    6694:	2200      	movs	r2, #0
    6696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    669a:	4b06      	ldr	r3, [pc, #24]	; (66b4 <reset_le+0x94>)
    669c:	2200      	movs	r2, #0
    669e:	701a      	strb	r2, [r3, #0]
}
    66a0:	bd80      	pop	{r7, pc}
    66a2:	bf00      	nop
    66a4:	8e89bed6 	.word	0x8e89bed6
    66a8:	10000458 	.word	0x10000458
    66ac:	00555555 	.word	0x00555555
    66b0:	00aaaaaa 	.word	0x00aaaaaa
    66b4:	1000097d 	.word	0x1000097d

000066b8 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    66b8:	b580      	push	{r7, lr}
    66ba:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    66bc:	4805      	ldr	r0, [pc, #20]	; (66d4 <reset_le_promisc+0x1c>)
    66be:	2100      	movs	r1, #0
    66c0:	f44f 7284 	mov.w	r2, #264	; 0x108
    66c4:	f7fd fd98 	bl	41f8 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    66c8:	4b02      	ldr	r3, [pc, #8]	; (66d4 <reset_le_promisc+0x1c>)
    66ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    66ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    66d2:	bd80      	pop	{r7, pc}
    66d4:	10000c34 	.word	0x10000c34

000066d8 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    66d8:	b580      	push	{r7, lr}
    66da:	b088      	sub	sp, #32
    66dc:	af00      	add	r7, sp, #0
    66de:	4603      	mov	r3, r0
    66e0:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    66e2:	2300      	movs	r3, #0
    66e4:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    66e6:	4ba4      	ldr	r3, [pc, #656]	; (6978 <bt_generic_le+0x2a0>)
    66e8:	2201      	movs	r2, #1
    66ea:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    66ec:	4aa3      	ldr	r2, [pc, #652]	; (697c <bt_generic_le+0x2a4>)
    66ee:	79fb      	ldrb	r3, [r7, #7]
    66f0:	7013      	strb	r3, [r2, #0]

	reset_le();
    66f2:	f7ff ff95 	bl	6620 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    66f6:	4ba2      	ldr	r3, [pc, #648]	; (6980 <bt_generic_le+0x2a8>)
    66f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    66fc:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    66fe:	4ba1      	ldr	r3, [pc, #644]	; (6984 <bt_generic_le+0x2ac>)
    6700:	2210      	movs	r2, #16
    6702:	601a      	str	r2, [r3, #0]

	queue_init();
    6704:	f002 f9c0 	bl	8a88 <queue_init>
	dio_ssp_init();
    6708:	f003 fb66 	bl	9dd8 <dio_ssp_init>
	dma_init();
    670c:	f7ff f864 	bl	57d8 <dma_init>
	dio_ssp_start();
    6710:	f7ff fa8c 	bl	5c2c <dio_ssp_start>
	cc2400_rx();
    6714:	f7ff fb46 	bl	5da4 <cc2400_rx>

	cs_trigger_enable();
    6718:	f7fe f9b2 	bl	4a80 <cs_trigger_enable>

	hold = 0;
    671c:	2300      	movs	r3, #0
    671e:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    6720:	e115      	b.n	694e <bt_generic_le+0x276>
		if (requested_channel != 0) {
    6722:	4b99      	ldr	r3, [pc, #612]	; (6988 <bt_generic_le+0x2b0>)
    6724:	881b      	ldrh	r3, [r3, #0]
    6726:	b29b      	uxth	r3, r3
    6728:	2b00      	cmp	r3, #0
    672a:	d024      	beq.n	6776 <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    672c:	2064      	movs	r0, #100	; 0x64
    672e:	f003 fce7 	bl	a100 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6732:	bf00      	nop
    6734:	f003 fcda 	bl	a0ec <cc2400_status>
    6738:	4603      	mov	r3, r0
    673a:	f003 0304 	and.w	r3, r3, #4
    673e:	2b00      	cmp	r3, #0
    6740:	d1f8      	bne.n	6734 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6742:	4b92      	ldr	r3, [pc, #584]	; (698c <bt_generic_le+0x2b4>)
    6744:	881b      	ldrh	r3, [r3, #0]
    6746:	b29b      	uxth	r3, r3
    6748:	3b01      	subs	r3, #1
    674a:	b29b      	uxth	r3, r3
    674c:	2002      	movs	r0, #2
    674e:	4619      	mov	r1, r3
    6750:	f003 fc14 	bl	9f7c <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6754:	2061      	movs	r0, #97	; 0x61
    6756:	f003 fcd3 	bl	a100 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    675a:	bf00      	nop
    675c:	f003 fcc6 	bl	a0ec <cc2400_status>
    6760:	4603      	mov	r3, r0
    6762:	f003 0304 	and.w	r3, r3, #4
    6766:	2b00      	cmp	r3, #0
    6768:	d0f8      	beq.n	675c <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    676a:	2062      	movs	r0, #98	; 0x62
    676c:	f003 fcc8 	bl	a100 <cc2400_strobe>

			requested_channel = 0;
    6770:	4b85      	ldr	r3, [pc, #532]	; (6988 <bt_generic_le+0x2b0>)
    6772:	2200      	movs	r2, #0
    6774:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    6776:	4b86      	ldr	r3, [pc, #536]	; (6990 <bt_generic_le+0x2b8>)
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	b2db      	uxtb	r3, r3
    677c:	2b00      	cmp	r3, #0
    677e:	d002      	beq.n	6786 <bt_generic_le+0xae>
			hop();
    6780:	f7ff fd70 	bl	6264 <hop>
    6784:	e003      	b.n	678e <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    6786:	4b7f      	ldr	r3, [pc, #508]	; (6984 <bt_generic_le+0x2ac>)
    6788:	f44f 7280 	mov.w	r2, #256	; 0x100
    678c:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    678e:	4b7d      	ldr	r3, [pc, #500]	; (6984 <bt_generic_le+0x2ac>)
    6790:	2210      	movs	r2, #16
    6792:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    6794:	f7fd fdda 	bl	434c <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    6798:	2380      	movs	r3, #128	; 0x80
    679a:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    679c:	e022      	b.n	67e4 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    679e:	2006      	movs	r0, #6
    67a0:	f003 fbd6 	bl	9f50 <cc2400_get>
    67a4:	4603      	mov	r3, r0
    67a6:	0a1b      	lsrs	r3, r3, #8
    67a8:	b29b      	uxth	r3, r3
    67aa:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    67ac:	4b79      	ldr	r3, [pc, #484]	; (6994 <bt_generic_le+0x2bc>)
    67ae:	781b      	ldrb	r3, [r3, #0]
    67b0:	b2db      	uxtb	r3, r3
    67b2:	2b00      	cmp	r3, #0
    67b4:	d011      	beq.n	67da <bt_generic_le+0x102>
    67b6:	f997 3012 	ldrsb.w	r3, [r7, #18]
    67ba:	f113 0f80 	cmn.w	r3, #128	; 0x80
    67be:	d10c      	bne.n	67da <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    67c0:	4b75      	ldr	r3, [pc, #468]	; (6998 <bt_generic_le+0x2c0>)
    67c2:	781b      	ldrb	r3, [r3, #0]
    67c4:	b25b      	sxtb	r3, r3
    67c6:	f103 0236 	add.w	r2, r3, #54	; 0x36
    67ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
    67ce:	4293      	cmp	r3, r2
    67d0:	bfb8      	it	lt
    67d2:	4613      	movlt	r3, r2
    67d4:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    67d6:	7cfb      	ldrb	r3, [r7, #19]
    67d8:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    67da:	f997 3013 	ldrsb.w	r3, [r7, #19]
    67de:	4618      	mov	r0, r3
    67e0:	f7fd fdd8 	bl	4394 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    67e4:	4b6d      	ldr	r3, [pc, #436]	; (699c <bt_generic_le+0x2c4>)
    67e6:	681b      	ldr	r3, [r3, #0]
    67e8:	2b00      	cmp	r3, #0
    67ea:	d103      	bne.n	67f4 <bt_generic_le+0x11c>
    67ec:	4b6c      	ldr	r3, [pc, #432]	; (69a0 <bt_generic_le+0x2c8>)
    67ee:	681b      	ldr	r3, [r3, #0]
    67f0:	2b00      	cmp	r3, #0
    67f2:	d0d4      	beq.n	679e <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    67f4:	4b69      	ldr	r3, [pc, #420]	; (699c <bt_generic_le+0x2c4>)
    67f6:	681b      	ldr	r3, [r3, #0]
    67f8:	f003 0301 	and.w	r3, r3, #1
    67fc:	2b00      	cmp	r3, #0
    67fe:	d009      	beq.n	6814 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    6800:	4b68      	ldr	r3, [pc, #416]	; (69a4 <bt_generic_le+0x2cc>)
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    6806:	4b68      	ldr	r3, [pc, #416]	; (69a8 <bt_generic_le+0x2d0>)
    6808:	681b      	ldr	r3, [r3, #0]
    680a:	4a66      	ldr	r2, [pc, #408]	; (69a4 <bt_generic_le+0x2cc>)
    680c:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    680e:	4a66      	ldr	r2, [pc, #408]	; (69a8 <bt_generic_le+0x2d0>)
    6810:	68fb      	ldr	r3, [r7, #12]
    6812:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    6814:	4b62      	ldr	r3, [pc, #392]	; (69a0 <bt_generic_le+0x2c8>)
    6816:	681b      	ldr	r3, [r3, #0]
    6818:	2b00      	cmp	r3, #0
    681a:	d007      	beq.n	682c <bt_generic_le+0x154>
			status |= DMA_ERROR;
    681c:	4b63      	ldr	r3, [pc, #396]	; (69ac <bt_generic_le+0x2d4>)
    681e:	781b      	ldrb	r3, [r3, #0]
    6820:	b2db      	uxtb	r3, r3
    6822:	f043 0302 	orr.w	r3, r3, #2
    6826:	b2da      	uxtb	r2, r3
    6828:	4b60      	ldr	r3, [pc, #384]	; (69ac <bt_generic_le+0x2d4>)
    682a:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    682c:	4b5b      	ldr	r3, [pc, #364]	; (699c <bt_generic_le+0x2c4>)
    682e:	681b      	ldr	r3, [r3, #0]
    6830:	2b00      	cmp	r3, #0
    6832:	d100      	bne.n	6836 <bt_generic_le+0x15e>
			goto rx_continue;
    6834:	e085      	b.n	6942 <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    6836:	4b59      	ldr	r3, [pc, #356]	; (699c <bt_generic_le+0x2c4>)
    6838:	681b      	ldr	r3, [r3, #0]
    683a:	2b01      	cmp	r3, #1
    683c:	d907      	bls.n	684e <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    683e:	4b5b      	ldr	r3, [pc, #364]	; (69ac <bt_generic_le+0x2d4>)
    6840:	781b      	ldrb	r3, [r3, #0]
    6842:	b2db      	uxtb	r3, r3
    6844:	f043 0301 	orr.w	r3, r3, #1
    6848:	b2da      	uxtb	r2, r3
    684a:	4b58      	ldr	r3, [pc, #352]	; (69ac <bt_generic_le+0x2d4>)
    684c:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    684e:	f7fd fe61 	bl	4514 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    6852:	4b50      	ldr	r3, [pc, #320]	; (6994 <bt_generic_le+0x2bc>)
    6854:	781b      	ldrb	r3, [r3, #0]
    6856:	b2db      	uxtb	r3, r3
    6858:	2b00      	cmp	r3, #0
    685a:	d103      	bne.n	6864 <bt_generic_le+0x18c>
    685c:	4b54      	ldr	r3, [pc, #336]	; (69b0 <bt_generic_le+0x2d8>)
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	2b00      	cmp	r3, #0
    6862:	d00c      	beq.n	687e <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    6864:	4b51      	ldr	r3, [pc, #324]	; (69ac <bt_generic_le+0x2d4>)
    6866:	781b      	ldrb	r3, [r3, #0]
    6868:	b2db      	uxtb	r3, r3
    686a:	f043 0308 	orr.w	r3, r3, #8
    686e:	b2da      	uxtb	r2, r3
    6870:	4b4e      	ldr	r3, [pc, #312]	; (69ac <bt_generic_le+0x2d4>)
    6872:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6874:	2302      	movs	r3, #2
    6876:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    6878:	4b46      	ldr	r3, [pc, #280]	; (6994 <bt_generic_le+0x2bc>)
    687a:	2200      	movs	r2, #0
    687c:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    687e:	4b4d      	ldr	r3, [pc, #308]	; (69b4 <bt_generic_le+0x2dc>)
    6880:	781b      	ldrb	r3, [r3, #0]
    6882:	b25a      	sxtb	r2, r3
    6884:	4b44      	ldr	r3, [pc, #272]	; (6998 <bt_generic_le+0x2c0>)
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	b25b      	sxtb	r3, r3
    688a:	3336      	adds	r3, #54	; 0x36
    688c:	429a      	cmp	r2, r3
    688e:	db09      	blt.n	68a4 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    6890:	4b46      	ldr	r3, [pc, #280]	; (69ac <bt_generic_le+0x2d4>)
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	b2db      	uxtb	r3, r3
    6896:	f043 0310 	orr.w	r3, r3, #16
    689a:	b2da      	uxtb	r2, r3
    689c:	4b43      	ldr	r3, [pc, #268]	; (69ac <bt_generic_le+0x2d4>)
    689e:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    68a0:	2302      	movs	r3, #2
    68a2:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    68a4:	4b44      	ldr	r3, [pc, #272]	; (69b8 <bt_generic_le+0x2e0>)
    68a6:	781b      	ldrb	r3, [r3, #0]
    68a8:	b2db      	uxtb	r3, r3
    68aa:	2b00      	cmp	r3, #0
    68ac:	d007      	beq.n	68be <bt_generic_le+0x1e6>
			if (hold == 0)
    68ae:	7ffb      	ldrb	r3, [r7, #31]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d101      	bne.n	68b8 <bt_generic_le+0x1e0>
				hold = 1;
    68b4:	2301      	movs	r3, #1
    68b6:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    68b8:	4b3f      	ldr	r3, [pc, #252]	; (69b8 <bt_generic_le+0x2e0>)
    68ba:	2200      	movs	r2, #0
    68bc:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    68be:	7ffb      	ldrb	r3, [r7, #31]
    68c0:	2b00      	cmp	r3, #0
    68c2:	d100      	bne.n	68c6 <bt_generic_le+0x1ee>
			goto rx_continue;
    68c4:	e03d      	b.n	6942 <bt_generic_le+0x26a>
		}
		hold--;
    68c6:	7ffb      	ldrb	r3, [r7, #31]
    68c8:	3b01      	subs	r3, #1
    68ca:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    68cc:	483b      	ldr	r0, [pc, #236]	; (69bc <bt_generic_le+0x2e4>)
    68ce:	493c      	ldr	r1, [pc, #240]	; (69c0 <bt_generic_le+0x2e8>)
    68d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
    68d4:	f004 fd3c 	bl	b350 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    68d8:	2300      	movs	r3, #0
    68da:	61bb      	str	r3, [r7, #24]
    68dc:	e025      	b.n	692a <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    68de:	2300      	movs	r3, #0
    68e0:	617b      	str	r3, [r7, #20]
    68e2:	e01c      	b.n	691e <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    68e4:	69bb      	ldr	r3, [r7, #24]
    68e6:	3332      	adds	r3, #50	; 0x32
    68e8:	00da      	lsls	r2, r3, #3
    68ea:	697b      	ldr	r3, [r7, #20]
    68ec:	4413      	add	r3, r2
    68ee:	4a2e      	ldr	r2, [pc, #184]	; (69a8 <bt_generic_le+0x2d0>)
    68f0:	6811      	ldr	r1, [r2, #0]
    68f2:	69ba      	ldr	r2, [r7, #24]
    68f4:	440a      	add	r2, r1
    68f6:	7812      	ldrb	r2, [r2, #0]
    68f8:	09d2      	lsrs	r2, r2, #7
    68fa:	b2d1      	uxtb	r1, r2
    68fc:	4a2f      	ldr	r2, [pc, #188]	; (69bc <bt_generic_le+0x2e4>)
    68fe:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    6900:	4b29      	ldr	r3, [pc, #164]	; (69a8 <bt_generic_le+0x2d0>)
    6902:	681a      	ldr	r2, [r3, #0]
    6904:	69bb      	ldr	r3, [r7, #24]
    6906:	4413      	add	r3, r2
    6908:	4a27      	ldr	r2, [pc, #156]	; (69a8 <bt_generic_le+0x2d0>)
    690a:	6811      	ldr	r1, [r2, #0]
    690c:	69ba      	ldr	r2, [r7, #24]
    690e:	440a      	add	r2, r1
    6910:	7812      	ldrb	r2, [r2, #0]
    6912:	0052      	lsls	r2, r2, #1
    6914:	b2d2      	uxtb	r2, r2
    6916:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6918:	697b      	ldr	r3, [r7, #20]
    691a:	3301      	adds	r3, #1
    691c:	617b      	str	r3, [r7, #20]
    691e:	697b      	ldr	r3, [r7, #20]
    6920:	2b07      	cmp	r3, #7
    6922:	dddf      	ble.n	68e4 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6924:	69bb      	ldr	r3, [r7, #24]
    6926:	3301      	adds	r3, #1
    6928:	61bb      	str	r3, [r7, #24]
    692a:	69bb      	ldr	r3, [r7, #24]
    692c:	2b31      	cmp	r3, #49	; 0x31
    692e:	ddd6      	ble.n	68de <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    6930:	4b24      	ldr	r3, [pc, #144]	; (69c4 <bt_generic_le+0x2ec>)
    6932:	681b      	ldr	r3, [r3, #0]
    6934:	4821      	ldr	r0, [pc, #132]	; (69bc <bt_generic_le+0x2e4>)
    6936:	4798      	blx	r3
    6938:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    693a:	68bb      	ldr	r3, [r7, #8]
    693c:	2b00      	cmp	r3, #0
    693e:	d100      	bne.n	6942 <bt_generic_le+0x26a>
    6940:	e00c      	b.n	695c <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    6942:	4b16      	ldr	r3, [pc, #88]	; (699c <bt_generic_le+0x2c4>)
    6944:	2200      	movs	r2, #0
    6946:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6948:	4b15      	ldr	r3, [pc, #84]	; (69a0 <bt_generic_le+0x2c8>)
    694a:	2200      	movs	r2, #0
    694c:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    694e:	4b1e      	ldr	r3, [pc, #120]	; (69c8 <bt_generic_le+0x2f0>)
    6950:	781b      	ldrb	r3, [r3, #0]
    6952:	b2db      	uxtb	r3, r3
    6954:	79fa      	ldrb	r2, [r7, #7]
    6956:	429a      	cmp	r2, r3
    6958:	f43f aee3 	beq.w	6722 <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    695c:	4b1b      	ldr	r3, [pc, #108]	; (69cc <bt_generic_le+0x2f4>)
    695e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6962:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6964:	f7ff f9f6 	bl	5d54 <cc2400_idle>
	dio_ssp_stop();
    6968:	f7ff f990 	bl	5c8c <dio_ssp_stop>
	cs_trigger_disable();
    696c:	f7fe f8a6 	bl	4abc <cs_trigger_disable>
}
    6970:	3720      	adds	r7, #32
    6972:	46bd      	mov	sp, r7
    6974:	bd80      	pop	{r7, pc}
    6976:	bf00      	nop
    6978:	10000a42 	.word	0x10000a42
    697c:	10000a3e 	.word	0x10000a3e
    6980:	e000e100 	.word	0xe000e100
    6984:	2009c03c 	.word	0x2009c03c
    6988:	10000a44 	.word	0x10000a44
    698c:	1000049c 	.word	0x1000049c
    6990:	1000097d 	.word	0x1000097d
    6994:	100010f8 	.word	0x100010f8
    6998:	1000044d 	.word	0x1000044d
    699c:	10000b00 	.word	0x10000b00
    69a0:	100010f4 	.word	0x100010f4
    69a4:	10000450 	.word	0x10000450
    69a8:	10000454 	.word	0x10000454
    69ac:	10000a48 	.word	0x10000a48
    69b0:	1000097e 	.word	0x1000097e
    69b4:	10000b04 	.word	0x10000b04
    69b8:	10000c28 	.word	0x10000c28
    69bc:	10000d48 	.word	0x10000d48
    69c0:	10000ed8 	.word	0x10000ed8
    69c4:	10000998 	.word	0x10000998
    69c8:	10000a3f 	.word	0x10000a3f
    69cc:	e000e180 	.word	0xe000e180

000069d0 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    69d0:	b590      	push	{r4, r7, lr}
    69d2:	b09d      	sub	sp, #116	; 0x74
    69d4:	af00      	add	r7, sp, #0
    69d6:	4603      	mov	r3, r0
    69d8:	71fb      	strb	r3, [r7, #7]
	int i, j;
	int8_t rssi, rssi_at_trigger; //gjlee
	static int restart_jamming = 0;
	j = 0;
    69da:	2300      	movs	r3, #0
    69dc:	667b      	str	r3, [r7, #100]	; 0x64

	modulation = MOD_BT_LOW_ENERGY;
    69de:	4b95      	ldr	r3, [pc, #596]	; (6c34 <bt_le_sync+0x264>)
    69e0:	2201      	movs	r2, #1
    69e2:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    69e4:	4a94      	ldr	r2, [pc, #592]	; (6c38 <bt_le_sync+0x268>)
    69e6:	79fb      	ldrb	r3, [r7, #7]
    69e8:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    69ea:	4b94      	ldr	r3, [pc, #592]	; (6c3c <bt_le_sync+0x26c>)
    69ec:	2201      	movs	r2, #1
    69ee:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    69f0:	4b93      	ldr	r3, [pc, #588]	; (6c40 <bt_le_sync+0x270>)
    69f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    69f6:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    69f8:	4b92      	ldr	r3, [pc, #584]	; (6c44 <bt_le_sync+0x274>)
    69fa:	2210      	movs	r2, #16
    69fc:	601a      	str	r2, [r3, #0]

	queue_init();
    69fe:	f002 f843 	bl	8a88 <queue_init>
	dio_ssp_init();
    6a02:	f003 f9e9 	bl	9dd8 <dio_ssp_init>
	dma_init_le();
    6a06:	f7fe ffa7 	bl	5958 <dma_init_le>
	dio_ssp_start();
    6a0a:	f7ff f90f 	bl	5c2c <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    6a0e:	4b8b      	ldr	r3, [pc, #556]	; (6c3c <bt_le_sync+0x26c>)
    6a10:	681b      	ldr	r3, [r3, #0]
    6a12:	4618      	mov	r0, r3
    6a14:	f003 f8e0 	bl	9bd8 <rbit>
    6a18:	4603      	mov	r3, r0
    6a1a:	4618      	mov	r0, r3
    6a1c:	f7ff fa20 	bl	5e60 <cc2400_rx_sync>
	
	//gjlee
	cs_trigger_enable();
    6a20:	f7fe f82e 	bl	4a80 <cs_trigger_enable>

	while (requested_mode == active_mode) {
    6a24:	e263      	b.n	6eee <bt_le_sync+0x51e>
		if (requested_channel != 0) {
    6a26:	4b88      	ldr	r3, [pc, #544]	; (6c48 <bt_le_sync+0x278>)
    6a28:	881b      	ldrh	r3, [r3, #0]
    6a2a:	b29b      	uxth	r3, r3
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d029      	beq.n	6a84 <bt_le_sync+0xb4>
			cc2400_strobe(SRFOFF);
    6a30:	2064      	movs	r0, #100	; 0x64
    6a32:	f003 fb65 	bl	a100 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6a36:	bf00      	nop
    6a38:	f003 fb58 	bl	a0ec <cc2400_status>
    6a3c:	4603      	mov	r3, r0
    6a3e:	f003 0304 	and.w	r3, r3, #4
    6a42:	2b00      	cmp	r3, #0
    6a44:	d1f8      	bne.n	6a38 <bt_le_sync+0x68>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6a46:	4b81      	ldr	r3, [pc, #516]	; (6c4c <bt_le_sync+0x27c>)
    6a48:	881b      	ldrh	r3, [r3, #0]
    6a4a:	b29b      	uxth	r3, r3
    6a4c:	3b01      	subs	r3, #1
    6a4e:	b29b      	uxth	r3, r3
    6a50:	2002      	movs	r0, #2
    6a52:	4619      	mov	r1, r3
    6a54:	f003 fa92 	bl	9f7c <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6a58:	2061      	movs	r0, #97	; 0x61
    6a5a:	f003 fb51 	bl	a100 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6a5e:	bf00      	nop
    6a60:	f003 fb44 	bl	a0ec <cc2400_status>
    6a64:	4603      	mov	r3, r0
    6a66:	f003 0304 	and.w	r3, r3, #4
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d0f8      	beq.n	6a60 <bt_le_sync+0x90>

			/* RX mode */
			cc2400_strobe(SRX);
    6a6e:	2062      	movs	r0, #98	; 0x62
    6a70:	f003 fb46 	bl	a100 <cc2400_strobe>

			saved_request = requested_channel;
    6a74:	4b74      	ldr	r3, [pc, #464]	; (6c48 <bt_le_sync+0x278>)
    6a76:	881b      	ldrh	r3, [r3, #0]
    6a78:	b29a      	uxth	r2, r3
    6a7a:	4b75      	ldr	r3, [pc, #468]	; (6c50 <bt_le_sync+0x280>)
    6a7c:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    6a7e:	4b72      	ldr	r3, [pc, #456]	; (6c48 <bt_le_sync+0x278>)
    6a80:	2200      	movs	r2, #0
    6a82:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    6a84:	4b6f      	ldr	r3, [pc, #444]	; (6c44 <bt_le_sync+0x274>)
    6a86:	2210      	movs	r2, #16
    6a88:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    6a8a:	f7fd fc5f 	bl	434c <rssi_reset>
		
		//gjlee
		rssi_at_trigger = INT8_MIN;
    6a8e:	2380      	movs	r3, #128	; 0x80
    6a90:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		while(!(cc2400_status() & SYNC_RECEIVED));
    6a94:	bf00      	nop
    6a96:	f003 fb29 	bl	a0ec <cc2400_status>
    6a9a:	4603      	mov	r3, r0
    6a9c:	f003 0310 	and.w	r3, r3, #16
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	d0f8      	beq.n	6a96 <bt_le_sync+0xc6>

		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode){
    6aa4:	e00c      	b.n	6ac0 <bt_le_sync+0xf0>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6aa6:	2006      	movs	r0, #6
    6aa8:	f003 fa52 	bl	9f50 <cc2400_get>
    6aac:	4603      	mov	r3, r0
    6aae:	0a1b      	lsrs	r3, r3, #8
    6ab0:	b29b      	uxth	r3, r3
    6ab2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			rssi_add_pkt(rssi);
    6ab6:	f997 3062 	ldrsb.w	r3, [r7, #98]	; 0x62
    6aba:	4618      	mov	r0, r3
    6abc:	f7fd fca0 	bl	4400 <rssi_add_pkt>
		//gjlee
		rssi_at_trigger = INT8_MIN;

		while(!(cc2400_status() & SYNC_RECEIVED));

		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode){
    6ac0:	4b64      	ldr	r3, [pc, #400]	; (6c54 <bt_le_sync+0x284>)
    6ac2:	681b      	ldr	r3, [r3, #0]
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	d10e      	bne.n	6ae6 <bt_le_sync+0x116>
    6ac8:	4b63      	ldr	r3, [pc, #396]	; (6c58 <bt_le_sync+0x288>)
    6aca:	681b      	ldr	r3, [r3, #0]
    6acc:	2b00      	cmp	r3, #0
    6ace:	d10a      	bne.n	6ae6 <bt_le_sync+0x116>
    6ad0:	4b62      	ldr	r3, [pc, #392]	; (6c5c <bt_le_sync+0x28c>)
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	b2db      	uxtb	r3, r3
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d105      	bne.n	6ae6 <bt_le_sync+0x116>
    6ada:	4b61      	ldr	r3, [pc, #388]	; (6c60 <bt_le_sync+0x290>)
    6adc:	781b      	ldrb	r3, [r3, #0]
    6ade:	b2db      	uxtb	r3, r3
    6ae0:	79fa      	ldrb	r2, [r7, #7]
    6ae2:	429a      	cmp	r2, r3
    6ae4:	d0df      	beq.n	6aa6 <bt_le_sync+0xd6>
			rssi_add_pkt(rssi);
		}

		//while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode);

		if (requested_mode != active_mode) {
    6ae6:	4b5e      	ldr	r3, [pc, #376]	; (6c60 <bt_le_sync+0x290>)
    6ae8:	781b      	ldrb	r3, [r3, #0]
    6aea:	b2db      	uxtb	r3, r3
    6aec:	79fa      	ldrb	r2, [r7, #7]
    6aee:	429a      	cmp	r2, r3
    6af0:	d000      	beq.n	6af4 <bt_le_sync+0x124>
			goto cleanup;
    6af2:	e203      	b.n	6efc <bt_le_sync+0x52c>
		}

		if (rx_err) {
    6af4:	4b58      	ldr	r3, [pc, #352]	; (6c58 <bt_le_sync+0x288>)
    6af6:	681b      	ldr	r3, [r3, #0]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d007      	beq.n	6b0c <bt_le_sync+0x13c>
			status |= DMA_ERROR;
    6afc:	4b59      	ldr	r3, [pc, #356]	; (6c64 <bt_le_sync+0x294>)
    6afe:	781b      	ldrb	r3, [r3, #0]
    6b00:	b2db      	uxtb	r3, r3
    6b02:	f043 0302 	orr.w	r3, r3, #2
    6b06:	b2da      	uxtb	r2, r3
    6b08:	4b56      	ldr	r3, [pc, #344]	; (6c64 <bt_le_sync+0x294>)
    6b0a:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    6b0c:	4b53      	ldr	r3, [pc, #332]	; (6c5c <bt_le_sync+0x28c>)
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	b2db      	uxtb	r3, r3
    6b12:	2b00      	cmp	r3, #0
    6b14:	d000      	beq.n	6b18 <bt_le_sync+0x148>
			goto rx_flush;
    6b16:	e12f      	b.n	6d78 <bt_le_sync+0x3a8>

		/* No DMA transfer? */
		if (!rx_tc)
    6b18:	4b4e      	ldr	r3, [pc, #312]	; (6c54 <bt_le_sync+0x284>)
    6b1a:	681b      	ldr	r3, [r3, #0]
    6b1c:	2b00      	cmp	r3, #0
    6b1e:	d100      	bne.n	6b22 <bt_le_sync+0x152>
    6b20:	e1e5      	b.n	6eee <bt_le_sync+0x51e>
			continue;
		
		//gjlee
		rssi_update_pkt();
    6b22:	f7fd fcd3 	bl	44cc <rssi_update_pkt>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6b26:	f107 0308 	add.w	r3, r7, #8
    6b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    6b2c:	4b43      	ldr	r3, [pc, #268]	; (6c3c <bt_le_sync+0x26c>)
    6b2e:	681b      	ldr	r3, [r3, #0]
    6b30:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6b32:	4b46      	ldr	r3, [pc, #280]	; (6c4c <bt_le_sync+0x27c>)
    6b34:	881b      	ldrh	r3, [r3, #0]
    6b36:	b29b      	uxth	r3, r3
    6b38:	b2db      	uxtb	r3, r3
    6b3a:	3b62      	subs	r3, #98	; 0x62
    6b3c:	b2db      	uxtb	r3, r3
    6b3e:	4618      	mov	r0, r3
    6b40:	f001 fe22 	bl	8788 <btle_channel_index>
    6b44:	4603      	mov	r3, r0
    6b46:	461a      	mov	r2, r3
    6b48:	4613      	mov	r3, r2
    6b4a:	005b      	lsls	r3, r3, #1
    6b4c:	4413      	add	r3, r2
    6b4e:	011b      	lsls	r3, r3, #4
    6b50:	4a45      	ldr	r2, [pc, #276]	; (6c68 <bt_le_sync+0x298>)
    6b52:	4413      	add	r3, r2
    6b54:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    6b56:	2300      	movs	r3, #0
    6b58:	66fb      	str	r3, [r7, #108]	; 0x6c
    6b5a:	e034      	b.n	6bc6 <bt_le_sync+0x1f6>
			uint32_t v = rxbuf1[i+0] << 24
    6b5c:	4a43      	ldr	r2, [pc, #268]	; (6c6c <bt_le_sync+0x29c>)
    6b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6b60:	4413      	add	r3, r2
    6b62:	781b      	ldrb	r3, [r3, #0]
    6b64:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6b68:	3301      	adds	r3, #1
    6b6a:	4940      	ldr	r1, [pc, #256]	; (6c6c <bt_le_sync+0x29c>)
    6b6c:	5ccb      	ldrb	r3, [r1, r3]
    6b6e:	041b      	lsls	r3, r3, #16
    6b70:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    6b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6b74:	3302      	adds	r3, #2
    6b76:	493d      	ldr	r1, [pc, #244]	; (6c6c <bt_le_sync+0x29c>)
    6b78:	5ccb      	ldrb	r3, [r1, r3]
    6b7a:	021b      	lsls	r3, r3, #8
    6b7c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6b80:	3203      	adds	r2, #3
    6b82:	493a      	ldr	r1, [pc, #232]	; (6c6c <bt_le_sync+0x29c>)
    6b84:	5c8a      	ldrb	r2, [r1, r2]
    6b86:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6b88:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	da00      	bge.n	6b92 <bt_le_sync+0x1c2>
    6b90:	3303      	adds	r3, #3
    6b92:	109b      	asrs	r3, r3, #2
    6b94:	1c5c      	adds	r4, r3, #1
    6b96:	6d78      	ldr	r0, [r7, #84]	; 0x54
    6b98:	f003 f81e 	bl	9bd8 <rbit>
    6b9c:	4601      	mov	r1, r0
    6b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6ba0:	2b00      	cmp	r3, #0
    6ba2:	da00      	bge.n	6ba6 <bt_le_sync+0x1d6>
    6ba4:	3303      	adds	r3, #3
    6ba6:	109b      	asrs	r3, r3, #2
    6ba8:	009b      	lsls	r3, r3, #2
    6baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6bac:	4413      	add	r3, r2
    6bae:	681b      	ldr	r3, [r3, #0]
    6bb0:	ea81 0203 	eor.w	r2, r1, r3
    6bb4:	00a3      	lsls	r3, r4, #2
    6bb6:	f107 0170 	add.w	r1, r7, #112	; 0x70
    6bba:	440b      	add	r3, r1
    6bbc:	f843 2c68 	str.w	r2, [r3, #-104]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    6bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6bc2:	3304      	adds	r3, #4
    6bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    6bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6bc8:	2b03      	cmp	r3, #3
    6bca:	ddc7      	ble.n	6b5c <bt_le_sync+0x18c>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    6bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6bce:	3305      	adds	r3, #5
    6bd0:	781b      	ldrb	r3, [r3, #0]
    6bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6bd6:	3302      	adds	r3, #2
    6bd8:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    6bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6bdc:	2b27      	cmp	r3, #39	; 0x27
    6bde:	d900      	bls.n	6be2 <bt_le_sync+0x212>
			goto rx_flush;
    6be0:	e0ca      	b.n	6d78 <bt_le_sync+0x3a8>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    6be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6be4:	3306      	adds	r3, #6
    6be6:	089b      	lsrs	r3, r3, #2
    6be8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    6bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6bec:	2b0a      	cmp	r3, #10
    6bee:	d80d      	bhi.n	6c0c <bt_le_sync+0x23c>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    6bf0:	bf00      	nop
    6bf2:	4b1f      	ldr	r3, [pc, #124]	; (6c70 <bt_le_sync+0x2a0>)
    6bf4:	681a      	ldr	r2, [r3, #0]
    6bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6bf8:	009b      	lsls	r3, r3, #2
    6bfa:	491c      	ldr	r1, [pc, #112]	; (6c6c <bt_le_sync+0x29c>)
    6bfc:	440b      	add	r3, r1
    6bfe:	429a      	cmp	r2, r3
    6c00:	d20f      	bcs.n	6c22 <bt_le_sync+0x252>
    6c02:	4b15      	ldr	r3, [pc, #84]	; (6c58 <bt_le_sync+0x288>)
    6c04:	681b      	ldr	r3, [r3, #0]
    6c06:	2b00      	cmp	r3, #0
    6c08:	d0f3      	beq.n	6bf2 <bt_le_sync+0x222>
    6c0a:	e00a      	b.n	6c22 <bt_le_sync+0x252>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    6c0c:	bf00      	nop
    6c0e:	4b19      	ldr	r3, [pc, #100]	; (6c74 <bt_le_sync+0x2a4>)
    6c10:	681b      	ldr	r3, [r3, #0]
    6c12:	f003 0301 	and.w	r3, r3, #1
    6c16:	2b00      	cmp	r3, #0
    6c18:	d003      	beq.n	6c22 <bt_le_sync+0x252>
    6c1a:	4b0f      	ldr	r3, [pc, #60]	; (6c58 <bt_le_sync+0x288>)
    6c1c:	681b      	ldr	r3, [r3, #0]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d0f5      	beq.n	6c0e <bt_le_sync+0x23e>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6c22:	4a15      	ldr	r2, [pc, #84]	; (6c78 <bt_le_sync+0x2a8>)
    6c24:	4b14      	ldr	r3, [pc, #80]	; (6c78 <bt_le_sync+0x2a8>)
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	f023 0301 	bic.w	r3, r3, #1
    6c2c:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6c2e:	2304      	movs	r3, #4
    6c30:	66fb      	str	r3, [r7, #108]	; 0x6c
    6c32:	e058      	b.n	6ce6 <bt_le_sync+0x316>
    6c34:	10000a42 	.word	0x10000a42
    6c38:	10000a3e 	.word	0x10000a3e
    6c3c:	10000458 	.word	0x10000458
    6c40:	e000e100 	.word	0xe000e100
    6c44:	2009c03c 	.word	0x2009c03c
    6c48:	10000a44 	.word	0x10000a44
    6c4c:	1000049c 	.word	0x1000049c
    6c50:	10000a46 	.word	0x10000a46
    6c54:	10000b00 	.word	0x10000b00
    6c58:	100010f4 	.word	0x100010f4
    6c5c:	1000097d 	.word	0x1000097d
    6c60:	10000a3f 	.word	0x10000a3f
    6c64:	10000a48 	.word	0x10000a48
    6c68:	0000b59c 	.word	0x0000b59c
    6c6c:	100010c0 	.word	0x100010c0
    6c70:	50004104 	.word	0x50004104
    6c74:	50004110 	.word	0x50004110
    6c78:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    6c7c:	4aa6      	ldr	r2, [pc, #664]	; (6f18 <bt_le_sync+0x548>)
    6c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6c80:	4413      	add	r3, r2
    6c82:	781b      	ldrb	r3, [r3, #0]
    6c84:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6c88:	3301      	adds	r3, #1
    6c8a:	49a3      	ldr	r1, [pc, #652]	; (6f18 <bt_le_sync+0x548>)
    6c8c:	5ccb      	ldrb	r3, [r1, r3]
    6c8e:	041b      	lsls	r3, r3, #16
    6c90:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    6c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6c94:	3302      	adds	r3, #2
    6c96:	49a0      	ldr	r1, [pc, #640]	; (6f18 <bt_le_sync+0x548>)
    6c98:	5ccb      	ldrb	r3, [r1, r3]
    6c9a:	021b      	lsls	r3, r3, #8
    6c9c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6c9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6ca0:	3203      	adds	r2, #3
    6ca2:	499d      	ldr	r1, [pc, #628]	; (6f18 <bt_le_sync+0x548>)
    6ca4:	5c8a      	ldrb	r2, [r1, r2]
    6ca6:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6ca8:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6cac:	2b00      	cmp	r3, #0
    6cae:	da00      	bge.n	6cb2 <bt_le_sync+0x2e2>
    6cb0:	3303      	adds	r3, #3
    6cb2:	109b      	asrs	r3, r3, #2
    6cb4:	1c5c      	adds	r4, r3, #1
    6cb6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6cb8:	f002 ff8e 	bl	9bd8 <rbit>
    6cbc:	4601      	mov	r1, r0
    6cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	da00      	bge.n	6cc6 <bt_le_sync+0x2f6>
    6cc4:	3303      	adds	r3, #3
    6cc6:	109b      	asrs	r3, r3, #2
    6cc8:	009b      	lsls	r3, r3, #2
    6cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6ccc:	4413      	add	r3, r2
    6cce:	681b      	ldr	r3, [r3, #0]
    6cd0:	ea81 0203 	eor.w	r2, r1, r3
    6cd4:	00a3      	lsls	r3, r4, #2
    6cd6:	f107 0170 	add.w	r1, r7, #112	; 0x70
    6cda:	440b      	add	r3, r1
    6cdc:	f843 2c68 	str.w	r2, [r3, #-104]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6ce2:	3304      	adds	r3, #4
    6ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
    6ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6ce8:	2b2b      	cmp	r3, #43	; 0x2b
    6cea:	ddc7      	ble.n	6c7c <bt_le_sync+0x2ac>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6cec:	4b8b      	ldr	r3, [pc, #556]	; (6f1c <bt_le_sync+0x54c>)
    6cee:	691b      	ldr	r3, [r3, #16]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	d023      	beq.n	6d3c <bt_le_sync+0x36c>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6cf4:	4b89      	ldr	r3, [pc, #548]	; (6f1c <bt_le_sync+0x54c>)
    6cf6:	68d9      	ldr	r1, [r3, #12]
    6cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6cfa:	1d1a      	adds	r2, r3, #4
    6cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6cfe:	4608      	mov	r0, r1
    6d00:	4611      	mov	r1, r2
    6d02:	461a      	mov	r2, r3
    6d04:	f001 fe44 	bl	8990 <btle_crcgen_lut>
    6d08:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    6d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6d0c:	3306      	adds	r3, #6
    6d0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6d10:	4413      	add	r3, r2
    6d12:	781b      	ldrb	r3, [r3, #0]
    6d14:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6d18:	3305      	adds	r3, #5
    6d1a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6d1c:	440b      	add	r3, r1
    6d1e:	781b      	ldrb	r3, [r3, #0]
    6d20:	021b      	lsls	r3, r3, #8
    6d22:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6d24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6d26:	3204      	adds	r2, #4
    6d28:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6d2a:	440a      	add	r2, r1
    6d2c:	7812      	ldrb	r2, [r2, #0]
    6d2e:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6d30:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    6d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6d36:	429a      	cmp	r2, r3
    6d38:	d000      	beq.n	6d3c <bt_le_sync+0x36c>
				goto rx_flush;
    6d3a:	e01d      	b.n	6d78 <bt_le_sync+0x3a8>
		}


		RXLED_SET;
    6d3c:	4b78      	ldr	r3, [pc, #480]	; (6f20 <bt_le_sync+0x550>)
    6d3e:	2210      	movs	r2, #16
    6d40:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    6d42:	4b78      	ldr	r3, [pc, #480]	; (6f24 <bt_le_sync+0x554>)
    6d44:	681b      	ldr	r3, [r3, #0]
    6d46:	f107 0208 	add.w	r2, r7, #8
    6d4a:	4610      	mov	r0, r2
    6d4c:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    6d4e:	f107 0308 	add.w	r3, r7, #8
    6d52:	2001      	movs	r0, #1
    6d54:	4619      	mov	r1, r3
    6d56:	f7fd fd09 	bl	476c <enqueue>
		enqueue_rssi();
    6d5a:	f7fd fc6d 	bl	4638 <enqueue_rssi>
		le.last_packet = CLK100NS;
    6d5e:	4b72      	ldr	r3, [pc, #456]	; (6f28 <bt_le_sync+0x558>)
    6d60:	681b      	ldr	r3, [r3, #0]
    6d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6d66:	f640 4235 	movw	r2, #3125	; 0xc35
    6d6a:	fb02 f203 	mul.w	r2, r2, r3
    6d6e:	4b6f      	ldr	r3, [pc, #444]	; (6f2c <bt_le_sync+0x55c>)
    6d70:	681b      	ldr	r3, [r3, #0]
    6d72:	4413      	add	r3, r2
    6d74:	4a69      	ldr	r2, [pc, #420]	; (6f1c <bt_le_sync+0x54c>)
    6d76:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    6d78:	2061      	movs	r0, #97	; 0x61
    6d7a:	f003 f9c1 	bl	a100 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6d7e:	bf00      	nop
    6d80:	f003 f9b4 	bl	a0ec <cc2400_status>
    6d84:	4603      	mov	r3, r0
    6d86:	f003 0304 	and.w	r3, r3, #4
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d0f8      	beq.n	6d80 <bt_le_sync+0x3b0>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6d8e:	4a68      	ldr	r2, [pc, #416]	; (6f30 <bt_le_sync+0x560>)
    6d90:	4b67      	ldr	r3, [pc, #412]	; (6f30 <bt_le_sync+0x560>)
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	f023 0301 	bic.w	r3, r3, #1
    6d98:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6d9a:	e003      	b.n	6da4 <bt_le_sync+0x3d4>
			u8 tmp = (u8)DIO_SSP_DR;
    6d9c:	4b65      	ldr	r3, [pc, #404]	; (6f34 <bt_le_sync+0x564>)
    6d9e:	681b      	ldr	r3, [r3, #0]
    6da0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6da4:	4b64      	ldr	r3, [pc, #400]	; (6f38 <bt_le_sync+0x568>)
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	f003 0304 	and.w	r3, r3, #4
    6dac:	2b00      	cmp	r3, #0
    6dae:	d1f5      	bne.n	6d9c <bt_le_sync+0x3cc>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6db0:	4b5d      	ldr	r3, [pc, #372]	; (6f28 <bt_le_sync+0x558>)
    6db2:	681b      	ldr	r3, [r3, #0]
    6db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6db8:	f640 4235 	movw	r2, #3125	; 0xc35
    6dbc:	fb02 f203 	mul.w	r2, r2, r3
    6dc0:	4b5a      	ldr	r3, [pc, #360]	; (6f2c <bt_le_sync+0x55c>)
    6dc2:	681b      	ldr	r3, [r3, #0]
    6dc4:	4413      	add	r3, r2
    6dc6:	66bb      	str	r3, [r7, #104]	; 0x68
		if (now < le.last_packet)
    6dc8:	4b54      	ldr	r3, [pc, #336]	; (6f1c <bt_le_sync+0x54c>)
    6dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6dce:	429a      	cmp	r2, r3
    6dd0:	d905      	bls.n	6dde <bt_le_sync+0x40e>
			now += 3276800000; // handle rollover
    6dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6dd4:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6dd8:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6ddc:	66bb      	str	r3, [r7, #104]	; 0x68
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6dde:	4b4f      	ldr	r3, [pc, #316]	; (6f1c <bt_le_sync+0x54c>)
    6de0:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6de2:	2b03      	cmp	r3, #3
    6de4:	d003      	beq.n	6dee <bt_le_sync+0x41e>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6de6:	4b4d      	ldr	r3, [pc, #308]	; (6f1c <bt_le_sync+0x54c>)
    6de8:	7d1b      	ldrb	r3, [r3, #20]
    6dea:	2b02      	cmp	r3, #2
    6dec:	d106      	bne.n	6dfc <bt_le_sync+0x42c>
			&& (now - le.last_packet > 50000000))
    6dee:	4b4b      	ldr	r3, [pc, #300]	; (6f1c <bt_le_sync+0x54c>)
    6df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6df2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    6df4:	1ad3      	subs	r3, r2, r3
    6df6:	4a51      	ldr	r2, [pc, #324]	; (6f3c <bt_le_sync+0x56c>)
    6df8:	4293      	cmp	r3, r2
    6dfa:	d803      	bhi.n	6e04 <bt_le_sync+0x434>
			// jam finished
			|| (le_jam_count == 1)
    6dfc:	4b50      	ldr	r3, [pc, #320]	; (6f40 <bt_le_sync+0x570>)
    6dfe:	681b      	ldr	r3, [r3, #0]
    6e00:	2b01      	cmp	r3, #1
    6e02:	d137      	bne.n	6e74 <bt_le_sync+0x4a4>
			)
		{
			reset_le();
    6e04:	f7ff fc0c 	bl	6620 <reset_le>
			le_jam_count = 0;
    6e08:	4b4d      	ldr	r3, [pc, #308]	; (6f40 <bt_le_sync+0x570>)
    6e0a:	2200      	movs	r2, #0
    6e0c:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6e0e:	4b4d      	ldr	r3, [pc, #308]	; (6f44 <bt_le_sync+0x574>)
    6e10:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e14:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6e16:	4b4c      	ldr	r3, [pc, #304]	; (6f48 <bt_le_sync+0x578>)
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	b2db      	uxtb	r3, r3
    6e1c:	2b01      	cmp	r3, #1
    6e1e:	d106      	bne.n	6e2e <bt_le_sync+0x45e>
				jam_mode = JAM_NONE;
    6e20:	4b49      	ldr	r3, [pc, #292]	; (6f48 <bt_le_sync+0x578>)
    6e22:	2200      	movs	r2, #0
    6e24:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6e26:	4b49      	ldr	r3, [pc, #292]	; (6f4c <bt_le_sync+0x57c>)
    6e28:	2200      	movs	r2, #0
    6e2a:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6e2c:	e066      	b.n	6efc <bt_le_sync+0x52c>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6e2e:	79fb      	ldrb	r3, [r7, #7]
    6e30:	2b0a      	cmp	r3, #10
    6e32:	d101      	bne.n	6e38 <bt_le_sync+0x468>
				goto cleanup;
    6e34:	bf00      	nop
    6e36:	e061      	b.n	6efc <bt_le_sync+0x52c>

			le.link_state = LINK_LISTENING;
    6e38:	4b38      	ldr	r3, [pc, #224]	; (6f1c <bt_le_sync+0x54c>)
    6e3a:	2201      	movs	r2, #1
    6e3c:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6e3e:	2064      	movs	r0, #100	; 0x64
    6e40:	f003 f95e 	bl	a100 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6e44:	bf00      	nop
    6e46:	f003 f951 	bl	a0ec <cc2400_status>
    6e4a:	4603      	mov	r3, r0
    6e4c:	f003 0304 	and.w	r3, r3, #4
    6e50:	2b00      	cmp	r3, #0
    6e52:	d1f8      	bne.n	6e46 <bt_le_sync+0x476>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6e54:	4b3e      	ldr	r3, [pc, #248]	; (6f50 <bt_le_sync+0x580>)
    6e56:	881b      	ldrh	r3, [r3, #0]
    6e58:	b29b      	uxth	r3, r3
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d003      	beq.n	6e66 <bt_le_sync+0x496>
    6e5e:	4b3c      	ldr	r3, [pc, #240]	; (6f50 <bt_le_sync+0x580>)
    6e60:	881b      	ldrh	r3, [r3, #0]
    6e62:	b29b      	uxth	r3, r3
    6e64:	e001      	b.n	6e6a <bt_le_sync+0x49a>
    6e66:	f640 1362 	movw	r3, #2402	; 0x962
    6e6a:	4a3a      	ldr	r2, [pc, #232]	; (6f54 <bt_le_sync+0x584>)
    6e6c:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6e6e:	4b3a      	ldr	r3, [pc, #232]	; (6f58 <bt_le_sync+0x588>)
    6e70:	2201      	movs	r2, #1
    6e72:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6e74:	4b29      	ldr	r3, [pc, #164]	; (6f1c <bt_le_sync+0x54c>)
    6e76:	88db      	ldrh	r3, [r3, #6]
    6e78:	202c      	movs	r0, #44	; 0x2c
    6e7a:	4619      	mov	r1, r3
    6e7c:	f003 f87e 	bl	9f7c <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6e80:	4b26      	ldr	r3, [pc, #152]	; (6f1c <bt_le_sync+0x54c>)
    6e82:	889b      	ldrh	r3, [r3, #4]
    6e84:	202d      	movs	r0, #45	; 0x2d
    6e86:	4619      	mov	r1, r3
    6e88:	f003 f878 	bl	9f7c <cc2400_set>

		if (do_hop)
    6e8c:	4b33      	ldr	r3, [pc, #204]	; (6f5c <bt_le_sync+0x58c>)
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	b2db      	uxtb	r3, r3
    6e92:	2b00      	cmp	r3, #0
    6e94:	d001      	beq.n	6e9a <bt_le_sync+0x4ca>
			hop();
    6e96:	f7ff f9e5 	bl	6264 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6e9a:	4b29      	ldr	r3, [pc, #164]	; (6f40 <bt_le_sync+0x570>)
    6e9c:	681b      	ldr	r3, [r3, #0]
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	dd07      	ble.n	6eb2 <bt_le_sync+0x4e2>
			le_jam();
    6ea2:	f7ff f995 	bl	61d0 <le_jam>
			--le_jam_count;
    6ea6:	4b26      	ldr	r3, [pc, #152]	; (6f40 <bt_le_sync+0x570>)
    6ea8:	681b      	ldr	r3, [r3, #0]
    6eaa:	3b01      	subs	r3, #1
    6eac:	4a24      	ldr	r2, [pc, #144]	; (6f40 <bt_le_sync+0x570>)
    6eae:	6013      	str	r3, [r2, #0]
    6eb0:	e017      	b.n	6ee2 <bt_le_sync+0x512>
		} else {
			/* RX mode */
			dma_init_le();
    6eb2:	f7fe fd51 	bl	5958 <dma_init_le>
			dio_ssp_start();
    6eb6:	f7fe feb9 	bl	5c2c <dio_ssp_start>

			if (restart_jamming) {
    6eba:	4b27      	ldr	r3, [pc, #156]	; (6f58 <bt_le_sync+0x588>)
    6ebc:	681b      	ldr	r3, [r3, #0]
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	d00c      	beq.n	6edc <bt_le_sync+0x50c>
				cc2400_rx_sync(rbit(le.access_address));
    6ec2:	4b16      	ldr	r3, [pc, #88]	; (6f1c <bt_le_sync+0x54c>)
    6ec4:	681b      	ldr	r3, [r3, #0]
    6ec6:	4618      	mov	r0, r3
    6ec8:	f002 fe86 	bl	9bd8 <rbit>
    6ecc:	4603      	mov	r3, r0
    6ece:	4618      	mov	r0, r3
    6ed0:	f7fe ffc6 	bl	5e60 <cc2400_rx_sync>
				restart_jamming = 0;
    6ed4:	4b20      	ldr	r3, [pc, #128]	; (6f58 <bt_le_sync+0x588>)
    6ed6:	2200      	movs	r2, #0
    6ed8:	601a      	str	r2, [r3, #0]
    6eda:	e002      	b.n	6ee2 <bt_le_sync+0x512>
			} else {
				cc2400_strobe(SRX);
    6edc:	2062      	movs	r0, #98	; 0x62
    6ede:	f003 f90f 	bl	a100 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6ee2:	4b1f      	ldr	r3, [pc, #124]	; (6f60 <bt_le_sync+0x590>)
    6ee4:	2200      	movs	r2, #0
    6ee6:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ee8:	4b1e      	ldr	r3, [pc, #120]	; (6f64 <bt_le_sync+0x594>)
    6eea:	2200      	movs	r2, #0
    6eec:	601a      	str	r2, [r3, #0]
	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
	
	//gjlee
	cs_trigger_enable();

	while (requested_mode == active_mode) {
    6eee:	4b17      	ldr	r3, [pc, #92]	; (6f4c <bt_le_sync+0x57c>)
    6ef0:	781b      	ldrb	r3, [r3, #0]
    6ef2:	b2db      	uxtb	r3, r3
    6ef4:	79fa      	ldrb	r2, [r7, #7]
    6ef6:	429a      	cmp	r2, r3
    6ef8:	f43f ad95 	beq.w	6a26 <bt_le_sync+0x56>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6efc:	4b1a      	ldr	r3, [pc, #104]	; (6f68 <bt_le_sync+0x598>)
    6efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6f02:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6f04:	f7fe ff26 	bl	5d54 <cc2400_idle>
	dio_ssp_stop();
    6f08:	f7fe fec0 	bl	5c8c <dio_ssp_stop>
	cs_trigger_disable();
    6f0c:	f7fd fdd6 	bl	4abc <cs_trigger_disable>
}
    6f10:	3774      	adds	r7, #116	; 0x74
    6f12:	46bd      	mov	sp, r7
    6f14:	bd90      	pop	{r4, r7, pc}
    6f16:	bf00      	nop
    6f18:	100010c0 	.word	0x100010c0
    6f1c:	10000458 	.word	0x10000458
    6f20:	2009c038 	.word	0x2009c038
    6f24:	1000099c 	.word	0x1000099c
    6f28:	10000c2c 	.word	0x10000c2c
    6f2c:	40004008 	.word	0x40004008
    6f30:	40030024 	.word	0x40030024
    6f34:	40030008 	.word	0x40030008
    6f38:	4003000c 	.word	0x4003000c
    6f3c:	02faf080 	.word	0x02faf080
    6f40:	10000994 	.word	0x10000994
    6f44:	2009c03c 	.word	0x2009c03c
    6f48:	10000a40 	.word	0x10000a40
    6f4c:	10000a3f 	.word	0x10000a3f
    6f50:	10000a46 	.word	0x10000a46
    6f54:	1000049c 	.word	0x1000049c
    6f58:	10000a50 	.word	0x10000a50
    6f5c:	1000097d 	.word	0x1000097d
    6f60:	10000b00 	.word	0x10000b00
    6f64:	100010f4 	.word	0x100010f4
    6f68:	e000e180 	.word	0xe000e180

00006f6c <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6f6c:	b580      	push	{r7, lr}
    6f6e:	b08c      	sub	sp, #48	; 0x30
    6f70:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6f72:	4b6c      	ldr	r3, [pc, #432]	; (7124 <cb_follow_le+0x1b8>)
    6f74:	881b      	ldrh	r3, [r3, #0]
    6f76:	b29b      	uxth	r3, r3
    6f78:	b2db      	uxtb	r3, r3
    6f7a:	3b62      	subs	r3, #98	; 0x62
    6f7c:	b2db      	uxtb	r3, r3
    6f7e:	4618      	mov	r0, r3
    6f80:	f001 fc02 	bl	8788 <btle_channel_index>
    6f84:	4603      	mov	r3, r0
    6f86:	461a      	mov	r2, r3
    6f88:	4b67      	ldr	r3, [pc, #412]	; (7128 <cb_follow_le+0x1bc>)
    6f8a:	5c9b      	ldrb	r3, [r3, r2]
    6f8c:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6f8e:	2300      	movs	r3, #0
    6f90:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6f92:	2300      	movs	r3, #0
    6f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    6f96:	e00e      	b.n	6fb6 <cb_follow_le+0x4a>
		access_address >>= 1;
    6f98:	69fb      	ldr	r3, [r7, #28]
    6f9a:	085b      	lsrs	r3, r3, #1
    6f9c:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6f9e:	4a63      	ldr	r2, [pc, #396]	; (712c <cb_follow_le+0x1c0>)
    6fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fa2:	4413      	add	r3, r2
    6fa4:	781b      	ldrb	r3, [r3, #0]
    6fa6:	07db      	lsls	r3, r3, #31
    6fa8:	461a      	mov	r2, r3
    6faa:	69fb      	ldr	r3, [r7, #28]
    6fac:	4313      	orrs	r3, r2
    6fae:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fb2:	3301      	adds	r3, #1
    6fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    6fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fb8:	2b1e      	cmp	r3, #30
    6fba:	dded      	ble.n	6f98 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6fbc:	231f      	movs	r3, #31
    6fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    6fc0:	e0a6      	b.n	7110 <cb_follow_le+0x1a4>
		access_address >>= 1;
    6fc2:	69fb      	ldr	r3, [r7, #28]
    6fc4:	085b      	lsrs	r3, r3, #1
    6fc6:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6fc8:	4a58      	ldr	r2, [pc, #352]	; (712c <cb_follow_le+0x1c0>)
    6fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fcc:	4413      	add	r3, r2
    6fce:	781b      	ldrb	r3, [r3, #0]
    6fd0:	07db      	lsls	r3, r3, #31
    6fd2:	461a      	mov	r2, r3
    6fd4:	69fb      	ldr	r3, [r7, #28]
    6fd6:	4313      	orrs	r3, r2
    6fd8:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6fda:	4b55      	ldr	r3, [pc, #340]	; (7130 <cb_follow_le+0x1c4>)
    6fdc:	681a      	ldr	r2, [r3, #0]
    6fde:	69fb      	ldr	r3, [r7, #28]
    6fe0:	429a      	cmp	r2, r3
    6fe2:	f040 8092 	bne.w	710a <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    6fe6:	2300      	movs	r3, #0
    6fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    6fea:	e048      	b.n	707e <cb_follow_le+0x112>
				u8 byte = 0;
    6fec:	2300      	movs	r3, #0
    6fee:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6ff0:	2300      	movs	r3, #0
    6ff2:	627b      	str	r3, [r7, #36]	; 0x24
    6ff4:	e037      	b.n	7066 <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6ff8:	00da      	lsls	r2, r3, #3
    6ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6ffc:	441a      	add	r2, r3
    6ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7000:	4413      	add	r3, r2
    7002:	3b1f      	subs	r3, #31
    7004:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    7006:	693b      	ldr	r3, [r7, #16]
    7008:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    700c:	db00      	blt.n	7010 <cb_follow_le+0xa4>
    700e:	e02d      	b.n	706c <cb_follow_le+0x100>
					int bit = unpacked[offset];
    7010:	4a46      	ldr	r2, [pc, #280]	; (712c <cb_follow_le+0x1c0>)
    7012:	693b      	ldr	r3, [r7, #16]
    7014:	4413      	add	r3, r2
    7016:	781b      	ldrb	r3, [r3, #0]
    7018:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    701c:	2b03      	cmp	r3, #3
    701e:	dd16      	ble.n	704e <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    7020:	4a44      	ldr	r2, [pc, #272]	; (7134 <cb_follow_le+0x1c8>)
    7022:	6a3b      	ldr	r3, [r7, #32]
    7024:	4413      	add	r3, r2
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	461a      	mov	r2, r3
    702a:	697b      	ldr	r3, [r7, #20]
    702c:	4053      	eors	r3, r2
    702e:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    7030:	6a3b      	ldr	r3, [r7, #32]
    7032:	3301      	adds	r3, #1
    7034:	4619      	mov	r1, r3
    7036:	4b40      	ldr	r3, [pc, #256]	; (7138 <cb_follow_le+0x1cc>)
    7038:	fba1 2303 	umull	r2, r3, r1, r3
    703c:	1ac8      	subs	r0, r1, r3
    703e:	0840      	lsrs	r0, r0, #1
    7040:	4403      	add	r3, r0
    7042:	099a      	lsrs	r2, r3, #6
    7044:	4613      	mov	r3, r2
    7046:	01db      	lsls	r3, r3, #7
    7048:	1a9b      	subs	r3, r3, r2
    704a:	1aca      	subs	r2, r1, r3
    704c:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    704e:	697a      	ldr	r2, [r7, #20]
    7050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7052:	fa02 f303 	lsl.w	r3, r2, r3
    7056:	b2da      	uxtb	r2, r3
    7058:	7efb      	ldrb	r3, [r7, #27]
    705a:	4313      	orrs	r3, r2
    705c:	b2db      	uxtb	r3, r3
    705e:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    7060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7062:	3301      	adds	r3, #1
    7064:	627b      	str	r3, [r7, #36]	; 0x24
    7066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7068:	2b07      	cmp	r3, #7
    706a:	ddc4      	ble.n	6ff6 <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    706c:	4b33      	ldr	r3, [pc, #204]	; (713c <cb_follow_le+0x1d0>)
    706e:	681a      	ldr	r2, [r3, #0]
    7070:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7072:	4413      	add	r3, r2
    7074:	7efa      	ldrb	r2, [r7, #27]
    7076:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    7078:	6abb      	ldr	r3, [r7, #40]	; 0x28
    707a:	3301      	adds	r3, #1
    707c:	62bb      	str	r3, [r7, #40]	; 0x28
    707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7080:	2b2d      	cmp	r3, #45	; 0x2d
    7082:	ddb3      	ble.n	6fec <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    7084:	4b2a      	ldr	r3, [pc, #168]	; (7130 <cb_follow_le+0x1c4>)
    7086:	691b      	ldr	r3, [r3, #16]
    7088:	2b00      	cmp	r3, #0
    708a:	d02e      	beq.n	70ea <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    708c:	4b2b      	ldr	r3, [pc, #172]	; (713c <cb_follow_le+0x1d0>)
    708e:	681b      	ldr	r3, [r3, #0]
    7090:	3305      	adds	r3, #5
    7092:	781b      	ldrb	r3, [r3, #0]
    7094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7098:	3302      	adds	r3, #2
    709a:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    709c:	4b24      	ldr	r3, [pc, #144]	; (7130 <cb_follow_le+0x1c4>)
    709e:	68da      	ldr	r2, [r3, #12]
    70a0:	4b26      	ldr	r3, [pc, #152]	; (713c <cb_follow_le+0x1d0>)
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	3304      	adds	r3, #4
    70a6:	4610      	mov	r0, r2
    70a8:	4619      	mov	r1, r3
    70aa:	68fa      	ldr	r2, [r7, #12]
    70ac:	f001 fc70 	bl	8990 <btle_crcgen_lut>
    70b0:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    70b2:	4b22      	ldr	r3, [pc, #136]	; (713c <cb_follow_le+0x1d0>)
    70b4:	681a      	ldr	r2, [r3, #0]
    70b6:	68fb      	ldr	r3, [r7, #12]
    70b8:	3306      	adds	r3, #6
    70ba:	4413      	add	r3, r2
    70bc:	781b      	ldrb	r3, [r3, #0]
    70be:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    70c0:	4b1e      	ldr	r3, [pc, #120]	; (713c <cb_follow_le+0x1d0>)
    70c2:	6819      	ldr	r1, [r3, #0]
    70c4:	68fb      	ldr	r3, [r7, #12]
    70c6:	3305      	adds	r3, #5
    70c8:	440b      	add	r3, r1
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	021b      	lsls	r3, r3, #8
    70ce:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    70d0:	4a1a      	ldr	r2, [pc, #104]	; (713c <cb_follow_le+0x1d0>)
    70d2:	6812      	ldr	r2, [r2, #0]
    70d4:	68f9      	ldr	r1, [r7, #12]
    70d6:	3104      	adds	r1, #4
    70d8:	440a      	add	r2, r1
    70da:	7812      	ldrb	r2, [r2, #0]
    70dc:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    70de:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    70e0:	68ba      	ldr	r2, [r7, #8]
    70e2:	687b      	ldr	r3, [r7, #4]
    70e4:	429a      	cmp	r2, r3
    70e6:	d000      	beq.n	70ea <cb_follow_le+0x17e>
					break;
    70e8:	e017      	b.n	711a <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    70ea:	4b14      	ldr	r3, [pc, #80]	; (713c <cb_follow_le+0x1d0>)
    70ec:	681b      	ldr	r3, [r3, #0]
    70ee:	2001      	movs	r0, #1
    70f0:	4619      	mov	r1, r3
    70f2:	f7fd fb3b 	bl	476c <enqueue>
			RXLED_SET;
    70f6:	4b12      	ldr	r3, [pc, #72]	; (7140 <cb_follow_le+0x1d4>)
    70f8:	2210      	movs	r2, #16
    70fa:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    70fc:	4b11      	ldr	r3, [pc, #68]	; (7144 <cb_follow_le+0x1d8>)
    70fe:	681b      	ldr	r3, [r3, #0]
    7100:	4a0e      	ldr	r2, [pc, #56]	; (713c <cb_follow_le+0x1d0>)
    7102:	6812      	ldr	r2, [r2, #0]
    7104:	4610      	mov	r0, r2
    7106:	4798      	blx	r3

			break;
    7108:	e007      	b.n	711a <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    710c:	3301      	adds	r3, #1
    710e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7112:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    7116:	f6ff af54 	blt.w	6fc2 <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    711a:	2301      	movs	r3, #1
}
    711c:	4618      	mov	r0, r3
    711e:	3730      	adds	r7, #48	; 0x30
    7120:	46bd      	mov	sp, r7
    7122:	bd80      	pop	{r7, pc}
    7124:	1000049c 	.word	0x1000049c
    7128:	0000b54c 	.word	0x0000b54c
    712c:	10000d48 	.word	0x10000d48
    7130:	10000458 	.word	0x10000458
    7134:	0000b4cc 	.word	0x0000b4cc
    7138:	02040811 	.word	0x02040811
    713c:	10000454 	.word	0x10000454
    7140:	2009c038 	.word	0x2009c038
    7144:	1000099c 	.word	0x1000099c

00007148 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    7148:	b580      	push	{r7, lr}
    714a:	b08a      	sub	sp, #40	; 0x28
    714c:	af00      	add	r7, sp, #0
    714e:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    7150:	2300      	movs	r3, #0
    7152:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    7154:	687b      	ldr	r3, [r7, #4]
    7156:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	791b      	ldrb	r3, [r3, #4]
    715c:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    715e:	687b      	ldr	r3, [r7, #4]
    7160:	3305      	adds	r3, #5
    7162:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    7164:	687b      	ldr	r3, [r7, #4]
    7166:	3306      	adds	r3, #6
    7168:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    716a:	697b      	ldr	r3, [r7, #20]
    716c:	781b      	ldrb	r3, [r3, #0]
    716e:	3306      	adds	r3, #6
    7170:	461a      	mov	r2, r3
    7172:	687b      	ldr	r3, [r7, #4]
    7174:	4413      	add	r3, r2
    7176:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    7178:	4b8b      	ldr	r3, [pc, #556]	; (73a8 <connection_follow_cb+0x260>)
    717a:	7d1b      	ldrb	r3, [r3, #20]
    717c:	2b02      	cmp	r3, #2
    717e:	d11c      	bne.n	71ba <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    7180:	4b89      	ldr	r3, [pc, #548]	; (73a8 <connection_follow_cb+0x260>)
    7182:	2203      	movs	r2, #3
    7184:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    7186:	4b89      	ldr	r3, [pc, #548]	; (73ac <connection_follow_cb+0x264>)
    7188:	681b      	ldr	r3, [r3, #0]
    718a:	4a87      	ldr	r2, [pc, #540]	; (73a8 <connection_follow_cb+0x260>)
    718c:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    718e:	4b86      	ldr	r3, [pc, #536]	; (73a8 <connection_follow_cb+0x260>)
    7190:	8bdb      	ldrh	r3, [r3, #30]
    7192:	3b01      	subs	r3, #1
    7194:	b29a      	uxth	r2, r3
    7196:	4b84      	ldr	r3, [pc, #528]	; (73a8 <connection_follow_cb+0x260>)
    7198:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    719a:	4b83      	ldr	r3, [pc, #524]	; (73a8 <connection_follow_cb+0x260>)
    719c:	2200      	movs	r2, #0
    719e:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    71a0:	4b81      	ldr	r3, [pc, #516]	; (73a8 <connection_follow_cb+0x260>)
    71a2:	2200      	movs	r2, #0
    71a4:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    71a6:	4b82      	ldr	r3, [pc, #520]	; (73b0 <connection_follow_cb+0x268>)
    71a8:	781b      	ldrb	r3, [r3, #0]
    71aa:	b2db      	uxtb	r3, r3
    71ac:	2b00      	cmp	r3, #0
    71ae:	f000 80f7 	beq.w	73a0 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    71b2:	4b80      	ldr	r3, [pc, #512]	; (73b4 <connection_follow_cb+0x26c>)
    71b4:	2228      	movs	r2, #40	; 0x28
    71b6:	601a      	str	r2, [r3, #0]
    71b8:	e0f2      	b.n	73a0 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    71ba:	4b7b      	ldr	r3, [pc, #492]	; (73a8 <connection_follow_cb+0x260>)
    71bc:	7d1b      	ldrb	r3, [r3, #20]
    71be:	2b03      	cmp	r3, #3
    71c0:	d16f      	bne.n	72a2 <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    71c2:	7efb      	ldrb	r3, [r7, #27]
    71c4:	f003 0303 	and.w	r3, r3, #3
    71c8:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    71ca:	4b77      	ldr	r3, [pc, #476]	; (73a8 <connection_follow_cb+0x260>)
    71cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    71ce:	2b00      	cmp	r3, #0
    71d0:	d021      	beq.n	7216 <connection_follow_cb+0xce>
    71d2:	4b75      	ldr	r3, [pc, #468]	; (73a8 <connection_follow_cb+0x260>)
    71d4:	8c1b      	ldrh	r3, [r3, #32]
    71d6:	b29a      	uxth	r2, r3
    71d8:	4b73      	ldr	r3, [pc, #460]	; (73a8 <connection_follow_cb+0x260>)
    71da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    71dc:	429a      	cmp	r2, r3
    71de:	d11a      	bne.n	7216 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    71e0:	4b72      	ldr	r3, [pc, #456]	; (73ac <connection_follow_cb+0x264>)
    71e2:	681b      	ldr	r3, [r3, #0]
    71e4:	4a70      	ldr	r2, [pc, #448]	; (73a8 <connection_follow_cb+0x260>)
    71e6:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    71e8:	4b6f      	ldr	r3, [pc, #444]	; (73a8 <connection_follow_cb+0x260>)
    71ea:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    71ec:	4b6e      	ldr	r3, [pc, #440]	; (73a8 <connection_follow_cb+0x260>)
    71ee:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    71f0:	4b6d      	ldr	r3, [pc, #436]	; (73a8 <connection_follow_cb+0x260>)
    71f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    71f4:	3b01      	subs	r3, #1
    71f6:	b29a      	uxth	r2, r3
    71f8:	4b6b      	ldr	r3, [pc, #428]	; (73a8 <connection_follow_cb+0x260>)
    71fa:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    71fc:	4b6a      	ldr	r3, [pc, #424]	; (73a8 <connection_follow_cb+0x260>)
    71fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    7202:	4b69      	ldr	r3, [pc, #420]	; (73a8 <connection_follow_cb+0x260>)
    7204:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7208:	4b67      	ldr	r3, [pc, #412]	; (73a8 <connection_follow_cb+0x260>)
    720a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    720c:	4b66      	ldr	r3, [pc, #408]	; (73a8 <connection_follow_cb+0x260>)
    720e:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    7210:	4b65      	ldr	r3, [pc, #404]	; (73a8 <connection_follow_cb+0x260>)
    7212:	2200      	movs	r2, #0
    7214:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    7216:	7afb      	ldrb	r3, [r7, #11]
    7218:	2b03      	cmp	r3, #3
    721a:	d141      	bne.n	72a0 <connection_follow_cb+0x158>
    721c:	693b      	ldr	r3, [r7, #16]
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	2b00      	cmp	r3, #0
    7222:	d13d      	bne.n	72a0 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    7224:	687b      	ldr	r3, [r7, #4]
    7226:	79da      	ldrb	r2, [r3, #7]
    7228:	4b5f      	ldr	r3, [pc, #380]	; (73a8 <connection_follow_cb+0x260>)
    722a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    722e:	687b      	ldr	r3, [r7, #4]
    7230:	3308      	adds	r3, #8
    7232:	781b      	ldrb	r3, [r3, #0]
    7234:	b29a      	uxth	r2, r3
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	3309      	adds	r3, #9
    723a:	781b      	ldrb	r3, [r3, #0]
    723c:	b29b      	uxth	r3, r3
    723e:	021b      	lsls	r3, r3, #8
    7240:	b29b      	uxth	r3, r3
    7242:	4413      	add	r3, r2
    7244:	b29a      	uxth	r2, r3
    7246:	4b58      	ldr	r3, [pc, #352]	; (73a8 <connection_follow_cb+0x260>)
    7248:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    724a:	687b      	ldr	r3, [r7, #4]
    724c:	330a      	adds	r3, #10
    724e:	781b      	ldrb	r3, [r3, #0]
    7250:	b29a      	uxth	r2, r3
    7252:	687b      	ldr	r3, [r7, #4]
    7254:	330b      	adds	r3, #11
    7256:	781b      	ldrb	r3, [r3, #0]
    7258:	b29b      	uxth	r3, r3
    725a:	021b      	lsls	r3, r3, #8
    725c:	b29b      	uxth	r3, r3
    725e:	4413      	add	r3, r2
    7260:	b29a      	uxth	r2, r3
    7262:	4b51      	ldr	r3, [pc, #324]	; (73a8 <connection_follow_cb+0x260>)
    7264:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    7266:	687b      	ldr	r3, [r7, #4]
    7268:	3310      	adds	r3, #16
    726a:	781b      	ldrb	r3, [r3, #0]
    726c:	b29a      	uxth	r2, r3
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	3311      	adds	r3, #17
    7272:	781b      	ldrb	r3, [r3, #0]
    7274:	b29b      	uxth	r3, r3
    7276:	021b      	lsls	r3, r3, #8
    7278:	b29b      	uxth	r3, r3
    727a:	4413      	add	r3, r2
    727c:	b29a      	uxth	r2, r3
    727e:	4b4a      	ldr	r3, [pc, #296]	; (73a8 <connection_follow_cb+0x260>)
    7280:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    7282:	4b49      	ldr	r3, [pc, #292]	; (73a8 <connection_follow_cb+0x260>)
    7284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7286:	461a      	mov	r2, r3
    7288:	4b47      	ldr	r3, [pc, #284]	; (73a8 <connection_follow_cb+0x260>)
    728a:	8c1b      	ldrh	r3, [r3, #32]
    728c:	b29b      	uxth	r3, r3
    728e:	1ad3      	subs	r3, r2, r3
    7290:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    7294:	4293      	cmp	r3, r2
    7296:	dc03      	bgt.n	72a0 <connection_follow_cb+0x158>
				le.update_pending = 1;
    7298:	4b43      	ldr	r3, [pc, #268]	; (73a8 <connection_follow_cb+0x260>)
    729a:	2201      	movs	r2, #1
    729c:	629a      	str	r2, [r3, #40]	; 0x28
    729e:	e07f      	b.n	73a0 <connection_follow_cb+0x258>
    72a0:	e07e      	b.n	73a0 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    72a2:	4b41      	ldr	r3, [pc, #260]	; (73a8 <connection_follow_cb+0x260>)
    72a4:	7d1b      	ldrb	r3, [r3, #20]
    72a6:	2b01      	cmp	r3, #1
    72a8:	d17a      	bne.n	73a0 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    72aa:	687b      	ldr	r3, [r7, #4]
    72ac:	3304      	adds	r3, #4
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	f003 030f 	and.w	r3, r3, #15
    72b4:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    72b6:	7abb      	ldrb	r3, [r7, #10]
    72b8:	2b05      	cmp	r3, #5
    72ba:	d171      	bne.n	73a0 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    72bc:	4b3a      	ldr	r3, [pc, #232]	; (73a8 <connection_follow_cb+0x260>)
    72be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    72c0:	2b00      	cmp	r3, #0
    72c2:	d014      	beq.n	72ee <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    72c4:	687b      	ldr	r3, [r7, #4]
    72c6:	3306      	adds	r3, #6
    72c8:	483b      	ldr	r0, [pc, #236]	; (73b8 <connection_follow_cb+0x270>)
    72ca:	4619      	mov	r1, r3
    72cc:	2206      	movs	r2, #6
    72ce:	f004 f80d 	bl	b2ec <memcmp>
    72d2:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    72d4:	2b00      	cmp	r3, #0
    72d6:	d00a      	beq.n	72ee <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    72d8:	687b      	ldr	r3, [r7, #4]
    72da:	330c      	adds	r3, #12
    72dc:	4836      	ldr	r0, [pc, #216]	; (73b8 <connection_follow_cb+0x270>)
    72de:	4619      	mov	r1, r3
    72e0:	2206      	movs	r2, #6
    72e2:	f004 f803 	bl	b2ec <memcmp>
    72e6:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    72e8:	2b00      	cmp	r3, #0
    72ea:	d000      	beq.n	72ee <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    72ec:	e058      	b.n	73a0 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    72ee:	4b2e      	ldr	r3, [pc, #184]	; (73a8 <connection_follow_cb+0x260>)
    72f0:	2202      	movs	r2, #2
    72f2:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    72f4:	4b2c      	ldr	r3, [pc, #176]	; (73a8 <connection_follow_cb+0x260>)
    72f6:	2200      	movs	r2, #0
    72f8:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    72fa:	2300      	movs	r3, #0
    72fc:	627b      	str	r3, [r7, #36]	; 0x24
    72fe:	e011      	b.n	7324 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    7300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7302:	3312      	adds	r3, #18
    7304:	461a      	mov	r2, r3
    7306:	687b      	ldr	r3, [r7, #4]
    7308:	4413      	add	r3, r2
    730a:	781b      	ldrb	r3, [r3, #0]
    730c:	461a      	mov	r2, r3
    730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7310:	00db      	lsls	r3, r3, #3
    7312:	fa02 f303 	lsl.w	r3, r2, r3
    7316:	461a      	mov	r2, r3
    7318:	6a3b      	ldr	r3, [r7, #32]
    731a:	4313      	orrs	r3, r2
    731c:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7320:	3301      	adds	r3, #1
    7322:	627b      	str	r3, [r7, #36]	; 0x24
    7324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7326:	2b03      	cmp	r3, #3
    7328:	ddea      	ble.n	7300 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    732a:	6a38      	ldr	r0, [r7, #32]
    732c:	f7ff f95e 	bl	65ec <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7330:	687b      	ldr	r3, [r7, #4]
    7332:	3318      	adds	r3, #24
    7334:	781b      	ldrb	r3, [r3, #0]
    7336:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	3317      	adds	r3, #23
    733c:	781b      	ldrb	r3, [r3, #0]
    733e:	021b      	lsls	r3, r3, #8
    7340:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    7342:	687a      	ldr	r2, [r7, #4]
    7344:	3216      	adds	r2, #22
    7346:	7812      	ldrb	r2, [r2, #0]
    7348:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    734a:	461a      	mov	r2, r3
    734c:	4b16      	ldr	r3, [pc, #88]	; (73a8 <connection_follow_cb+0x260>)
    734e:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    7350:	4b15      	ldr	r3, [pc, #84]	; (73a8 <connection_follow_cb+0x260>)
    7352:	689b      	ldr	r3, [r3, #8]
    7354:	4618      	mov	r0, r3
    7356:	f002 fc3f 	bl	9bd8 <rbit>
    735a:	4602      	mov	r2, r0
    735c:	4b12      	ldr	r3, [pc, #72]	; (73a8 <connection_follow_cb+0x260>)
    735e:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	7e5a      	ldrb	r2, [r3, #25]
    7364:	4b10      	ldr	r3, [pc, #64]	; (73a8 <connection_follow_cb+0x260>)
    7366:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    736a:	687b      	ldr	r3, [r7, #4]
    736c:	331a      	adds	r3, #26
    736e:	781b      	ldrb	r3, [r3, #0]
    7370:	b29a      	uxth	r2, r3
    7372:	4b0d      	ldr	r3, [pc, #52]	; (73a8 <connection_follow_cb+0x260>)
    7374:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    7376:	687b      	ldr	r3, [r7, #4]
    7378:	331c      	adds	r3, #28
    737a:	781b      	ldrb	r3, [r3, #0]
    737c:	b29a      	uxth	r2, r3
    737e:	4b0a      	ldr	r3, [pc, #40]	; (73a8 <connection_follow_cb+0x260>)
    7380:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    7382:	687b      	ldr	r3, [r7, #4]
    7384:	3327      	adds	r3, #39	; 0x27
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	f003 031f 	and.w	r3, r3, #31
    738c:	b2da      	uxtb	r2, r3
    738e:	4b06      	ldr	r3, [pc, #24]	; (73a8 <connection_follow_cb+0x260>)
    7390:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    7392:	4b05      	ldr	r3, [pc, #20]	; (73a8 <connection_follow_cb+0x260>)
    7394:	7d9a      	ldrb	r2, [r3, #22]
    7396:	4b04      	ldr	r3, [pc, #16]	; (73a8 <connection_follow_cb+0x260>)
    7398:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    739a:	4b08      	ldr	r3, [pc, #32]	; (73bc <connection_follow_cb+0x274>)
    739c:	2201      	movs	r2, #1
    739e:	701a      	strb	r2, [r3, #0]
		}
	}
}
    73a0:	3728      	adds	r7, #40	; 0x28
    73a2:	46bd      	mov	sp, r7
    73a4:	bd80      	pop	{r7, pc}
    73a6:	bf00      	nop
    73a8:	10000458 	.word	0x10000458
    73ac:	10000c2c 	.word	0x10000c2c
    73b0:	10000a40 	.word	0x10000a40
    73b4:	10000994 	.word	0x10000994
    73b8:	1000048c 	.word	0x1000048c
    73bc:	1000097d 	.word	0x1000097d

000073c0 <bt_follow_le>:

void bt_follow_le() {
    73c0:	b580      	push	{r7, lr}
    73c2:	af00      	add	r7, sp, #0
	reset_le();
    73c4:	f7ff f92c 	bl	6620 <reset_le>
	packet_cb = connection_follow_cb;
    73c8:	4b04      	ldr	r3, [pc, #16]	; (73dc <bt_follow_le+0x1c>)
    73ca:	4a05      	ldr	r2, [pc, #20]	; (73e0 <bt_follow_le+0x20>)
    73cc:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    73ce:	2009      	movs	r0, #9
    73d0:	f7ff fafe 	bl	69d0 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    73d4:	4b03      	ldr	r3, [pc, #12]	; (73e4 <bt_follow_le+0x24>)
    73d6:	2200      	movs	r2, #0
    73d8:	701a      	strb	r2, [r3, #0]
}
    73da:	bd80      	pop	{r7, pc}
    73dc:	1000099c 	.word	0x1000099c
    73e0:	00007149 	.word	0x00007149
    73e4:	10000a3e 	.word	0x10000a3e

000073e8 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    73e8:	b580      	push	{r7, lr}
    73ea:	b092      	sub	sp, #72	; 0x48
    73ec:	af00      	add	r7, sp, #0
    73ee:	4603      	mov	r3, r0
    73f0:	60b9      	str	r1, [r7, #8]
    73f2:	607a      	str	r2, [r7, #4]
    73f4:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    73f6:	f107 0314 	add.w	r3, r7, #20
    73fa:	2200      	movs	r2, #0
    73fc:	601a      	str	r2, [r3, #0]
    73fe:	3304      	adds	r3, #4
    7400:	2200      	movs	r2, #0
    7402:	601a      	str	r2, [r3, #0]
    7404:	3304      	adds	r3, #4
    7406:	2200      	movs	r2, #0
    7408:	601a      	str	r2, [r3, #0]
    740a:	3304      	adds	r3, #4
    740c:	2200      	movs	r2, #0
    740e:	601a      	str	r2, [r3, #0]
    7410:	3304      	adds	r3, #4
    7412:	2200      	movs	r2, #0
    7414:	601a      	str	r2, [r3, #0]
    7416:	3304      	adds	r3, #4
    7418:	2200      	movs	r2, #0
    741a:	601a      	str	r2, [r3, #0]
    741c:	3304      	adds	r3, #4
    741e:	2200      	movs	r2, #0
    7420:	601a      	str	r2, [r3, #0]
    7422:	3304      	adds	r3, #4
    7424:	2200      	movs	r2, #0
    7426:	601a      	str	r2, [r3, #0]
    7428:	3304      	adds	r3, #4
    742a:	2200      	movs	r2, #0
    742c:	601a      	str	r2, [r3, #0]
    742e:	3304      	adds	r3, #4
    7430:	2200      	movs	r2, #0
    7432:	601a      	str	r2, [r3, #0]
    7434:	3304      	adds	r3, #4
    7436:	2200      	movs	r2, #0
    7438:	601a      	str	r2, [r3, #0]
    743a:	3304      	adds	r3, #4
    743c:	2200      	movs	r2, #0
    743e:	601a      	str	r2, [r3, #0]
    7440:	3304      	adds	r3, #4
    7442:	2200      	movs	r2, #0
    7444:	801a      	strh	r2, [r3, #0]
    7446:	3302      	adds	r3, #2
	if (len > 49)
    7448:	687b      	ldr	r3, [r7, #4]
    744a:	2b31      	cmp	r3, #49	; 0x31
    744c:	d901      	bls.n	7452 <le_promisc_state+0x6a>
		len = 49;
    744e:	2331      	movs	r3, #49	; 0x31
    7450:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    7452:	7bfb      	ldrb	r3, [r7, #15]
    7454:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    7456:	f107 0314 	add.w	r3, r7, #20
    745a:	3301      	adds	r3, #1
    745c:	4618      	mov	r0, r3
    745e:	68b9      	ldr	r1, [r7, #8]
    7460:	687a      	ldr	r2, [r7, #4]
    7462:	f003 ff75 	bl	b350 <memcpy>
	enqueue(LE_PROMISC, buf);
    7466:	f107 0314 	add.w	r3, r7, #20
    746a:	2005      	movs	r0, #5
    746c:	4619      	mov	r1, r3
    746e:	f7fd f97d 	bl	476c <enqueue>
}
    7472:	3748      	adds	r7, #72	; 0x48
    7474:	46bd      	mov	sp, r7
    7476:	bd80      	pop	{r7, pc}

00007478 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    7478:	b580      	push	{r7, lr}
    747a:	b084      	sub	sp, #16
    747c:	af00      	add	r7, sp, #0
    747e:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    7480:	4b55      	ldr	r3, [pc, #340]	; (75d8 <promisc_recover_hop_increment+0x160>)
    7482:	881b      	ldrh	r3, [r3, #0]
    7484:	b29b      	uxth	r3, r3
    7486:	f640 1264 	movw	r2, #2404	; 0x964
    748a:	4293      	cmp	r3, r2
    748c:	d114      	bne.n	74b8 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    748e:	4b53      	ldr	r3, [pc, #332]	; (75dc <promisc_recover_hop_increment+0x164>)
    7490:	681b      	ldr	r3, [r3, #0]
    7492:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7496:	f640 4235 	movw	r2, #3125	; 0xc35
    749a:	fb02 f203 	mul.w	r2, r2, r3
    749e:	4b50      	ldr	r3, [pc, #320]	; (75e0 <promisc_recover_hop_increment+0x168>)
    74a0:	681b      	ldr	r3, [r3, #0]
    74a2:	4413      	add	r3, r2
    74a4:	4a4f      	ldr	r2, [pc, #316]	; (75e4 <promisc_recover_hop_increment+0x16c>)
    74a6:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    74a8:	4b4f      	ldr	r3, [pc, #316]	; (75e8 <promisc_recover_hop_increment+0x170>)
    74aa:	f640 1266 	movw	r2, #2406	; 0x966
    74ae:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    74b0:	4b4e      	ldr	r3, [pc, #312]	; (75ec <promisc_recover_hop_increment+0x174>)
    74b2:	2201      	movs	r2, #1
    74b4:	701a      	strb	r2, [r3, #0]
    74b6:	e08b      	b.n	75d0 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    74b8:	4b47      	ldr	r3, [pc, #284]	; (75d8 <promisc_recover_hop_increment+0x160>)
    74ba:	881b      	ldrh	r3, [r3, #0]
    74bc:	b29b      	uxth	r3, r3
    74be:	f640 1266 	movw	r2, #2406	; 0x966
    74c2:	4293      	cmp	r3, r2
    74c4:	d17d      	bne.n	75c2 <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    74c6:	4b45      	ldr	r3, [pc, #276]	; (75dc <promisc_recover_hop_increment+0x164>)
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    74ce:	f640 4235 	movw	r2, #3125	; 0xc35
    74d2:	fb02 f203 	mul.w	r2, r2, r3
    74d6:	4b42      	ldr	r3, [pc, #264]	; (75e0 <promisc_recover_hop_increment+0x168>)
    74d8:	681b      	ldr	r3, [r3, #0]
    74da:	4413      	add	r3, r2
    74dc:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    74de:	4b41      	ldr	r3, [pc, #260]	; (75e4 <promisc_recover_hop_increment+0x16c>)
    74e0:	681b      	ldr	r3, [r3, #0]
    74e2:	68fa      	ldr	r2, [r7, #12]
    74e4:	429a      	cmp	r2, r3
    74e6:	d205      	bcs.n	74f4 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    74e8:	68fb      	ldr	r3, [r7, #12]
    74ea:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    74ee:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    74f2:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    74f4:	4b3b      	ldr	r3, [pc, #236]	; (75e4 <promisc_recover_hop_increment+0x16c>)
    74f6:	681b      	ldr	r3, [r3, #0]
    74f8:	68fa      	ldr	r2, [r7, #12]
    74fa:	1ad2      	subs	r2, r2, r3
    74fc:	4b3c      	ldr	r3, [pc, #240]	; (75f0 <promisc_recover_hop_increment+0x178>)
    74fe:	8bdb      	ldrh	r3, [r3, #30]
    7500:	4619      	mov	r1, r3
    7502:	f243 03d4 	movw	r3, #12500	; 0x30d4
    7506:	fb03 f301 	mul.w	r3, r3, r1
    750a:	0fd9      	lsrs	r1, r3, #31
    750c:	440b      	add	r3, r1
    750e:	105b      	asrs	r3, r3, #1
    7510:	4413      	add	r3, r2
    7512:	4a37      	ldr	r2, [pc, #220]	; (75f0 <promisc_recover_hop_increment+0x178>)
    7514:	8bd2      	ldrh	r2, [r2, #30]
    7516:	4611      	mov	r1, r2
    7518:	f243 02d4 	movw	r2, #12500	; 0x30d4
    751c:	fb02 f201 	mul.w	r2, r2, r1
    7520:	fbb3 f3f2 	udiv	r3, r3, r2
    7524:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    7526:	68bb      	ldr	r3, [r7, #8]
    7528:	2b24      	cmp	r3, #36	; 0x24
    752a:	d842      	bhi.n	75b2 <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    752c:	4a31      	ldr	r2, [pc, #196]	; (75f4 <promisc_recover_hop_increment+0x17c>)
    752e:	68bb      	ldr	r3, [r7, #8]
    7530:	4413      	add	r3, r2
    7532:	781a      	ldrb	r2, [r3, #0]
    7534:	4b2e      	ldr	r3, [pc, #184]	; (75f0 <promisc_recover_hop_increment+0x178>)
    7536:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    7538:	4b2d      	ldr	r3, [pc, #180]	; (75f0 <promisc_recover_hop_increment+0x178>)
    753a:	8bdb      	ldrh	r3, [r3, #30]
    753c:	085b      	lsrs	r3, r3, #1
    753e:	b29a      	uxth	r2, r3
    7540:	4b2b      	ldr	r3, [pc, #172]	; (75f0 <promisc_recover_hop_increment+0x178>)
    7542:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    7544:	4b2a      	ldr	r3, [pc, #168]	; (75f0 <promisc_recover_hop_increment+0x178>)
    7546:	2200      	movs	r2, #0
    7548:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    754a:	4b29      	ldr	r3, [pc, #164]	; (75f0 <promisc_recover_hop_increment+0x178>)
    754c:	2200      	movs	r2, #0
    754e:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    7550:	4b26      	ldr	r3, [pc, #152]	; (75ec <promisc_recover_hop_increment+0x174>)
    7552:	2200      	movs	r2, #0
    7554:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    7556:	4b26      	ldr	r3, [pc, #152]	; (75f0 <promisc_recover_hop_increment+0x178>)
    7558:	7d9b      	ldrb	r3, [r3, #22]
    755a:	1c5a      	adds	r2, r3, #1
    755c:	4b26      	ldr	r3, [pc, #152]	; (75f8 <promisc_recover_hop_increment+0x180>)
    755e:	fb82 0103 	smull	r0, r1, r2, r3
    7562:	1853      	adds	r3, r2, r1
    7564:	1159      	asrs	r1, r3, #5
    7566:	17d3      	asrs	r3, r2, #31
    7568:	1ac9      	subs	r1, r1, r3
    756a:	460b      	mov	r3, r1
    756c:	00db      	lsls	r3, r3, #3
    756e:	440b      	add	r3, r1
    7570:	009b      	lsls	r3, r3, #2
    7572:	440b      	add	r3, r1
    7574:	1ad1      	subs	r1, r2, r3
    7576:	b2ca      	uxtb	r2, r1
    7578:	4b1d      	ldr	r3, [pc, #116]	; (75f0 <promisc_recover_hop_increment+0x178>)
    757a:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    757c:	4b1c      	ldr	r3, [pc, #112]	; (75f0 <promisc_recover_hop_increment+0x178>)
    757e:	2203      	movs	r2, #3
    7580:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    7582:	4b1b      	ldr	r3, [pc, #108]	; (75f0 <promisc_recover_hop_increment+0x178>)
    7584:	2200      	movs	r2, #0
    7586:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    7588:	4b1c      	ldr	r3, [pc, #112]	; (75fc <promisc_recover_hop_increment+0x184>)
    758a:	2203      	movs	r2, #3
    758c:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    758e:	4b1c      	ldr	r3, [pc, #112]	; (7600 <promisc_recover_hop_increment+0x188>)
    7590:	4a1c      	ldr	r2, [pc, #112]	; (7604 <promisc_recover_hop_increment+0x18c>)
    7592:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    7594:	2003      	movs	r0, #3
    7596:	491c      	ldr	r1, [pc, #112]	; (7608 <promisc_recover_hop_increment+0x190>)
    7598:	2201      	movs	r2, #1
    759a:	f7ff ff25 	bl	73e8 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    759e:	4b1b      	ldr	r3, [pc, #108]	; (760c <promisc_recover_hop_increment+0x194>)
    75a0:	781b      	ldrb	r3, [r3, #0]
    75a2:	b2db      	uxtb	r3, r3
    75a4:	2b00      	cmp	r3, #0
    75a6:	d003      	beq.n	75b0 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    75a8:	4b19      	ldr	r3, [pc, #100]	; (7610 <promisc_recover_hop_increment+0x198>)
    75aa:	2228      	movs	r2, #40	; 0x28
    75ac:	601a      	str	r2, [r3, #0]

			return;
    75ae:	e00f      	b.n	75d0 <promisc_recover_hop_increment+0x158>
    75b0:	e00e      	b.n	75d0 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    75b2:	4b0d      	ldr	r3, [pc, #52]	; (75e8 <promisc_recover_hop_increment+0x170>)
    75b4:	f640 1264 	movw	r2, #2404	; 0x964
    75b8:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    75ba:	4b0c      	ldr	r3, [pc, #48]	; (75ec <promisc_recover_hop_increment+0x174>)
    75bc:	2201      	movs	r2, #1
    75be:	701a      	strb	r2, [r3, #0]
    75c0:	e006      	b.n	75d0 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    75c2:	4b09      	ldr	r3, [pc, #36]	; (75e8 <promisc_recover_hop_increment+0x170>)
    75c4:	f640 1264 	movw	r2, #2404	; 0x964
    75c8:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    75ca:	4b08      	ldr	r3, [pc, #32]	; (75ec <promisc_recover_hop_increment+0x174>)
    75cc:	2201      	movs	r2, #1
    75ce:	701a      	strb	r2, [r3, #0]
	}
}
    75d0:	3710      	adds	r7, #16
    75d2:	46bd      	mov	sp, r7
    75d4:	bd80      	pop	{r7, pc}
    75d6:	bf00      	nop
    75d8:	1000049c 	.word	0x1000049c
    75dc:	10000c2c 	.word	0x10000c2c
    75e0:	40004008 	.word	0x40004008
    75e4:	10000a54 	.word	0x10000a54
    75e8:	10000980 	.word	0x10000980
    75ec:	1000097d 	.word	0x1000097d
    75f0:	10000458 	.word	0x10000458
    75f4:	0000b574 	.word	0x0000b574
    75f8:	dd67c8a7 	.word	0xdd67c8a7
    75fc:	1000097c 	.word	0x1000097c
    7600:	1000099c 	.word	0x1000099c
    7604:	00007149 	.word	0x00007149
    7608:	1000046e 	.word	0x1000046e
    760c:	10000a40 	.word	0x10000a40
    7610:	10000994 	.word	0x10000994

00007614 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    7614:	b580      	push	{r7, lr}
    7616:	b086      	sub	sp, #24
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    761c:	4b33      	ldr	r3, [pc, #204]	; (76ec <promisc_recover_hop_interval+0xd8>)
    761e:	681b      	ldr	r3, [r3, #0]
    7620:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7624:	f640 4235 	movw	r2, #3125	; 0xc35
    7628:	fb02 f203 	mul.w	r2, r2, r3
    762c:	4b30      	ldr	r3, [pc, #192]	; (76f0 <promisc_recover_hop_interval+0xdc>)
    762e:	681b      	ldr	r3, [r3, #0]
    7630:	4413      	add	r3, r2
    7632:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    7634:	4b2f      	ldr	r3, [pc, #188]	; (76f4 <promisc_recover_hop_interval+0xe0>)
    7636:	681b      	ldr	r3, [r3, #0]
    7638:	697a      	ldr	r2, [r7, #20]
    763a:	429a      	cmp	r2, r3
    763c:	d203      	bcs.n	7646 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    763e:	697a      	ldr	r2, [r7, #20]
    7640:	4b2d      	ldr	r3, [pc, #180]	; (76f8 <promisc_recover_hop_interval+0xe4>)
    7642:	4413      	add	r3, r2
    7644:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    7646:	4b2b      	ldr	r3, [pc, #172]	; (76f4 <promisc_recover_hop_interval+0xe0>)
    7648:	681b      	ldr	r3, [r3, #0]
    764a:	697a      	ldr	r2, [r7, #20]
    764c:	1ad3      	subs	r3, r2, r3
    764e:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    7650:	693b      	ldr	r3, [r7, #16]
    7652:	f246 12a7 	movw	r2, #24999	; 0x61a7
    7656:	4293      	cmp	r3, r2
    7658:	d800      	bhi.n	765c <promisc_recover_hop_interval+0x48>
		return;
    765a:	e043      	b.n	76e4 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    765c:	4b27      	ldr	r3, [pc, #156]	; (76fc <promisc_recover_hop_interval+0xe8>)
    765e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7662:	693b      	ldr	r3, [r7, #16]
    7664:	429a      	cmp	r2, r3
    7666:	d903      	bls.n	7670 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    7668:	4a24      	ldr	r2, [pc, #144]	; (76fc <promisc_recover_hop_interval+0xe8>)
    766a:	693b      	ldr	r3, [r7, #16]
    766c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    7670:	4b22      	ldr	r3, [pc, #136]	; (76fc <promisc_recover_hop_interval+0xe8>)
    7672:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    7676:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    767a:	f203 3352 	addw	r3, r3, #850	; 0x352
    767e:	4a20      	ldr	r2, [pc, #128]	; (7700 <promisc_recover_hop_interval+0xec>)
    7680:	fba2 2303 	umull	r2, r3, r2, r3
    7684:	0c9b      	lsrs	r3, r3, #18
    7686:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    7688:	4b1e      	ldr	r3, [pc, #120]	; (7704 <promisc_recover_hop_interval+0xf0>)
    768a:	8bdb      	ldrh	r3, [r3, #30]
    768c:	89fa      	ldrh	r2, [r7, #14]
    768e:	429a      	cmp	r2, r3
    7690:	d11e      	bne.n	76d0 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    7692:	4b1a      	ldr	r3, [pc, #104]	; (76fc <promisc_recover_hop_interval+0xe8>)
    7694:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7698:	3301      	adds	r3, #1
    769a:	4a18      	ldr	r2, [pc, #96]	; (76fc <promisc_recover_hop_interval+0xe8>)
    769c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    76a0:	4b16      	ldr	r3, [pc, #88]	; (76fc <promisc_recover_hop_interval+0xe8>)
    76a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    76a6:	2b05      	cmp	r3, #5
    76a8:	d119      	bne.n	76de <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    76aa:	4b17      	ldr	r3, [pc, #92]	; (7708 <promisc_recover_hop_interval+0xf4>)
    76ac:	4a17      	ldr	r2, [pc, #92]	; (770c <promisc_recover_hop_interval+0xf8>)
    76ae:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    76b0:	4b17      	ldr	r3, [pc, #92]	; (7710 <promisc_recover_hop_interval+0xfc>)
    76b2:	f640 1264 	movw	r2, #2404	; 0x964
    76b6:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    76b8:	4b16      	ldr	r3, [pc, #88]	; (7714 <promisc_recover_hop_interval+0x100>)
    76ba:	2204      	movs	r2, #4
    76bc:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    76be:	4b16      	ldr	r3, [pc, #88]	; (7718 <promisc_recover_hop_interval+0x104>)
    76c0:	2201      	movs	r2, #1
    76c2:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    76c4:	2002      	movs	r0, #2
    76c6:	4915      	ldr	r1, [pc, #84]	; (771c <promisc_recover_hop_interval+0x108>)
    76c8:	2202      	movs	r2, #2
    76ca:	f7ff fe8d 	bl	73e8 <le_promisc_state>
    76ce:	e006      	b.n	76de <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    76d0:	4a0c      	ldr	r2, [pc, #48]	; (7704 <promisc_recover_hop_interval+0xf0>)
    76d2:	89fb      	ldrh	r3, [r7, #14]
    76d4:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    76d6:	4b09      	ldr	r3, [pc, #36]	; (76fc <promisc_recover_hop_interval+0xe8>)
    76d8:	2200      	movs	r2, #0
    76da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    76de:	4a05      	ldr	r2, [pc, #20]	; (76f4 <promisc_recover_hop_interval+0xe0>)
    76e0:	697b      	ldr	r3, [r7, #20]
    76e2:	6013      	str	r3, [r2, #0]
}
    76e4:	3718      	adds	r7, #24
    76e6:	46bd      	mov	sp, r7
    76e8:	bd80      	pop	{r7, pc}
    76ea:	bf00      	nop
    76ec:	10000c2c 	.word	0x10000c2c
    76f0:	40004008 	.word	0x40004008
    76f4:	10000a58 	.word	0x10000a58
    76f8:	c2c6abc0 	.word	0xc2c6abc0
    76fc:	10000c34 	.word	0x10000c34
    7700:	9119a9c1 	.word	0x9119a9c1
    7704:	10000458 	.word	0x10000458
    7708:	1000099c 	.word	0x1000099c
    770c:	00007479 	.word	0x00007479
    7710:	10000980 	.word	0x10000980
    7714:	1000097c 	.word	0x1000097c
    7718:	1000097d 	.word	0x1000097d
    771c:	10000476 	.word	0x10000476

00007720 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    7720:	b580      	push	{r7, lr}
    7722:	b084      	sub	sp, #16
    7724:	af00      	add	r7, sp, #0
    7726:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    7728:	4b28      	ldr	r3, [pc, #160]	; (77cc <promisc_follow_cb+0xac>)
    772a:	691b      	ldr	r3, [r3, #16]
    772c:	2b00      	cmp	r3, #0
    772e:	d149      	bne.n	77c4 <promisc_follow_cb+0xa4>
    7730:	687b      	ldr	r3, [r7, #4]
    7732:	3304      	adds	r3, #4
    7734:	781b      	ldrb	r3, [r3, #0]
    7736:	2b01      	cmp	r3, #1
    7738:	d144      	bne.n	77c4 <promisc_follow_cb+0xa4>
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	3305      	adds	r3, #5
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	2b00      	cmp	r3, #0
    7742:	d13f      	bne.n	77c4 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    7744:	687b      	ldr	r3, [r7, #4]
    7746:	3308      	adds	r3, #8
    7748:	781b      	ldrb	r3, [r3, #0]
    774a:	041a      	lsls	r2, r3, #16
    774c:	687b      	ldr	r3, [r7, #4]
    774e:	3307      	adds	r3, #7
    7750:	781b      	ldrb	r3, [r3, #0]
    7752:	021b      	lsls	r3, r3, #8
    7754:	4313      	orrs	r3, r2
    7756:	687a      	ldr	r2, [r7, #4]
    7758:	3206      	adds	r2, #6
    775a:	7812      	ldrb	r2, [r2, #0]
    775c:	4313      	orrs	r3, r2
    775e:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    7760:	687b      	ldr	r3, [r7, #4]
    7762:	3304      	adds	r3, #4
    7764:	68b8      	ldr	r0, [r7, #8]
    7766:	4619      	mov	r1, r3
    7768:	2202      	movs	r2, #2
    776a:	f001 f8af 	bl	88cc <btle_reverse_crc>
    776e:	4602      	mov	r2, r0
    7770:	4b16      	ldr	r3, [pc, #88]	; (77cc <promisc_follow_cb+0xac>)
    7772:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    7774:	4b15      	ldr	r3, [pc, #84]	; (77cc <promisc_follow_cb+0xac>)
    7776:	2200      	movs	r2, #0
    7778:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    777a:	2300      	movs	r3, #0
    777c:	60fb      	str	r3, [r7, #12]
    777e:	e013      	b.n	77a8 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    7780:	4b12      	ldr	r3, [pc, #72]	; (77cc <promisc_follow_cb+0xac>)
    7782:	68da      	ldr	r2, [r3, #12]
    7784:	4b11      	ldr	r3, [pc, #68]	; (77cc <promisc_follow_cb+0xac>)
    7786:	6899      	ldr	r1, [r3, #8]
    7788:	68fb      	ldr	r3, [r7, #12]
    778a:	fa21 f303 	lsr.w	r3, r1, r3
    778e:	f003 0101 	and.w	r1, r3, #1
    7792:	68fb      	ldr	r3, [r7, #12]
    7794:	f1c3 0317 	rsb	r3, r3, #23
    7798:	fa01 f303 	lsl.w	r3, r1, r3
    779c:	4313      	orrs	r3, r2
    779e:	4a0b      	ldr	r2, [pc, #44]	; (77cc <promisc_follow_cb+0xac>)
    77a0:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    77a2:	68fb      	ldr	r3, [r7, #12]
    77a4:	3301      	adds	r3, #1
    77a6:	60fb      	str	r3, [r7, #12]
    77a8:	68fb      	ldr	r3, [r7, #12]
    77aa:	2b17      	cmp	r3, #23
    77ac:	dde8      	ble.n	7780 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    77ae:	4b07      	ldr	r3, [pc, #28]	; (77cc <promisc_follow_cb+0xac>)
    77b0:	2201      	movs	r2, #1
    77b2:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    77b4:	4b06      	ldr	r3, [pc, #24]	; (77d0 <promisc_follow_cb+0xb0>)
    77b6:	4a07      	ldr	r2, [pc, #28]	; (77d4 <promisc_follow_cb+0xb4>)
    77b8:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    77ba:	2001      	movs	r0, #1
    77bc:	4906      	ldr	r1, [pc, #24]	; (77d8 <promisc_follow_cb+0xb8>)
    77be:	2203      	movs	r2, #3
    77c0:	f7ff fe12 	bl	73e8 <le_promisc_state>
	}
}
    77c4:	3710      	adds	r7, #16
    77c6:	46bd      	mov	sp, r7
    77c8:	bd80      	pop	{r7, pc}
    77ca:	bf00      	nop
    77cc:	10000458 	.word	0x10000458
    77d0:	1000099c 	.word	0x1000099c
    77d4:	00007615 	.word	0x00007615
    77d8:	10000460 	.word	0x10000460

000077dc <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    77dc:	b480      	push	{r7}
    77de:	b087      	sub	sp, #28
    77e0:	af00      	add	r7, sp, #0
    77e2:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    77e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    77e8:	613b      	str	r3, [r7, #16]
    77ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    77ee:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    77f0:	2300      	movs	r3, #0
    77f2:	617b      	str	r3, [r7, #20]
    77f4:	e015      	b.n	7822 <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    77f6:	4a22      	ldr	r2, [pc, #136]	; (7880 <see_aa+0xa4>)
    77f8:	697b      	ldr	r3, [r7, #20]
    77fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	429a      	cmp	r2, r3
    7802:	d10b      	bne.n	781c <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    7804:	4a1e      	ldr	r2, [pc, #120]	; (7880 <see_aa+0xa4>)
    7806:	697b      	ldr	r3, [r7, #20]
    7808:	00db      	lsls	r3, r3, #3
    780a:	4413      	add	r3, r2
    780c:	685b      	ldr	r3, [r3, #4]
    780e:	1c5a      	adds	r2, r3, #1
    7810:	491b      	ldr	r1, [pc, #108]	; (7880 <see_aa+0xa4>)
    7812:	697b      	ldr	r3, [r7, #20]
    7814:	00db      	lsls	r3, r3, #3
    7816:	440b      	add	r3, r1
    7818:	605a      	str	r2, [r3, #4]
			return;
    781a:	e02c      	b.n	7876 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    781c:	697b      	ldr	r3, [r7, #20]
    781e:	3301      	adds	r3, #1
    7820:	617b      	str	r3, [r7, #20]
    7822:	697b      	ldr	r3, [r7, #20]
    7824:	2b1f      	cmp	r3, #31
    7826:	dde6      	ble.n	77f6 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7828:	2300      	movs	r3, #0
    782a:	617b      	str	r3, [r7, #20]
    782c:	e015      	b.n	785a <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    782e:	4a14      	ldr	r2, [pc, #80]	; (7880 <see_aa+0xa4>)
    7830:	697b      	ldr	r3, [r7, #20]
    7832:	00db      	lsls	r3, r3, #3
    7834:	4413      	add	r3, r2
    7836:	685a      	ldr	r2, [r3, #4]
    7838:	693b      	ldr	r3, [r7, #16]
    783a:	429a      	cmp	r2, r3
    783c:	db02      	blt.n	7844 <see_aa+0x68>
    783e:	693b      	ldr	r3, [r7, #16]
    7840:	2b00      	cmp	r3, #0
    7842:	da07      	bge.n	7854 <see_aa+0x78>
			killme = i;
    7844:	697b      	ldr	r3, [r7, #20]
    7846:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7848:	4a0d      	ldr	r2, [pc, #52]	; (7880 <see_aa+0xa4>)
    784a:	697b      	ldr	r3, [r7, #20]
    784c:	00db      	lsls	r3, r3, #3
    784e:	4413      	add	r3, r2
    7850:	685b      	ldr	r3, [r3, #4]
    7852:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7854:	697b      	ldr	r3, [r7, #20]
    7856:	3301      	adds	r3, #1
    7858:	617b      	str	r3, [r7, #20]
    785a:	697b      	ldr	r3, [r7, #20]
    785c:	2b1f      	cmp	r3, #31
    785e:	dde6      	ble.n	782e <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    7860:	4907      	ldr	r1, [pc, #28]	; (7880 <see_aa+0xa4>)
    7862:	68fb      	ldr	r3, [r7, #12]
    7864:	687a      	ldr	r2, [r7, #4]
    7866:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    786a:	4a05      	ldr	r2, [pc, #20]	; (7880 <see_aa+0xa4>)
    786c:	68fb      	ldr	r3, [r7, #12]
    786e:	00db      	lsls	r3, r3, #3
    7870:	4413      	add	r3, r2
    7872:	2201      	movs	r2, #1
    7874:	605a      	str	r2, [r3, #4]
}
    7876:	371c      	adds	r7, #28
    7878:	46bd      	mov	sp, r7
    787a:	f85d 7b04 	ldr.w	r7, [sp], #4
    787e:	4770      	bx	lr
    7880:	10000c34 	.word	0x10000c34

00007884 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    7884:	b590      	push	{r4, r7, lr}
    7886:	b0a1      	sub	sp, #132	; 0x84
    7888:	af00      	add	r7, sp, #0
    788a:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    788c:	f107 031c 	add.w	r3, r7, #28
    7890:	2240      	movs	r2, #64	; 0x40
    7892:	4618      	mov	r0, r3
    7894:	2100      	movs	r1, #0
    7896:	f7fc fcaf 	bl	41f8 <memset>
    789a:	2301      	movs	r3, #1
    789c:	773b      	strb	r3, [r7, #28]
    789e:	2301      	movs	r3, #1
    78a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    78a4:	2301      	movs	r3, #1
    78a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    78aa:	2301      	movs	r3, #1
    78ac:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    78b0:	2301      	movs	r3, #1
    78b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    78b6:	2301      	movs	r3, #1
    78b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    78bc:	2301      	movs	r3, #1
    78be:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    78c2:	2301      	movs	r3, #1
    78c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    78c8:	2300      	movs	r3, #0
    78ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    78cc:	e041      	b.n	7952 <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    78ce:	4ba5      	ldr	r3, [pc, #660]	; (7b64 <cb_le_promisc+0x2e0>)
    78d0:	881b      	ldrh	r3, [r3, #0]
    78d2:	b29b      	uxth	r3, r3
    78d4:	b2db      	uxtb	r3, r3
    78d6:	3b62      	subs	r3, #98	; 0x62
    78d8:	b2db      	uxtb	r3, r3
    78da:	4618      	mov	r0, r3
    78dc:	f000 ff54 	bl	8788 <btle_channel_index>
    78e0:	4603      	mov	r3, r0
    78e2:	461a      	mov	r2, r3
    78e4:	4ba0      	ldr	r3, [pc, #640]	; (7b68 <cb_le_promisc+0x2e4>)
    78e6:	5c9b      	ldrb	r3, [r3, r2]
    78e8:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    78ea:	2300      	movs	r3, #0
    78ec:	67bb      	str	r3, [r7, #120]	; 0x78
    78ee:	e02a      	b.n	7946 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    78f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78f2:	011b      	lsls	r3, r3, #4
    78f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
    78f8:	441a      	add	r2, r3
    78fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78fc:	4413      	add	r3, r2
    78fe:	3b64      	subs	r3, #100	; 0x64
    7900:	781a      	ldrb	r2, [r3, #0]
    7902:	499a      	ldr	r1, [pc, #616]	; (7b6c <cb_le_promisc+0x2e8>)
    7904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7906:	440b      	add	r3, r1
    7908:	781b      	ldrb	r3, [r3, #0]
    790a:	4053      	eors	r3, r2
    790c:	b2d9      	uxtb	r1, r3
    790e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7910:	011b      	lsls	r3, r3, #4
    7912:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7916:	441a      	add	r2, r3
    7918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    791a:	4413      	add	r3, r2
    791c:	3b64      	subs	r3, #100	; 0x64
    791e:	460a      	mov	r2, r1
    7920:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    7922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7924:	3301      	adds	r3, #1
    7926:	4619      	mov	r1, r3
    7928:	4b91      	ldr	r3, [pc, #580]	; (7b70 <cb_le_promisc+0x2ec>)
    792a:	fba1 2303 	umull	r2, r3, r1, r3
    792e:	1ac8      	subs	r0, r1, r3
    7930:	0840      	lsrs	r0, r0, #1
    7932:	4403      	add	r3, r0
    7934:	099a      	lsrs	r2, r3, #6
    7936:	4613      	mov	r3, r2
    7938:	01db      	lsls	r3, r3, #7
    793a:	1a9b      	subs	r3, r3, r2
    793c:	1aca      	subs	r2, r1, r3
    793e:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7942:	3301      	adds	r3, #1
    7944:	67bb      	str	r3, [r7, #120]	; 0x78
    7946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7948:	2b0f      	cmp	r3, #15
    794a:	ddd1      	ble.n	78f0 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    794c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    794e:	3301      	adds	r3, #1
    7950:	67fb      	str	r3, [r7, #124]	; 0x7c
    7952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7954:	2b03      	cmp	r3, #3
    7956:	ddba      	ble.n	78ce <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7958:	2320      	movs	r3, #32
    795a:	67fb      	str	r3, [r7, #124]	; 0x7c
    795c:	e0d0      	b.n	7b00 <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    795e:	4b85      	ldr	r3, [pc, #532]	; (7b74 <cb_le_promisc+0x2f0>)
    7960:	f107 040c 	add.w	r4, r7, #12
    7964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    796a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    796e:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    7970:	2300      	movs	r3, #0
    7972:	67bb      	str	r3, [r7, #120]	; 0x78
    7974:	e026      	b.n	79c4 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7976:	2300      	movs	r3, #0
    7978:	677b      	str	r3, [r7, #116]	; 0x74
    797a:	e01d      	b.n	79b8 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    797c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    797e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7980:	4413      	add	r3, r2
    7982:	461a      	mov	r2, r3
    7984:	687b      	ldr	r3, [r7, #4]
    7986:	4413      	add	r3, r2
    7988:	781a      	ldrb	r2, [r3, #0]
    798a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    798c:	011b      	lsls	r3, r3, #4
    798e:	f107 0180 	add.w	r1, r7, #128	; 0x80
    7992:	4419      	add	r1, r3
    7994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7996:	440b      	add	r3, r1
    7998:	3b64      	subs	r3, #100	; 0x64
    799a:	781b      	ldrb	r3, [r3, #0]
    799c:	429a      	cmp	r2, r3
    799e:	d008      	beq.n	79b2 <cb_le_promisc+0x12e>
					ok[j] = 0;
    79a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79a2:	009b      	lsls	r3, r3, #2
    79a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
    79a8:	4413      	add	r3, r2
    79aa:	2200      	movs	r2, #0
    79ac:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    79b0:	e005      	b.n	79be <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    79b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    79b4:	3301      	adds	r3, #1
    79b6:	677b      	str	r3, [r7, #116]	; 0x74
    79b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    79ba:	2b0f      	cmp	r3, #15
    79bc:	ddde      	ble.n	797c <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    79be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79c0:	3301      	adds	r3, #1
    79c2:	67bb      	str	r3, [r7, #120]	; 0x78
    79c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79c6:	2b03      	cmp	r3, #3
    79c8:	ddd5      	ble.n	7976 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    79ca:	2300      	movs	r3, #0
    79cc:	67bb      	str	r3, [r7, #120]	; 0x78
    79ce:	e00e      	b.n	79ee <cb_le_promisc+0x16a>
			if (ok[j]) {
    79d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79d2:	009b      	lsls	r3, r3, #2
    79d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
    79d8:	4413      	add	r3, r2
    79da:	f853 3c74 	ldr.w	r3, [r3, #-116]
    79de:	2b00      	cmp	r3, #0
    79e0:	d002      	beq.n	79e8 <cb_le_promisc+0x164>
				matching = j;
    79e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79e4:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    79e6:	e005      	b.n	79f4 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    79e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79ea:	3301      	adds	r3, #1
    79ec:	67bb      	str	r3, [r7, #120]	; 0x78
    79ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79f0:	2b03      	cmp	r3, #3
    79f2:	dded      	ble.n	79d0 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    79f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    79f6:	2b00      	cmp	r3, #0
    79f8:	db7f      	blt.n	7afa <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    79fa:	4b5a      	ldr	r3, [pc, #360]	; (7b64 <cb_le_promisc+0x2e0>)
    79fc:	881b      	ldrh	r3, [r3, #0]
    79fe:	b29b      	uxth	r3, r3
    7a00:	b2db      	uxtb	r3, r3
    7a02:	3b62      	subs	r3, #98	; 0x62
    7a04:	b2db      	uxtb	r3, r3
    7a06:	4618      	mov	r0, r3
    7a08:	f000 febe 	bl	8788 <btle_channel_index>
    7a0c:	4603      	mov	r3, r0
    7a0e:	461a      	mov	r2, r3
    7a10:	4b55      	ldr	r3, [pc, #340]	; (7b68 <cb_le_promisc+0x2e4>)
    7a12:	5c9b      	ldrb	r3, [r3, r2]
    7a14:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    7a16:	2300      	movs	r3, #0
    7a18:	67bb      	str	r3, [r7, #120]	; 0x78
    7a1a:	e04c      	b.n	7ab6 <cb_le_promisc+0x232>
			u8 byte = 0;
    7a1c:	2300      	movs	r3, #0
    7a1e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    7a22:	2300      	movs	r3, #0
    7a24:	677b      	str	r3, [r7, #116]	; 0x74
    7a26:	e039      	b.n	7a9c <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    7a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7a2a:	00da      	lsls	r2, r3, #3
    7a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7a2e:	441a      	add	r2, r3
    7a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a32:	4413      	add	r3, r2
    7a34:	3b20      	subs	r3, #32
    7a36:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    7a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7a3a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7a3e:	db00      	blt.n	7a42 <cb_le_promisc+0x1be>
    7a40:	e02f      	b.n	7aa2 <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    7a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7a44:	687a      	ldr	r2, [r7, #4]
    7a46:	4413      	add	r3, r2
    7a48:	781b      	ldrb	r3, [r3, #0]
    7a4a:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7a4e:	2b03      	cmp	r3, #3
    7a50:	dd16      	ble.n	7a80 <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    7a52:	4a46      	ldr	r2, [pc, #280]	; (7b6c <cb_le_promisc+0x2e8>)
    7a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7a56:	4413      	add	r3, r2
    7a58:	781b      	ldrb	r3, [r3, #0]
    7a5a:	461a      	mov	r2, r3
    7a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7a5e:	4053      	eors	r3, r2
    7a60:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    7a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7a64:	3301      	adds	r3, #1
    7a66:	4619      	mov	r1, r3
    7a68:	4b41      	ldr	r3, [pc, #260]	; (7b70 <cb_le_promisc+0x2ec>)
    7a6a:	fba1 2303 	umull	r2, r3, r1, r3
    7a6e:	1ac8      	subs	r0, r1, r3
    7a70:	0840      	lsrs	r0, r0, #1
    7a72:	4403      	add	r3, r0
    7a74:	099a      	lsrs	r2, r3, #6
    7a76:	4613      	mov	r3, r2
    7a78:	01db      	lsls	r3, r3, #7
    7a7a:	1a9b      	subs	r3, r3, r2
    7a7c:	1aca      	subs	r2, r1, r3
    7a7e:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    7a80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7a84:	fa02 f303 	lsl.w	r3, r2, r3
    7a88:	b2da      	uxtb	r2, r3
    7a8a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    7a8e:	4313      	orrs	r3, r2
    7a90:	b2db      	uxtb	r3, r3
    7a92:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    7a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7a98:	3301      	adds	r3, #1
    7a9a:	677b      	str	r3, [r7, #116]	; 0x74
    7a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7a9e:	2b07      	cmp	r3, #7
    7aa0:	ddc2      	ble.n	7a28 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    7aa2:	4b35      	ldr	r3, [pc, #212]	; (7b78 <cb_le_promisc+0x2f4>)
    7aa4:	681a      	ldr	r2, [r3, #0]
    7aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7aa8:	4413      	add	r3, r2
    7aaa:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    7aae:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    7ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7ab2:	3301      	adds	r3, #1
    7ab4:	67bb      	str	r3, [r7, #120]	; 0x78
    7ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7ab8:	2b09      	cmp	r3, #9
    7aba:	ddaf      	ble.n	7a1c <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7abc:	4b2e      	ldr	r3, [pc, #184]	; (7b78 <cb_le_promisc+0x2f4>)
    7abe:	681b      	ldr	r3, [r3, #0]
    7ac0:	3303      	adds	r3, #3
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    7ac6:	4b2c      	ldr	r3, [pc, #176]	; (7b78 <cb_le_promisc+0x2f4>)
    7ac8:	681b      	ldr	r3, [r3, #0]
    7aca:	3302      	adds	r3, #2
    7acc:	781b      	ldrb	r3, [r3, #0]
    7ace:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7ad0:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    7ad2:	4b29      	ldr	r3, [pc, #164]	; (7b78 <cb_le_promisc+0x2f4>)
    7ad4:	681b      	ldr	r3, [r3, #0]
    7ad6:	3301      	adds	r3, #1
    7ad8:	781b      	ldrb	r3, [r3, #0]
    7ada:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    7adc:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    7ade:	4a26      	ldr	r2, [pc, #152]	; (7b78 <cb_le_promisc+0x2f4>)
    7ae0:	6812      	ldr	r2, [r2, #0]
    7ae2:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    7ae4:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    7ae8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    7aea:	f7ff fe77 	bl	77dc <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    7aee:	4b22      	ldr	r3, [pc, #136]	; (7b78 <cb_le_promisc+0x2f4>)
    7af0:	681b      	ldr	r3, [r3, #0]
    7af2:	2001      	movs	r0, #1
    7af4:	4619      	mov	r1, r3
    7af6:	f7fc fe39 	bl	476c <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7afc:	3301      	adds	r3, #1
    7afe:	67fb      	str	r3, [r7, #124]	; 0x7c
    7b00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7b02:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    7b06:	f6ff af2a 	blt.w	795e <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7b0a:	2300      	movs	r3, #0
    7b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    7b0e:	e020      	b.n	7b52 <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    7b10:	4a1a      	ldr	r2, [pc, #104]	; (7b7c <cb_le_promisc+0x2f8>)
    7b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7b14:	00db      	lsls	r3, r3, #3
    7b16:	4413      	add	r3, r2
    7b18:	685b      	ldr	r3, [r3, #4]
    7b1a:	2b03      	cmp	r3, #3
    7b1c:	dd16      	ble.n	7b4c <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    7b1e:	4a17      	ldr	r2, [pc, #92]	; (7b7c <cb_le_promisc+0x2f8>)
    7b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7b22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7b26:	4618      	mov	r0, r3
    7b28:	f7fe fd60 	bl	65ec <le_set_access_address>
			data_cb = cb_follow_le;
    7b2c:	4b14      	ldr	r3, [pc, #80]	; (7b80 <cb_le_promisc+0x2fc>)
    7b2e:	4a15      	ldr	r2, [pc, #84]	; (7b84 <cb_le_promisc+0x300>)
    7b30:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    7b32:	4b15      	ldr	r3, [pc, #84]	; (7b88 <cb_le_promisc+0x304>)
    7b34:	4a15      	ldr	r2, [pc, #84]	; (7b8c <cb_le_promisc+0x308>)
    7b36:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    7b38:	4b15      	ldr	r3, [pc, #84]	; (7b90 <cb_le_promisc+0x30c>)
    7b3a:	2200      	movs	r2, #0
    7b3c:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    7b3e:	2000      	movs	r0, #0
    7b40:	4913      	ldr	r1, [pc, #76]	; (7b90 <cb_le_promisc+0x30c>)
    7b42:	2204      	movs	r2, #4
    7b44:	f7ff fc50 	bl	73e8 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    7b48:	2300      	movs	r3, #0
    7b4a:	e006      	b.n	7b5a <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7b4e:	3301      	adds	r3, #1
    7b50:	67fb      	str	r3, [r7, #124]	; 0x7c
    7b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7b54:	2b1f      	cmp	r3, #31
    7b56:	dddb      	ble.n	7b10 <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    7b58:	2301      	movs	r3, #1
}
    7b5a:	4618      	mov	r0, r3
    7b5c:	3784      	adds	r7, #132	; 0x84
    7b5e:	46bd      	mov	sp, r7
    7b60:	bd90      	pop	{r4, r7, pc}
    7b62:	bf00      	nop
    7b64:	1000049c 	.word	0x1000049c
    7b68:	0000b54c 	.word	0x0000b54c
    7b6c:	0000b4cc 	.word	0x0000b4cc
    7b70:	02040811 	.word	0x02040811
    7b74:	0000bd8c 	.word	0x0000bd8c
    7b78:	10000454 	.word	0x10000454
    7b7c:	10000c34 	.word	0x10000c34
    7b80:	10000998 	.word	0x10000998
    7b84:	00006f6d 	.word	0x00006f6d
    7b88:	1000099c 	.word	0x1000099c
    7b8c:	00007721 	.word	0x00007721
    7b90:	10000458 	.word	0x10000458

00007b94 <bt_promisc_le>:

void bt_promisc_le() {
    7b94:	b580      	push	{r7, lr}
    7b96:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7b98:	e02c      	b.n	7bf4 <bt_promisc_le+0x60>
		reset_le_promisc();
    7b9a:	f7fe fd8d 	bl	66b8 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    7b9e:	4b18      	ldr	r3, [pc, #96]	; (7c00 <bt_promisc_le+0x6c>)
    7ba0:	881b      	ldrh	r3, [r3, #0]
    7ba2:	b29b      	uxth	r3, r3
    7ba4:	f003 0301 	and.w	r3, r3, #1
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d003      	beq.n	7bb4 <bt_promisc_le+0x20>
			channel = 2440;
    7bac:	4b14      	ldr	r3, [pc, #80]	; (7c00 <bt_promisc_le+0x6c>)
    7bae:	f640 1288 	movw	r2, #2440	; 0x988
    7bb2:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    7bb4:	4b13      	ldr	r3, [pc, #76]	; (7c04 <bt_promisc_le+0x70>)
    7bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d107      	bne.n	7bcc <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    7bbc:	f7fc ff26 	bl	4a0c <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    7bc0:	4b11      	ldr	r3, [pc, #68]	; (7c08 <bt_promisc_le+0x74>)
    7bc2:	4a12      	ldr	r2, [pc, #72]	; (7c0c <bt_promisc_le+0x78>)
    7bc4:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    7bc6:	200a      	movs	r0, #10
    7bc8:	f7fe fd86 	bl	66d8 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    7bcc:	4b10      	ldr	r3, [pc, #64]	; (7c10 <bt_promisc_le+0x7c>)
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	b2db      	uxtb	r3, r3
    7bd2:	2b0a      	cmp	r3, #10
    7bd4:	d000      	beq.n	7bd8 <bt_promisc_le+0x44>
			break;
    7bd6:	e012      	b.n	7bfe <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    7bd8:	2000      	movs	r0, #0
    7bda:	490a      	ldr	r1, [pc, #40]	; (7c04 <bt_promisc_le+0x70>)
    7bdc:	2204      	movs	r2, #4
    7bde:	f7ff fc03 	bl	73e8 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    7be2:	4b0c      	ldr	r3, [pc, #48]	; (7c14 <bt_promisc_le+0x80>)
    7be4:	4a0c      	ldr	r2, [pc, #48]	; (7c18 <bt_promisc_le+0x84>)
    7be6:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    7be8:	4b06      	ldr	r3, [pc, #24]	; (7c04 <bt_promisc_le+0x70>)
    7bea:	2200      	movs	r2, #0
    7bec:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    7bee:	200a      	movs	r0, #10
    7bf0:	f7fe feee 	bl	69d0 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7bf4:	4b06      	ldr	r3, [pc, #24]	; (7c10 <bt_promisc_le+0x7c>)
    7bf6:	781b      	ldrb	r3, [r3, #0]
    7bf8:	b2db      	uxtb	r3, r3
    7bfa:	2b0a      	cmp	r3, #10
    7bfc:	d0cd      	beq.n	7b9a <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    7bfe:	bd80      	pop	{r7, pc}
    7c00:	1000049c 	.word	0x1000049c
    7c04:	10000458 	.word	0x10000458
    7c08:	10000998 	.word	0x10000998
    7c0c:	00007885 	.word	0x00007885
    7c10:	10000a3f 	.word	0x10000a3f
    7c14:	1000099c 	.word	0x1000099c
    7c18:	00007721 	.word	0x00007721

00007c1c <bt_slave_le>:

void bt_slave_le() {
    7c1c:	b5b0      	push	{r4, r5, r7, lr}
    7c1e:	b08c      	sub	sp, #48	; 0x30
    7c20:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;
	u32 seq = 0; //gjlee
    7c22:	2300      	movs	r3, #0
    7c24:	62bb      	str	r3, [r7, #40]	; 0x28

	u8 adv_ind[] = {
    7c26:	4b3c      	ldr	r3, [pc, #240]	; (7d18 <bt_slave_le+0xfc>)
    7c28:	1d3c      	adds	r4, r7, #4
    7c2a:	461d      	mov	r5, r3
    7c2c:	6828      	ldr	r0, [r5, #0]
    7c2e:	6869      	ldr	r1, [r5, #4]
    7c30:	68aa      	ldr	r2, [r5, #8]
    7c32:	68eb      	ldr	r3, [r5, #12]
    7c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    7c36:	6928      	ldr	r0, [r5, #16]
    7c38:	6969      	ldr	r1, [r5, #20]
    7c3a:	69aa      	ldr	r2, [r5, #24]
    7c3c:	c407      	stmia	r4!, {r0, r1, r2}

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    7c3e:	2319      	movs	r3, #25
    7c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7c44:	2300      	movs	r3, #0
    7c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c48:	e00e      	b.n	7c68 <bt_slave_le+0x4c>
		adv_ind[i+2] = slave_mac_address[5-i];
    7c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c4c:	3302      	adds	r3, #2
    7c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7c50:	f1c2 0205 	rsb	r2, r2, #5
    7c54:	4931      	ldr	r1, [pc, #196]	; (7d1c <bt_slave_le+0x100>)
    7c56:	5c8a      	ldrb	r2, [r1, r2]
    7c58:	f107 0130 	add.w	r1, r7, #48	; 0x30
    7c5c:	440b      	add	r3, r1
    7c5e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c64:	3301      	adds	r3, #1
    7c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c6a:	2b05      	cmp	r3, #5
    7c6c:	dded      	ble.n	7c4a <bt_slave_le+0x2e>
		adv_ind[i+2] = slave_mac_address[5-i];
	

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7c6e:	e04a      	b.n	7d06 <bt_slave_le+0xea>
		ICER0 = ICER0_ICE_USB;
    7c70:	4b2b      	ldr	r3, [pc, #172]	; (7d20 <bt_slave_le+0x104>)
    7c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7c76:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7c78:	4b29      	ldr	r3, [pc, #164]	; (7d20 <bt_slave_le+0x104>)
    7c7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7c7e:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7c84:	3303      	adds	r3, #3
    7c86:	b2da      	uxtb	r2, r3
    7c88:	1d3b      	adds	r3, r7, #4
    7c8a:	4826      	ldr	r0, [pc, #152]	; (7d24 <bt_slave_le+0x108>)
    7c8c:	4611      	mov	r1, r2
    7c8e:	461a      	mov	r2, r3
    7c90:	f7fe f958 	bl	5f44 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    7c94:	4b24      	ldr	r3, [pc, #144]	; (7d28 <bt_slave_le+0x10c>)
    7c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7c9a:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7c9c:	4b22      	ldr	r3, [pc, #136]	; (7d28 <bt_slave_le+0x10c>)
    7c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7ca2:	601a      	str	r2, [r3, #0]
		
		//gjlee
		seq++;
    7ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7ca6:	3301      	adds	r3, #1
    7ca8:	62bb      	str	r3, [r7, #40]	; 0x28
		//adv_ind[19] = (seq >>  0) & 0xff;
		//adv_ind[20] = (seq >>  8) & 0xff;
		//adv_ind[21] = (seq >> 16) & 0xff;
		//adv_ind[22] = (seq >> 24) & 0xff;
		
		calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    7caa:	4b20      	ldr	r3, [pc, #128]	; (7d2c <bt_slave_le+0x110>)
    7cac:	68d9      	ldr	r1, [r3, #12]
    7cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7cb2:	1d3a      	adds	r2, r7, #4
    7cb4:	4608      	mov	r0, r1
    7cb6:	4611      	mov	r1, r2
    7cb8:	461a      	mov	r2, r3
    7cba:	f000 fdc3 	bl	8844 <btle_calc_crc>
    7cbe:	6238      	str	r0, [r7, #32]
		adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    7cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7cc4:	6a3a      	ldr	r2, [r7, #32]
    7cc6:	b2d2      	uxtb	r2, r2
    7cc8:	f107 0130 	add.w	r1, r7, #48	; 0x30
    7ccc:	440b      	add	r3, r1
    7cce:	f803 2c2c 	strb.w	r2, [r3, #-44]
		adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    7cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7cd6:	3301      	adds	r3, #1
    7cd8:	6a3a      	ldr	r2, [r7, #32]
    7cda:	0a12      	lsrs	r2, r2, #8
    7cdc:	b2d2      	uxtb	r2, r2
    7cde:	f107 0130 	add.w	r1, r7, #48	; 0x30
    7ce2:	440b      	add	r3, r1
    7ce4:	f803 2c2c 	strb.w	r2, [r3, #-44]
		adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    7ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7cec:	3302      	adds	r3, #2
    7cee:	6a3a      	ldr	r2, [r7, #32]
    7cf0:	0c12      	lsrs	r2, r2, #16
    7cf2:	b2d2      	uxtb	r2, r2
    7cf4:	f107 0130 	add.w	r1, r7, #48	; 0x30
    7cf8:	440b      	add	r3, r1
    7cfa:	f803 2c2c 	strb.w	r2, [r3, #-44]
		
		msleep(500); //jychoi: control beacon transmission time
    7cfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    7d02:	f7fd fd49 	bl	5798 <msleep>
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];
	

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7d06:	4b0a      	ldr	r3, [pc, #40]	; (7d30 <bt_slave_le+0x114>)
    7d08:	781b      	ldrb	r3, [r3, #0]
    7d0a:	b2db      	uxtb	r3, r3
    7d0c:	2b0c      	cmp	r3, #12
    7d0e:	d0af      	beq.n	7c70 <bt_slave_le+0x54>
		adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
		adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
		
		msleep(500); //jychoi: control beacon transmission time
	}
}
    7d10:	3730      	adds	r7, #48	; 0x30
    7d12:	46bd      	mov	sp, r7
    7d14:	bdb0      	pop	{r4, r5, r7, pc}
    7d16:	bf00      	nop
    7d18:	0000bd9c 	.word	0x0000bd9c
    7d1c:	1000098c 	.word	0x1000098c
    7d20:	e000e180 	.word	0xe000e180
    7d24:	8e89bed6 	.word	0x8e89bed6
    7d28:	e000e100 	.word	0xe000e100
    7d2c:	10000458 	.word	0x10000458
    7d30:	10000a3f 	.word	0x10000a3f

00007d34 <specan>:

/* spectrum analysis */
void specan()
{
    7d34:	b590      	push	{r4, r7, lr}
    7d36:	b091      	sub	sp, #68	; 0x44
    7d38:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    7d3a:	2300      	movs	r3, #0
    7d3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7d40:	4b5a      	ldr	r3, [pc, #360]	; (7eac <specan+0x178>)
    7d42:	2210      	movs	r2, #16
    7d44:	601a      	str	r2, [r3, #0]

	queue_init();
    7d46:	f000 fe9f 	bl	8a88 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7d4a:	4b59      	ldr	r3, [pc, #356]	; (7eb0 <specan+0x17c>)
    7d4c:	2280      	movs	r2, #128	; 0x80
    7d4e:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7d50:	2012      	movs	r0, #18
    7d52:	f642 3122 	movw	r1, #11042	; 0x2b22
    7d56:	f002 f911 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7d5a:	2014      	movs	r0, #20
    7d5c:	f241 314b 	movw	r1, #4939	; 0x134b
    7d60:	f002 f90c 	bl	9f7c <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7d64:	2020      	movs	r0, #32
    7d66:	f240 1101 	movw	r1, #257	; 0x101
    7d6a:	f002 f907 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7d6e:	2003      	movs	r0, #3
    7d70:	2129      	movs	r1, #41	; 0x29
    7d72:	f002 f903 	bl	9f7c <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7d76:	bf00      	nop
    7d78:	f002 f9b8 	bl	a0ec <cc2400_status>
    7d7c:	4603      	mov	r3, r0
    7d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7d82:	2b00      	cmp	r3, #0
    7d84:	d0f8      	beq.n	7d78 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    7d86:	bf00      	nop
    7d88:	f002 f9b0 	bl	a0ec <cc2400_status>
    7d8c:	4603      	mov	r3, r0
    7d8e:	f003 0304 	and.w	r3, r3, #4
    7d92:	2b00      	cmp	r3, #0
    7d94:	d1f8      	bne.n	7d88 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    7d96:	e07a      	b.n	7e8e <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    7d98:	4b46      	ldr	r3, [pc, #280]	; (7eb4 <specan+0x180>)
    7d9a:	881b      	ldrh	r3, [r3, #0]
    7d9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7d9e:	e06f      	b.n	7e80 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    7da0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7da2:	3b01      	subs	r3, #1
    7da4:	b29b      	uxth	r3, r3
    7da6:	2002      	movs	r0, #2
    7da8:	4619      	mov	r1, r3
    7daa:	f002 f8e7 	bl	9f7c <cc2400_set>
			cc2400_strobe(SFSON);
    7dae:	2061      	movs	r0, #97	; 0x61
    7db0:	f002 f9a6 	bl	a100 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7db4:	bf00      	nop
    7db6:	f002 f999 	bl	a0ec <cc2400_status>
    7dba:	4603      	mov	r3, r0
    7dbc:	f003 0304 	and.w	r3, r3, #4
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	d0f8      	beq.n	7db6 <specan+0x82>
			cc2400_strobe(SRX);
    7dc4:	2062      	movs	r0, #98	; 0x62
    7dc6:	f002 f99b 	bl	a100 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7dca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7dce:	607b      	str	r3, [r7, #4]
    7dd0:	bf00      	nop
    7dd2:	687b      	ldr	r3, [r7, #4]
    7dd4:	3b01      	subs	r3, #1
    7dd6:	607b      	str	r3, [r7, #4]
    7dd8:	2b00      	cmp	r3, #0
    7dda:	d1fa      	bne.n	7dd2 <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7ddc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7de0:	4613      	mov	r3, r2
    7de2:	005b      	lsls	r3, r3, #1
    7de4:	4413      	add	r3, r2
    7de6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7de8:	0a12      	lsrs	r2, r2, #8
    7dea:	b292      	uxth	r2, r2
    7dec:	b2d2      	uxtb	r2, r2
    7dee:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7df2:	440b      	add	r3, r1
    7df4:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7df8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7dfc:	4613      	mov	r3, r2
    7dfe:	005b      	lsls	r3, r3, #1
    7e00:	4413      	add	r3, r2
    7e02:	3301      	adds	r3, #1
    7e04:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7e06:	b2d2      	uxtb	r2, r2
    7e08:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7e0c:	440b      	add	r3, r1
    7e0e:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7e12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7e16:	4613      	mov	r3, r2
    7e18:	005b      	lsls	r3, r3, #1
    7e1a:	4413      	add	r3, r2
    7e1c:	1c9c      	adds	r4, r3, #2
    7e1e:	2006      	movs	r0, #6
    7e20:	f002 f896 	bl	9f50 <cc2400_get>
    7e24:	4603      	mov	r3, r0
    7e26:	0a1b      	lsrs	r3, r3, #8
    7e28:	b29b      	uxth	r3, r3
    7e2a:	b2da      	uxtb	r2, r3
    7e2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7e30:	4423      	add	r3, r4
    7e32:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7e36:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7e3a:	3301      	adds	r3, #1
    7e3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7e40:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7e44:	2b10      	cmp	r3, #16
    7e46:	d10d      	bne.n	7e64 <specan+0x130>
				enqueue(SPECAN, buf);
    7e48:	f107 0308 	add.w	r3, r7, #8
    7e4c:	2004      	movs	r0, #4
    7e4e:	4619      	mov	r1, r3
    7e50:	f7fc fc8c 	bl	476c <enqueue>
				i = 0;
    7e54:	2300      	movs	r3, #0
    7e56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7e5a:	4b17      	ldr	r3, [pc, #92]	; (7eb8 <specan+0x184>)
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	4618      	mov	r0, r3
    7e60:	f000 feb2 	bl	8bc8 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7e64:	2064      	movs	r0, #100	; 0x64
    7e66:	f002 f94b 	bl	a100 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7e6a:	bf00      	nop
    7e6c:	f002 f93e 	bl	a0ec <cc2400_status>
    7e70:	4603      	mov	r3, r0
    7e72:	f003 0304 	and.w	r3, r3, #4
    7e76:	2b00      	cmp	r3, #0
    7e78:	d1f8      	bne.n	7e6c <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7e7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7e7c:	3301      	adds	r3, #1
    7e7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7e80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7e82:	4b0e      	ldr	r3, [pc, #56]	; (7ebc <specan+0x188>)
    7e84:	881b      	ldrh	r3, [r3, #0]
    7e86:	b29b      	uxth	r3, r3
    7e88:	3301      	adds	r3, #1
    7e8a:	429a      	cmp	r2, r3
    7e8c:	db88      	blt.n	7da0 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7e8e:	4b0c      	ldr	r3, [pc, #48]	; (7ec0 <specan+0x18c>)
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	b2db      	uxtb	r3, r3
    7e94:	2b04      	cmp	r3, #4
    7e96:	f43f af7f 	beq.w	7d98 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    7e9a:	4b0a      	ldr	r3, [pc, #40]	; (7ec4 <specan+0x190>)
    7e9c:	2200      	movs	r2, #0
    7e9e:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    7ea0:	4b09      	ldr	r3, [pc, #36]	; (7ec8 <specan+0x194>)
    7ea2:	2210      	movs	r2, #16
    7ea4:	601a      	str	r2, [r3, #0]
}
    7ea6:	3744      	adds	r7, #68	; 0x44
    7ea8:	46bd      	mov	sp, r7
    7eaa:	bd90      	pop	{r4, r7, pc}
    7eac:	2009c038 	.word	0x2009c038
    7eb0:	2009c058 	.word	0x2009c058
    7eb4:	1000049e 	.word	0x1000049e
    7eb8:	10000c2c 	.word	0x10000c2c
    7ebc:	100004a0 	.word	0x100004a0
    7ec0:	10000a3f 	.word	0x10000a3f
    7ec4:	10000a3e 	.word	0x10000a3e
    7ec8:	2009c03c 	.word	0x2009c03c

00007ecc <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7ecc:	b580      	push	{r7, lr}
    7ece:	b084      	sub	sp, #16
    7ed0:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7ed2:	2300      	movs	r3, #0
    7ed4:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7ed6:	4a5b      	ldr	r2, [pc, #364]	; (8044 <led_specan+0x178>)
    7ed8:	f107 0308 	add.w	r3, r7, #8
    7edc:	6810      	ldr	r0, [r2, #0]
    7ede:	6018      	str	r0, [r3, #0]
    7ee0:	8892      	ldrh	r2, [r2, #4]
    7ee2:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7ee4:	4b58      	ldr	r3, [pc, #352]	; (8048 <led_specan+0x17c>)
    7ee6:	2280      	movs	r2, #128	; 0x80
    7ee8:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7eea:	2012      	movs	r0, #18
    7eec:	f642 3122 	movw	r1, #11042	; 0x2b22
    7ef0:	f002 f844 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7ef4:	2014      	movs	r0, #20
    7ef6:	f241 314b 	movw	r1, #4939	; 0x134b
    7efa:	f002 f83f 	bl	9f7c <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7efe:	2020      	movs	r0, #32
    7f00:	f240 1101 	movw	r1, #257	; 0x101
    7f04:	f002 f83a 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7f08:	2003      	movs	r0, #3
    7f0a:	2129      	movs	r1, #41	; 0x29
    7f0c:	f002 f836 	bl	9f7c <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7f10:	2006      	movs	r0, #6
    7f12:	21f1      	movs	r1, #241	; 0xf1
    7f14:	f002 f832 	bl	9f7c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7f18:	bf00      	nop
    7f1a:	f002 f8e7 	bl	a0ec <cc2400_status>
    7f1e:	4603      	mov	r3, r0
    7f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7f24:	2b00      	cmp	r3, #0
    7f26:	d0f8      	beq.n	7f1a <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7f28:	bf00      	nop
    7f2a:	f002 f8df 	bl	a0ec <cc2400_status>
    7f2e:	4603      	mov	r3, r0
    7f30:	f003 0304 	and.w	r3, r3, #4
    7f34:	2b00      	cmp	r3, #0
    7f36:	d1f8      	bne.n	7f2a <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7f38:	e079      	b.n	802e <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7f3a:	7bfb      	ldrb	r3, [r7, #15]
    7f3c:	005b      	lsls	r3, r3, #1
    7f3e:	f107 0210 	add.w	r2, r7, #16
    7f42:	4413      	add	r3, r2
    7f44:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7f48:	3b01      	subs	r3, #1
    7f4a:	b29b      	uxth	r3, r3
    7f4c:	2002      	movs	r0, #2
    7f4e:	4619      	mov	r1, r3
    7f50:	f002 f814 	bl	9f7c <cc2400_set>
		cc2400_strobe(SFSON);
    7f54:	2061      	movs	r0, #97	; 0x61
    7f56:	f002 f8d3 	bl	a100 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7f5a:	bf00      	nop
    7f5c:	f002 f8c6 	bl	a0ec <cc2400_status>
    7f60:	4603      	mov	r3, r0
    7f62:	f003 0304 	and.w	r3, r3, #4
    7f66:	2b00      	cmp	r3, #0
    7f68:	d0f8      	beq.n	7f5c <led_specan+0x90>
		cc2400_strobe(SRX);
    7f6a:	2062      	movs	r0, #98	; 0x62
    7f6c:	f002 f8c8 	bl	a100 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7f70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7f74:	607b      	str	r3, [r7, #4]
    7f76:	bf00      	nop
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	3b01      	subs	r3, #1
    7f7c:	607b      	str	r3, [r7, #4]
    7f7e:	2b00      	cmp	r3, #0
    7f80:	d1fa      	bne.n	7f78 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7f82:	2006      	movs	r0, #6
    7f84:	f001 ffe4 	bl	9f50 <cc2400_get>
    7f88:	4603      	mov	r3, r0
    7f8a:	0a1b      	lsrs	r3, r3, #8
    7f8c:	b29b      	uxth	r3, r3
    7f8e:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    7f90:	4b2e      	ldr	r3, [pc, #184]	; (804c <led_specan+0x180>)
    7f92:	781b      	ldrb	r3, [r3, #0]
    7f94:	b2db      	uxtb	r3, r3
    7f96:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7f9a:	b25b      	sxtb	r3, r3
    7f9c:	429a      	cmp	r2, r3
    7f9e:	dd15      	ble.n	7fcc <led_specan+0x100>
            switch (i) {
    7fa0:	7bfb      	ldrb	r3, [r7, #15]
    7fa2:	2b01      	cmp	r3, #1
    7fa4:	d009      	beq.n	7fba <led_specan+0xee>
    7fa6:	2b02      	cmp	r3, #2
    7fa8:	d00b      	beq.n	7fc2 <led_specan+0xf6>
    7faa:	2b00      	cmp	r3, #0
    7fac:	d000      	beq.n	7fb0 <led_specan+0xe4>
    7fae:	e021      	b.n	7ff4 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    7fb0:	4b27      	ldr	r3, [pc, #156]	; (8050 <led_specan+0x184>)
    7fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
    7fb6:	601a      	str	r2, [r3, #0]
                    break;
    7fb8:	e007      	b.n	7fca <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    7fba:	4b25      	ldr	r3, [pc, #148]	; (8050 <led_specan+0x184>)
    7fbc:	2210      	movs	r2, #16
    7fbe:	601a      	str	r2, [r3, #0]
                    break;
    7fc0:	e003      	b.n	7fca <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    7fc2:	4b23      	ldr	r3, [pc, #140]	; (8050 <led_specan+0x184>)
    7fc4:	2202      	movs	r2, #2
    7fc6:	601a      	str	r2, [r3, #0]
                    break;
    7fc8:	bf00      	nop
    7fca:	e013      	b.n	7ff4 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    7fcc:	7bfb      	ldrb	r3, [r7, #15]
    7fce:	2b01      	cmp	r3, #1
    7fd0:	d008      	beq.n	7fe4 <led_specan+0x118>
    7fd2:	2b02      	cmp	r3, #2
    7fd4:	d00a      	beq.n	7fec <led_specan+0x120>
    7fd6:	2b00      	cmp	r3, #0
    7fd8:	d10c      	bne.n	7ff4 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    7fda:	4b1e      	ldr	r3, [pc, #120]	; (8054 <led_specan+0x188>)
    7fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
    7fe0:	601a      	str	r2, [r3, #0]
                    break;
    7fe2:	e007      	b.n	7ff4 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    7fe4:	4b1b      	ldr	r3, [pc, #108]	; (8054 <led_specan+0x188>)
    7fe6:	2210      	movs	r2, #16
    7fe8:	601a      	str	r2, [r3, #0]
                    break;
    7fea:	e003      	b.n	7ff4 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    7fec:	4b19      	ldr	r3, [pc, #100]	; (8054 <led_specan+0x188>)
    7fee:	2202      	movs	r2, #2
    7ff0:	601a      	str	r2, [r3, #0]
                    break;
    7ff2:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    7ff4:	7bfb      	ldrb	r3, [r7, #15]
    7ff6:	1c5a      	adds	r2, r3, #1
    7ff8:	4b17      	ldr	r3, [pc, #92]	; (8058 <led_specan+0x18c>)
    7ffa:	fb83 3102 	smull	r3, r1, r3, r2
    7ffe:	17d3      	asrs	r3, r2, #31
    8000:	1ac9      	subs	r1, r1, r3
    8002:	460b      	mov	r3, r1
    8004:	005b      	lsls	r3, r3, #1
    8006:	440b      	add	r3, r1
    8008:	1ad1      	subs	r1, r2, r3
    800a:	460b      	mov	r3, r1
    800c:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    800e:	4b13      	ldr	r3, [pc, #76]	; (805c <led_specan+0x190>)
    8010:	681b      	ldr	r3, [r3, #0]
    8012:	4618      	mov	r0, r3
    8014:	f000 fdd8 	bl	8bc8 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    8018:	2064      	movs	r0, #100	; 0x64
    801a:	f002 f871 	bl	a100 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    801e:	bf00      	nop
    8020:	f002 f864 	bl	a0ec <cc2400_status>
    8024:	4603      	mov	r3, r0
    8026:	f003 0304 	and.w	r3, r3, #4
    802a:	2b00      	cmp	r3, #0
    802c:	d1f8      	bne.n	8020 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    802e:	4b0c      	ldr	r3, [pc, #48]	; (8060 <led_specan+0x194>)
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	b2db      	uxtb	r3, r3
    8034:	2b07      	cmp	r3, #7
    8036:	d080      	beq.n	7f3a <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    8038:	4b0a      	ldr	r3, [pc, #40]	; (8064 <led_specan+0x198>)
    803a:	2200      	movs	r2, #0
    803c:	701a      	strb	r2, [r3, #0]
}
    803e:	3710      	adds	r7, #16
    8040:	46bd      	mov	sp, r7
    8042:	bd80      	pop	{r7, pc}
    8044:	0000bdb8 	.word	0x0000bdb8
    8048:	2009c058 	.word	0x2009c058
    804c:	100004a2 	.word	0x100004a2
    8050:	2009c038 	.word	0x2009c038
    8054:	2009c03c 	.word	0x2009c03c
    8058:	55555556 	.word	0x55555556
    805c:	10000c2c 	.word	0x10000c2c
    8060:	10000a3f 	.word	0x10000a3f
    8064:	10000a3e 	.word	0x10000a3e

00008068 <main>:

int main()
{
    8068:	b580      	push	{r7, lr}
    806a:	af00      	add	r7, sp, #0
	ubertooth_init();
    806c:	f001 feaa 	bl	9dc4 <ubertooth_init>
	clkn_init();
    8070:	f7fd fab8 	bl	55e4 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    8074:	4842      	ldr	r0, [pc, #264]	; (8180 <main+0x118>)
    8076:	f000 fcdf 	bl	8a38 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    807a:	4b42      	ldr	r3, [pc, #264]	; (8184 <main+0x11c>)
    807c:	681b      	ldr	r3, [r3, #0]
    807e:	4618      	mov	r0, r3
    8080:	f000 fda2 	bl	8bc8 <handle_usb>
		if(requested_mode != mode)
    8084:	4b40      	ldr	r3, [pc, #256]	; (8188 <main+0x120>)
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	b2da      	uxtb	r2, r3
    808a:	4b40      	ldr	r3, [pc, #256]	; (818c <main+0x124>)
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	b2db      	uxtb	r3, r3
    8090:	429a      	cmp	r2, r3
    8092:	d074      	beq.n	817e <main+0x116>
			switch (requested_mode) {
    8094:	4b3c      	ldr	r3, [pc, #240]	; (8188 <main+0x120>)
    8096:	781b      	ldrb	r3, [r3, #0]
    8098:	b2db      	uxtb	r3, r3
    809a:	2b0d      	cmp	r3, #13
    809c:	d86e      	bhi.n	817c <main+0x114>
    809e:	a201      	add	r2, pc, #4	; (adr r2, 80a4 <main+0x3c>)
    80a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    80a4:	00008177 	.word	0x00008177
    80a8:	000080e9 	.word	0x000080e9
    80ac:	0000817d 	.word	0x0000817d
    80b0:	00008113 	.word	0x00008113
    80b4:	00008157 	.word	0x00008157
    80b8:	00008123 	.word	0x00008123
    80bc:	00008149 	.word	0x00008149
    80c0:	0000815d 	.word	0x0000815d
    80c4:	000080f5 	.word	0x000080f5
    80c8:	00008101 	.word	0x00008101
    80cc:	00008107 	.word	0x00008107
    80d0:	000080dd 	.word	0x000080dd
    80d4:	0000810d 	.word	0x0000810d
    80d8:	00008163 	.word	0x00008163
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    80dc:	2001      	movs	r0, #1
    80de:	f001 fd69 	bl	9bb4 <wait>
					reset();
    80e2:	f002 f917 	bl	a314 <reset>
					break;
    80e6:	e04a      	b.n	817e <main+0x116>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    80e8:	4b28      	ldr	r3, [pc, #160]	; (818c <main+0x124>)
    80ea:	2201      	movs	r2, #1
    80ec:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    80ee:	f7fe f94d 	bl	638c <bt_stream_rx>
					break;
    80f2:	e044      	b.n	817e <main+0x116>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    80f4:	4b25      	ldr	r3, [pc, #148]	; (818c <main+0x124>)
    80f6:	2208      	movs	r2, #8
    80f8:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    80fa:	f7fe f947 	bl	638c <bt_stream_rx>
					break;
    80fe:	e03e      	b.n	817e <main+0x116>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    8100:	f7ff f95e 	bl	73c0 <bt_follow_le>
					break;
    8104:	e03b      	b.n	817e <main+0x116>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    8106:	f7ff fd45 	bl	7b94 <bt_promisc_le>
					break;
    810a:	e038      	b.n	817e <main+0x116>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    810c:	f7ff fd86 	bl	7c1c <bt_slave_le>
					break;
    8110:	e035      	b.n	817e <main+0x116>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    8112:	4b1e      	ldr	r3, [pc, #120]	; (818c <main+0x124>)
    8114:	2203      	movs	r2, #3
    8116:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    8118:	481d      	ldr	r0, [pc, #116]	; (8190 <main+0x128>)
    811a:	491e      	ldr	r1, [pc, #120]	; (8194 <main+0x12c>)
    811c:	f001 f8c8 	bl	92b0 <cc2400_txtest>
					break;
    8120:	e02d      	b.n	817e <main+0x116>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    8122:	4b1a      	ldr	r3, [pc, #104]	; (818c <main+0x124>)
    8124:	2205      	movs	r2, #5
    8126:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    8128:	481a      	ldr	r0, [pc, #104]	; (8194 <main+0x12c>)
    812a:	f000 fd6b 	bl	8c04 <cc2400_rangetest>
					mode = MODE_IDLE;
    812e:	4b17      	ldr	r3, [pc, #92]	; (818c <main+0x124>)
    8130:	2200      	movs	r2, #0
    8132:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    8134:	4b14      	ldr	r3, [pc, #80]	; (8188 <main+0x120>)
    8136:	781b      	ldrb	r3, [r3, #0]
    8138:	b2db      	uxtb	r3, r3
    813a:	2b05      	cmp	r3, #5
    813c:	d103      	bne.n	8146 <main+0xde>
						requested_mode = MODE_IDLE;
    813e:	4b12      	ldr	r3, [pc, #72]	; (8188 <main+0x120>)
    8140:	2200      	movs	r2, #0
    8142:	701a      	strb	r2, [r3, #0]
					break;
    8144:	e01b      	b.n	817e <main+0x116>
    8146:	e01a      	b.n	817e <main+0x116>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    8148:	4b10      	ldr	r3, [pc, #64]	; (818c <main+0x124>)
    814a:	2206      	movs	r2, #6
    814c:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    814e:	4811      	ldr	r0, [pc, #68]	; (8194 <main+0x12c>)
    8150:	f000 ff76 	bl	9040 <cc2400_repeater>
					break;
    8154:	e013      	b.n	817e <main+0x116>
				case MODE_SPECAN:
					specan();
    8156:	f7ff fded 	bl	7d34 <specan>
					break;
    815a:	e010      	b.n	817e <main+0x116>
				case MODE_LED_SPECAN:
					led_specan();
    815c:	f7ff feb6 	bl	7ecc <led_specan>
					break;
    8160:	e00d      	b.n	817e <main+0x116>
				case MODE_EGO:
					mode = MODE_EGO;
    8162:	4b0a      	ldr	r3, [pc, #40]	; (818c <main+0x124>)
    8164:	220d      	movs	r2, #13
    8166:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    8168:	4b0b      	ldr	r3, [pc, #44]	; (8198 <main+0x130>)
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	b2db      	uxtb	r3, r3
    816e:	4618      	mov	r0, r3
    8170:	f001 fc6e 	bl	9a50 <ego_main>
					break;
    8174:	e003      	b.n	817e <main+0x116>
				case MODE_IDLE:
					cc2400_idle();
    8176:	f7fd fded 	bl	5d54 <cc2400_idle>
					break;
    817a:	e000      	b.n	817e <main+0x116>
				default:
					/* This is really an error state, but what can you do? */
					break;
    817c:	bf00      	nop
			}
	}
    817e:	e77c      	b.n	807a <main+0x12>
    8180:	00004af9 	.word	0x00004af9
    8184:	10000c2c 	.word	0x10000c2c
    8188:	10000a3f 	.word	0x10000a3f
    818c:	10000a3e 	.word	0x10000a3e
    8190:	10000a42 	.word	0x10000a42
    8194:	1000049c 	.word	0x1000049c
    8198:	10000a41 	.word	0x10000a41

0000819c <count_bits>:
u8 afh_bank[CHANNELS];
u8 used_channels;

/* count the number of 1 bits in a uint64_t */
uint8_t count_bits(uint64_t n)
{
    819c:	b480      	push	{r7}
    819e:	b085      	sub	sp, #20
    81a0:	af00      	add	r7, sp, #0
    81a2:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t i = 0;
    81a6:	2300      	movs	r3, #0
    81a8:	73fb      	strb	r3, [r7, #15]
	for (i = 0; n != 0; i++)
    81aa:	2300      	movs	r3, #0
    81ac:	73fb      	strb	r3, [r7, #15]
    81ae:	e010      	b.n	81d2 <count_bits+0x36>
		n &= n - 1;
    81b0:	e9d7 2300 	ldrd	r2, r3, [r7]
    81b4:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    81b8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    81bc:	e9d7 0100 	ldrd	r0, r1, [r7]
    81c0:	ea02 0200 	and.w	r2, r2, r0
    81c4:	ea03 0301 	and.w	r3, r3, r1
    81c8:	e9c7 2300 	strd	r2, r3, [r7]

/* count the number of 1 bits in a uint64_t */
uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    81cc:	7bfb      	ldrb	r3, [r7, #15]
    81ce:	3301      	adds	r3, #1
    81d0:	73fb      	strb	r3, [r7, #15]
    81d2:	e9d7 2300 	ldrd	r2, r3, [r7]
    81d6:	4313      	orrs	r3, r2
    81d8:	d1ea      	bne.n	81b0 <count_bits+0x14>
		n &= n - 1;
	return i;
    81da:	7bfb      	ldrb	r3, [r7, #15]
}
    81dc:	4618      	mov	r0, r3
    81de:	3714      	adds	r7, #20
    81e0:	46bd      	mov	sp, r7
    81e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    81e6:	4770      	bx	lr

000081e8 <precalc>:

/* do all of the one time precalculation */
void precalc(void)
{
    81e8:	b580      	push	{r7, lr}
    81ea:	b084      	sub	sp, #16
    81ec:	af00      	add	r7, sp, #0
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    81ee:	4b7a      	ldr	r3, [pc, #488]	; (83d8 <precalc+0x1f0>)
    81f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    81f4:	4613      	mov	r3, r2
    81f6:	60bb      	str	r3, [r7, #8]
	syncword = 0;
    81f8:	4978      	ldr	r1, [pc, #480]	; (83dc <precalc+0x1f4>)
    81fa:	f04f 0200 	mov.w	r2, #0
    81fe:	f04f 0300 	mov.w	r3, #0
    8202:	e9c1 2300 	strd	r2, r3, [r1]

	/* populate frequency register bank*/
	for (i = 0; i < CHANNELS; i++)
    8206:	2300      	movs	r3, #0
    8208:	73fb      	strb	r3, [r7, #15]
    820a:	e014      	b.n	8236 <precalc+0x4e>
		bank[i] = ((i * 2) % CHANNELS);
    820c:	7bf8      	ldrb	r0, [r7, #15]
    820e:	7bfb      	ldrb	r3, [r7, #15]
    8210:	0059      	lsls	r1, r3, #1
    8212:	4b73      	ldr	r3, [pc, #460]	; (83e0 <precalc+0x1f8>)
    8214:	fb83 2301 	smull	r2, r3, r3, r1
    8218:	115a      	asrs	r2, r3, #5
    821a:	17cb      	asrs	r3, r1, #31
    821c:	1ad2      	subs	r2, r2, r3
    821e:	4613      	mov	r3, r2
    8220:	009b      	lsls	r3, r3, #2
    8222:	4413      	add	r3, r2
    8224:	011b      	lsls	r3, r3, #4
    8226:	1a9b      	subs	r3, r3, r2
    8228:	1aca      	subs	r2, r1, r3
    822a:	b2d2      	uxtb	r2, r2
    822c:	4b6d      	ldr	r3, [pc, #436]	; (83e4 <precalc+0x1fc>)
    822e:	541a      	strb	r2, [r3, r0]
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < CHANNELS; i++)
    8230:	7bfb      	ldrb	r3, [r7, #15]
    8232:	3301      	adds	r3, #1
    8234:	73fb      	strb	r3, [r7, #15]
    8236:	7bfb      	ldrb	r3, [r7, #15]
    8238:	2b4e      	cmp	r3, #78	; 0x4e
    823a:	d9e7      	bls.n	820c <precalc+0x24>
		bank[i] = ((i * 2) % CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    823c:	68bb      	ldr	r3, [r7, #8]
    823e:	0ddb      	lsrs	r3, r3, #23
    8240:	b2db      	uxtb	r3, r3
    8242:	f003 031f 	and.w	r3, r3, #31
    8246:	b2da      	uxtb	r2, r3
    8248:	4b67      	ldr	r3, [pc, #412]	; (83e8 <precalc+0x200>)
    824a:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
    824c:	68bb      	ldr	r3, [r7, #8]
    824e:	0cdb      	lsrs	r3, r3, #19
    8250:	b2db      	uxtb	r3, r3
    8252:	f003 030f 	and.w	r3, r3, #15
    8256:	b2da      	uxtb	r2, r3
    8258:	4b64      	ldr	r3, [pc, #400]	; (83ec <precalc+0x204>)
    825a:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    825c:	68bb      	ldr	r3, [r7, #8]
    825e:	091b      	lsrs	r3, r3, #4
    8260:	b2db      	uxtb	r3, r3
    8262:	f003 0310 	and.w	r3, r3, #16
    8266:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
    8268:	68bb      	ldr	r3, [r7, #8]
    826a:	08db      	lsrs	r3, r3, #3


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    826c:	b2db      	uxtb	r3, r3
    826e:	f003 0308 	and.w	r3, r3, #8
    8272:	b2db      	uxtb	r3, r3
    8274:	4413      	add	r3, r2
    8276:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
    8278:	68bb      	ldr	r3, [r7, #8]
    827a:	089b      	lsrs	r3, r3, #2


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    827c:	b2db      	uxtb	r3, r3
    827e:	f003 0304 	and.w	r3, r3, #4
    8282:	b2db      	uxtb	r3, r3
    8284:	4413      	add	r3, r2
    8286:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
    8288:	68bb      	ldr	r3, [r7, #8]
    828a:	085b      	lsrs	r3, r3, #1


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    828c:	b2db      	uxtb	r3, r3
    828e:	f003 0302 	and.w	r3, r3, #2
    8292:	b2db      	uxtb	r3, r3
    8294:	4413      	add	r3, r2
    8296:	b2da      	uxtb	r2, r3
    8298:	68bb      	ldr	r3, [r7, #8]
    829a:	b2db      	uxtb	r3, r3
    829c:	f003 0301 	and.w	r3, r3, #1
    82a0:	b2db      	uxtb	r3, r3
    82a2:	4413      	add	r3, r2
    82a4:	b2da      	uxtb	r2, r3
    82a6:	4b52      	ldr	r3, [pc, #328]	; (83f0 <precalc+0x208>)
    82a8:	701a      	strb	r2, [r3, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    82aa:	68bb      	ldr	r3, [r7, #8]
    82ac:	0a9b      	lsrs	r3, r3, #10
    82ae:	b29b      	uxth	r3, r3
    82b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    82b4:	b29a      	uxth	r2, r3
    82b6:	4b4f      	ldr	r3, [pc, #316]	; (83f4 <precalc+0x20c>)
    82b8:	801a      	strh	r2, [r3, #0]
	e = ((address >> 7) & 0x40) +
    82ba:	68bb      	ldr	r3, [r7, #8]
    82bc:	09db      	lsrs	r3, r3, #7
    82be:	b2db      	uxtb	r3, r3
    82c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    82c4:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
    82c6:	68bb      	ldr	r3, [r7, #8]
    82c8:	099b      	lsrs	r3, r3, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    82ca:	b2db      	uxtb	r3, r3
    82cc:	f003 0320 	and.w	r3, r3, #32
    82d0:	b2db      	uxtb	r3, r3
    82d2:	4413      	add	r3, r2
    82d4:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    82d6:	68bb      	ldr	r3, [r7, #8]
    82d8:	095b      	lsrs	r3, r3, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    82da:	b2db      	uxtb	r3, r3
    82dc:	f003 0310 	and.w	r3, r3, #16
    82e0:	b2db      	uxtb	r3, r3
    82e2:	4413      	add	r3, r2
    82e4:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
    82e6:	68bb      	ldr	r3, [r7, #8]
    82e8:	091b      	lsrs	r3, r3, #4
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    82ea:	b2db      	uxtb	r3, r3
    82ec:	f003 0308 	and.w	r3, r3, #8
    82f0:	b2db      	uxtb	r3, r3
    82f2:	4413      	add	r3, r2
    82f4:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
    82f6:	68bb      	ldr	r3, [r7, #8]
    82f8:	08db      	lsrs	r3, r3, #3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    82fa:	b2db      	uxtb	r3, r3
    82fc:	f003 0304 	and.w	r3, r3, #4
    8300:	b2db      	uxtb	r3, r3
    8302:	4413      	add	r3, r2
    8304:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
    8306:	68bb      	ldr	r3, [r7, #8]
    8308:	089b      	lsrs	r3, r3, #2
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    830a:	b2db      	uxtb	r3, r3
    830c:	f003 0302 	and.w	r3, r3, #2
    8310:	b2db      	uxtb	r3, r3
    8312:	4413      	add	r3, r2
    8314:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);
    8316:	68bb      	ldr	r3, [r7, #8]
    8318:	085b      	lsrs	r3, r3, #1
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    831a:	b2db      	uxtb	r3, r3
    831c:	f003 0301 	and.w	r3, r3, #1
    8320:	b2db      	uxtb	r3, r3
    8322:	4413      	add	r3, r2
    8324:	b2da      	uxtb	r2, r3
    8326:	4b34      	ldr	r3, [pc, #208]	; (83f8 <precalc+0x210>)
    8328:	701a      	strb	r2, [r3, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    832a:	4b34      	ldr	r3, [pc, #208]	; (83fc <precalc+0x214>)
    832c:	781b      	ldrb	r3, [r3, #0]
    832e:	2b00      	cmp	r3, #0
    8330:	d04f      	beq.n	83d2 <precalc+0x1ea>
		used_channels = 0;
    8332:	4b33      	ldr	r3, [pc, #204]	; (8400 <precalc+0x218>)
    8334:	2200      	movs	r2, #0
    8336:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 10; i++)
    8338:	2300      	movs	r3, #0
    833a:	73fb      	strb	r3, [r7, #15]
    833c:	e014      	b.n	8368 <precalc+0x180>
			used_channels += count_bits((uint64_t) afh_map[i]);
    833e:	7bfb      	ldrb	r3, [r7, #15]
    8340:	4a30      	ldr	r2, [pc, #192]	; (8404 <precalc+0x21c>)
    8342:	5cd3      	ldrb	r3, [r2, r3]
    8344:	b2da      	uxtb	r2, r3
    8346:	f04f 0300 	mov.w	r3, #0
    834a:	4610      	mov	r0, r2
    834c:	4619      	mov	r1, r3
    834e:	f7ff ff25 	bl	819c <count_bits>
    8352:	4603      	mov	r3, r0
    8354:	461a      	mov	r2, r3
    8356:	4b2a      	ldr	r3, [pc, #168]	; (8400 <precalc+0x218>)
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	4413      	add	r3, r2
    835c:	b2da      	uxtb	r2, r3
    835e:	4b28      	ldr	r3, [pc, #160]	; (8400 <precalc+0x218>)
    8360:	701a      	strb	r2, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    8362:	7bfb      	ldrb	r3, [r7, #15]
    8364:	3301      	adds	r3, #1
    8366:	73fb      	strb	r3, [r7, #15]
    8368:	7bfb      	ldrb	r3, [r7, #15]
    836a:	2b09      	cmp	r3, #9
    836c:	d9e7      	bls.n	833e <precalc+0x156>
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
    836e:	2300      	movs	r3, #0
    8370:	71fb      	strb	r3, [r7, #7]
		for (i = 0; i < CHANNELS; i++)
    8372:	2300      	movs	r3, #0
    8374:	73fb      	strb	r3, [r7, #15]
    8376:	e012      	b.n	839e <precalc+0x1b6>
			chan = (i * 2) % CHANNELS;
    8378:	7bfb      	ldrb	r3, [r7, #15]
    837a:	0059      	lsls	r1, r3, #1
    837c:	4b18      	ldr	r3, [pc, #96]	; (83e0 <precalc+0x1f8>)
    837e:	fb83 2301 	smull	r2, r3, r3, r1
    8382:	115a      	asrs	r2, r3, #5
    8384:	17cb      	asrs	r3, r1, #31
    8386:	1ad2      	subs	r2, r2, r3
    8388:	4613      	mov	r3, r2
    838a:	009b      	lsls	r3, r3, #2
    838c:	4413      	add	r3, r2
    838e:	011b      	lsls	r3, r3, #4
    8390:	1a9b      	subs	r3, r3, r2
    8392:	1aca      	subs	r2, r1, r3
    8394:	4613      	mov	r3, r2
    8396:	73bb      	strb	r3, [r7, #14]
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < CHANNELS; i++)
    8398:	7bfb      	ldrb	r3, [r7, #15]
    839a:	3301      	adds	r3, #1
    839c:	73fb      	strb	r3, [r7, #15]
    839e:	7bfb      	ldrb	r3, [r7, #15]
    83a0:	2b4e      	cmp	r3, #78	; 0x4e
    83a2:	d9e9      	bls.n	8378 <precalc+0x190>
			chan = (i * 2) % CHANNELS;
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    83a4:	7bbb      	ldrb	r3, [r7, #14]
    83a6:	08db      	lsrs	r3, r3, #3
    83a8:	b2db      	uxtb	r3, r3
    83aa:	461a      	mov	r2, r3
    83ac:	4b15      	ldr	r3, [pc, #84]	; (8404 <precalc+0x21c>)
    83ae:	5c9b      	ldrb	r3, [r3, r2]
    83b0:	461a      	mov	r2, r3
    83b2:	7bbb      	ldrb	r3, [r7, #14]
    83b4:	f003 0307 	and.w	r3, r3, #7
    83b8:	fa42 f303 	asr.w	r3, r2, r3
    83bc:	f003 0301 	and.w	r3, r3, #1
    83c0:	2b00      	cmp	r3, #0
    83c2:	d006      	beq.n	83d2 <precalc+0x1ea>
				bank[j++] = chan;
    83c4:	79fb      	ldrb	r3, [r7, #7]
    83c6:	1c5a      	adds	r2, r3, #1
    83c8:	71fa      	strb	r2, [r7, #7]
    83ca:	4619      	mov	r1, r3
    83cc:	4a05      	ldr	r2, [pc, #20]	; (83e4 <precalc+0x1fc>)
    83ce:	7bbb      	ldrb	r3, [r7, #14]
    83d0:	5453      	strb	r3, [r2, r1]
	}
}
    83d2:	3710      	adds	r7, #16
    83d4:	46bd      	mov	sp, r7
    83d6:	bd80      	pop	{r7, pc}
    83d8:	10001100 	.word	0x10001100
    83dc:	10000d40 	.word	0x10000d40
    83e0:	67b23a55 	.word	0x67b23a55
    83e4:	10001168 	.word	0x10001168
    83e8:	10001163 	.word	0x10001163
    83ec:	10001110 	.word	0x10001110
    83f0:	10001164 	.word	0x10001164
    83f4:	10001112 	.word	0x10001112
    83f8:	100011b7 	.word	0x100011b7
    83fc:	1000106c 	.word	0x1000106c
    8400:	10001111 	.word	0x10001111
    8404:	10000c04 	.word	0x10000c04

00008408 <perm5>:

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    8408:	b490      	push	{r4, r7}
    840a:	b092      	sub	sp, #72	; 0x48
    840c:	af00      	add	r7, sp, #0
    840e:	4603      	mov	r3, r0
    8410:	71fb      	strb	r3, [r7, #7]
    8412:	460b      	mov	r3, r1
    8414:	71bb      	strb	r3, [r7, #6]
    8416:	4613      	mov	r3, r2
    8418:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    841a:	79fb      	ldrb	r3, [r7, #7]
    841c:	f003 031f 	and.w	r3, r3, #31
    8420:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    8422:	79bb      	ldrb	r3, [r7, #6]
    8424:	f003 031f 	and.w	r3, r3, #31
    8428:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    842a:	88bb      	ldrh	r3, [r7, #4]
    842c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8430:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    8432:	4a5c      	ldr	r2, [pc, #368]	; (85a4 <perm5+0x19c>)
    8434:	f107 031c 	add.w	r3, r7, #28
    8438:	4614      	mov	r4, r2
    843a:	6820      	ldr	r0, [r4, #0]
    843c:	6861      	ldr	r1, [r4, #4]
    843e:	68a2      	ldr	r2, [r4, #8]
    8440:	c307      	stmia	r3!, {r0, r1, r2}
    8442:	89a2      	ldrh	r2, [r4, #12]
    8444:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    8446:	4a58      	ldr	r2, [pc, #352]	; (85a8 <perm5+0x1a0>)
    8448:	f107 030c 	add.w	r3, r7, #12
    844c:	4614      	mov	r4, r2
    844e:	6820      	ldr	r0, [r4, #0]
    8450:	6861      	ldr	r1, [r4, #4]
    8452:	68a2      	ldr	r2, [r4, #8]
    8454:	c307      	stmia	r3!, {r0, r1, r2}
    8456:	89a2      	ldrh	r2, [r4, #12]
    8458:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    845a:	2300      	movs	r3, #0
    845c:	647b      	str	r3, [r7, #68]	; 0x44
    845e:	e010      	b.n	8482 <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    8460:	88ba      	ldrh	r2, [r7, #4]
    8462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8464:	fa42 f303 	asr.w	r3, r2, r3
    8468:	b2db      	uxtb	r3, r3
    846a:	f003 0301 	and.w	r3, r3, #1
    846e:	b2d9      	uxtb	r1, r3
    8470:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8476:	4413      	add	r3, r2
    8478:	460a      	mov	r2, r1
    847a:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    847c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    847e:	3301      	adds	r3, #1
    8480:	647b      	str	r3, [r7, #68]	; 0x44
    8482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8484:	2b08      	cmp	r3, #8
    8486:	ddeb      	ble.n	8460 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8488:	2300      	movs	r3, #0
    848a:	647b      	str	r3, [r7, #68]	; 0x44
    848c:	e011      	b.n	84b2 <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    848e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8490:	3309      	adds	r3, #9
    8492:	79b9      	ldrb	r1, [r7, #6]
    8494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8496:	fa41 f202 	asr.w	r2, r1, r2
    849a:	b2d2      	uxtb	r2, r2
    849c:	f002 0201 	and.w	r2, r2, #1
    84a0:	b2d2      	uxtb	r2, r2
    84a2:	f107 0148 	add.w	r1, r7, #72	; 0x48
    84a6:	440b      	add	r3, r1
    84a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    84ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84ae:	3301      	adds	r3, #1
    84b0:	647b      	str	r3, [r7, #68]	; 0x44
    84b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84b4:	2b04      	cmp	r3, #4
    84b6:	ddea      	ble.n	848e <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    84b8:	2300      	movs	r3, #0
    84ba:	647b      	str	r3, [r7, #68]	; 0x44
    84bc:	e010      	b.n	84e0 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    84be:	79fa      	ldrb	r2, [r7, #7]
    84c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84c2:	fa42 f303 	asr.w	r3, r2, r3
    84c6:	b2db      	uxtb	r3, r3
    84c8:	f003 0301 	and.w	r3, r3, #1
    84cc:	b2d9      	uxtb	r1, r3
    84ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    84d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84d4:	4413      	add	r3, r2
    84d6:	460a      	mov	r2, r1
    84d8:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    84da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84dc:	3301      	adds	r3, #1
    84de:	647b      	str	r3, [r7, #68]	; 0x44
    84e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84e2:	2b04      	cmp	r3, #4
    84e4:	ddeb      	ble.n	84be <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    84e6:	230d      	movs	r3, #13
    84e8:	647b      	str	r3, [r7, #68]	; 0x44
    84ea:	e036      	b.n	855a <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    84ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    84f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    84f2:	4413      	add	r3, r2
    84f4:	781b      	ldrb	r3, [r3, #0]
    84f6:	2b00      	cmp	r3, #0
    84f8:	d02c      	beq.n	8554 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    84fa:	f107 021c 	add.w	r2, r7, #28
    84fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8500:	4413      	add	r3, r2
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8508:	4413      	add	r3, r2
    850a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    850e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    8512:	f107 021c 	add.w	r2, r7, #28
    8516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8518:	4413      	add	r3, r2
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	4619      	mov	r1, r3
    851e:	f107 020c 	add.w	r2, r7, #12
    8522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8524:	4413      	add	r3, r2
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	f107 0248 	add.w	r2, r7, #72	; 0x48
    852c:	4413      	add	r3, r2
    852e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    8532:	f107 0348 	add.w	r3, r7, #72	; 0x48
    8536:	440b      	add	r3, r1
    8538:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    853c:	f107 020c 	add.w	r2, r7, #12
    8540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8542:	4413      	add	r3, r2
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	f107 0248 	add.w	r2, r7, #72	; 0x48
    854a:	4413      	add	r3, r2
    854c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    8550:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8556:	3b01      	subs	r3, #1
    8558:	647b      	str	r3, [r7, #68]	; 0x44
    855a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    855c:	2b00      	cmp	r3, #0
    855e:	dac5      	bge.n	84ec <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    8560:	2300      	movs	r3, #0
    8562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    8566:	2300      	movs	r3, #0
    8568:	647b      	str	r3, [r7, #68]	; 0x44
    856a:	e011      	b.n	8590 <perm5+0x188>
		output += z_bit[i] << i;
    856c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8572:	4413      	add	r3, r2
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	461a      	mov	r2, r3
    8578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    857a:	fa02 f303 	lsl.w	r3, r2, r3
    857e:	b2da      	uxtb	r2, r3
    8580:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    8584:	4413      	add	r3, r2
    8586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    858a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    858c:	3301      	adds	r3, #1
    858e:	647b      	str	r3, [r7, #68]	; 0x44
    8590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8592:	2b04      	cmp	r3, #4
    8594:	ddea      	ble.n	856c <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    8596:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    859a:	4618      	mov	r0, r3
    859c:	3748      	adds	r7, #72	; 0x48
    859e:	46bd      	mov	sp, r7
    85a0:	bc90      	pop	{r4, r7}
    85a2:	4770      	bx	lr
    85a4:	0000bdc0 	.word	0x0000bdc0
    85a8:	0000bdd0 	.word	0x0000bdd0

000085ac <next_hop>:

u16 next_hop(u32 clock)
{
    85ac:	b580      	push	{r7, lr}
    85ae:	b08a      	sub	sp, #40	; 0x28
    85b0:	af00      	add	r7, sp, #0
    85b2:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    85b4:	687b      	ldr	r3, [r7, #4]
    85b6:	089b      	lsrs	r3, r3, #2
    85b8:	b2db      	uxtb	r3, r3
    85ba:	f003 031f 	and.w	r3, r3, #31
    85be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    85c2:	687b      	ldr	r3, [r7, #4]
    85c4:	085b      	lsrs	r3, r3, #1
    85c6:	b2db      	uxtb	r3, r3
    85c8:	f003 0301 	and.w	r3, r3, #1
    85cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    85d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    85d4:	b29b      	uxth	r3, r3
    85d6:	015b      	lsls	r3, r3, #5
    85d8:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	0d5b      	lsrs	r3, r3, #21
    85de:	b2da      	uxtb	r2, r3
    85e0:	4b4b      	ldr	r3, [pc, #300]	; (8710 <next_hop+0x164>)
    85e2:	781b      	ldrb	r3, [r3, #0]
    85e4:	4053      	eors	r3, r2
    85e6:	b2db      	uxtb	r3, r3
    85e8:	f003 031f 	and.w	r3, r3, #31
    85ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	0c1b      	lsrs	r3, r3, #16
    85f4:	b2da      	uxtb	r2, r3
    85f6:	4b47      	ldr	r3, [pc, #284]	; (8714 <next_hop+0x168>)
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	4053      	eors	r3, r2
    85fc:	b2db      	uxtb	r3, r3
    85fe:	f003 031f 	and.w	r3, r3, #31
    8602:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	09db      	lsrs	r3, r3, #7
    860a:	b29a      	uxth	r2, r3
    860c:	4b42      	ldr	r3, [pc, #264]	; (8718 <next_hop+0x16c>)
    860e:	881b      	ldrh	r3, [r3, #0]
    8610:	4053      	eors	r3, r2
    8612:	b29b      	uxth	r3, r3
    8614:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8618:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    861a:	687b      	ldr	r3, [r7, #4]
    861c:	08db      	lsrs	r3, r3, #3
    861e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    8622:	f023 030f 	bic.w	r3, r3, #15
    8626:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8628:	69b9      	ldr	r1, [r7, #24]
    862a:	4b3c      	ldr	r3, [pc, #240]	; (871c <next_hop+0x170>)
    862c:	fba3 2301 	umull	r2, r3, r3, r1
    8630:	099a      	lsrs	r2, r3, #6
    8632:	4613      	mov	r3, r2
    8634:	009b      	lsls	r3, r3, #2
    8636:	4413      	add	r3, r2
    8638:	011b      	lsls	r3, r3, #4
    863a:	1a9b      	subs	r3, r3, r2
    863c:	1acb      	subs	r3, r1, r3
    863e:	617b      	str	r3, [r7, #20]

	perm = perm5(
    8640:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    8644:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8648:	4413      	add	r3, r2
    864a:	b2db      	uxtb	r3, r3
    864c:	b2db      	uxtb	r3, r3
    864e:	f003 031f 	and.w	r3, r3, #31
    8652:	b2da      	uxtb	r2, r3
    8654:	4b32      	ldr	r3, [pc, #200]	; (8720 <next_hop+0x174>)
    8656:	781b      	ldrb	r3, [r3, #0]
    8658:	b2db      	uxtb	r3, r3
    865a:	4053      	eors	r3, r2
    865c:	b2db      	uxtb	r3, r3
    865e:	b2d9      	uxtb	r1, r3
    8660:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8664:	461a      	mov	r2, r3
    8666:	0152      	lsls	r2, r2, #5
    8668:	1ad3      	subs	r3, r2, r3
    866a:	b2db      	uxtb	r3, r3
    866c:	b2da      	uxtb	r2, r3
    866e:	f897 3020 	ldrb.w	r3, [r7, #32]
    8672:	4053      	eors	r3, r2
    8674:	b2db      	uxtb	r3, r3
    8676:	b2da      	uxtb	r2, r3
    8678:	8bfb      	ldrh	r3, [r7, #30]
    867a:	4608      	mov	r0, r1
    867c:	4611      	mov	r1, r2
    867e:	461a      	mov	r2, r3
    8680:	f7ff fec2 	bl	8408 <perm5>
    8684:	4603      	mov	r3, r0
    8686:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    8688:	7cfb      	ldrb	r3, [r7, #19]
    868a:	4a26      	ldr	r2, [pc, #152]	; (8724 <next_hop+0x178>)
    868c:	7812      	ldrb	r2, [r2, #0]
    868e:	4413      	add	r3, r2
    8690:	461a      	mov	r2, r3
    8692:	697b      	ldr	r3, [r7, #20]
    8694:	441a      	add	r2, r3
    8696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8698:	18d1      	adds	r1, r2, r3
    869a:	4b20      	ldr	r3, [pc, #128]	; (871c <next_hop+0x170>)
    869c:	fba3 2301 	umull	r2, r3, r3, r1
    86a0:	099a      	lsrs	r2, r3, #6
    86a2:	4613      	mov	r3, r2
    86a4:	009b      	lsls	r3, r3, #2
    86a6:	4413      	add	r3, r2
    86a8:	011b      	lsls	r3, r3, #4
    86aa:	1a9b      	subs	r3, r3, r2
    86ac:	1aca      	subs	r2, r1, r3
    86ae:	4b1e      	ldr	r3, [pc, #120]	; (8728 <next_hop+0x17c>)
    86b0:	5c9b      	ldrb	r3, [r3, r2]
    86b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    86b6:	4b1d      	ldr	r3, [pc, #116]	; (872c <next_hop+0x180>)
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	2b00      	cmp	r3, #0
    86bc:	d01d      	beq.n	86fa <next_hop+0x14e>
		f_dash = base_f % used_channels;
    86be:	4b1c      	ldr	r3, [pc, #112]	; (8730 <next_hop+0x184>)
    86c0:	781b      	ldrb	r3, [r3, #0]
    86c2:	461a      	mov	r2, r3
    86c4:	69bb      	ldr	r3, [r7, #24]
    86c6:	fbb3 f1f2 	udiv	r1, r3, r2
    86ca:	fb02 f201 	mul.w	r2, r2, r1
    86ce:	1a9b      	subs	r3, r3, r2
    86d0:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    86d2:	7cfb      	ldrb	r3, [r7, #19]
    86d4:	4a13      	ldr	r2, [pc, #76]	; (8724 <next_hop+0x178>)
    86d6:	7812      	ldrb	r2, [r2, #0]
    86d8:	4413      	add	r3, r2
    86da:	461a      	mov	r2, r3
    86dc:	68fb      	ldr	r3, [r7, #12]
    86de:	441a      	add	r2, r3
    86e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    86e2:	4413      	add	r3, r2
    86e4:	4a12      	ldr	r2, [pc, #72]	; (8730 <next_hop+0x184>)
    86e6:	7812      	ldrb	r2, [r2, #0]
    86e8:	fbb3 f1f2 	udiv	r1, r3, r2
    86ec:	fb02 f201 	mul.w	r2, r2, r1
    86f0:	1a9b      	subs	r3, r3, r2
    86f2:	4a10      	ldr	r2, [pc, #64]	; (8734 <next_hop+0x188>)
    86f4:	5cd3      	ldrb	r3, [r2, r3]
    86f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    86fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    86fe:	b29b      	uxth	r3, r3
    8700:	f603 1362 	addw	r3, r3, #2402	; 0x962
    8704:	b29b      	uxth	r3, r3

}
    8706:	4618      	mov	r0, r3
    8708:	3728      	adds	r7, #40	; 0x28
    870a:	46bd      	mov	sp, r7
    870c:	bd80      	pop	{r7, pc}
    870e:	bf00      	nop
    8710:	10001163 	.word	0x10001163
    8714:	10001164 	.word	0x10001164
    8718:	10001112 	.word	0x10001112
    871c:	cf6474a9 	.word	0xcf6474a9
    8720:	10001110 	.word	0x10001110
    8724:	100011b7 	.word	0x100011b7
    8728:	10001168 	.word	0x10001168
    872c:	1000106c 	.word	0x1000106c
    8730:	10001111 	.word	0x10001111
    8734:	10001114 	.word	0x10001114

00008738 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    8738:	b580      	push	{r7, lr}
    873a:	b084      	sub	sp, #16
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    8740:	687b      	ldr	r3, [r7, #4]
    8742:	7d5b      	ldrb	r3, [r3, #21]
    8744:	4618      	mov	r0, r3
    8746:	f000 f84b 	bl	87e0 <btle_channel_index_to_phys>
    874a:	4603      	mov	r3, r0
    874c:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    874e:	687b      	ldr	r3, [r7, #4]
    8750:	7d5b      	ldrb	r3, [r3, #21]
    8752:	461a      	mov	r2, r3
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	7d9b      	ldrb	r3, [r3, #22]
    8758:	441a      	add	r2, r3
    875a:	4b0a      	ldr	r3, [pc, #40]	; (8784 <btle_next_hop+0x4c>)
    875c:	fb82 0103 	smull	r0, r1, r2, r3
    8760:	1853      	adds	r3, r2, r1
    8762:	1159      	asrs	r1, r3, #5
    8764:	17d3      	asrs	r3, r2, #31
    8766:	1ac9      	subs	r1, r1, r3
    8768:	460b      	mov	r3, r1
    876a:	00db      	lsls	r3, r3, #3
    876c:	440b      	add	r3, r1
    876e:	009b      	lsls	r3, r3, #2
    8770:	440b      	add	r3, r1
    8772:	1ad1      	subs	r1, r2, r3
    8774:	b2ca      	uxtb	r2, r1
    8776:	687b      	ldr	r3, [r7, #4]
    8778:	755a      	strb	r2, [r3, #21]
	return phys;
    877a:	89fb      	ldrh	r3, [r7, #14]
}
    877c:	4618      	mov	r0, r3
    877e:	3710      	adds	r7, #16
    8780:	46bd      	mov	sp, r7
    8782:	bd80      	pop	{r7, pc}
    8784:	dd67c8a7 	.word	0xdd67c8a7

00008788 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    8788:	b480      	push	{r7}
    878a:	b085      	sub	sp, #20
    878c:	af00      	add	r7, sp, #0
    878e:	4603      	mov	r3, r0
    8790:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    8792:	79fb      	ldrb	r3, [r7, #7]
    8794:	085b      	lsrs	r3, r3, #1
    8796:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    8798:	79fb      	ldrb	r3, [r7, #7]
    879a:	2b00      	cmp	r3, #0
    879c:	d102      	bne.n	87a4 <btle_channel_index+0x1c>
		idx = 37;
    879e:	2325      	movs	r3, #37	; 0x25
    87a0:	73fb      	strb	r3, [r7, #15]
    87a2:	e015      	b.n	87d0 <btle_channel_index+0x48>
	else if (channel < 12)
    87a4:	79fb      	ldrb	r3, [r7, #7]
    87a6:	2b0b      	cmp	r3, #11
    87a8:	d803      	bhi.n	87b2 <btle_channel_index+0x2a>
		idx = channel - 1;
    87aa:	79fb      	ldrb	r3, [r7, #7]
    87ac:	3b01      	subs	r3, #1
    87ae:	73fb      	strb	r3, [r7, #15]
    87b0:	e00e      	b.n	87d0 <btle_channel_index+0x48>
	else if (channel == 12)
    87b2:	79fb      	ldrb	r3, [r7, #7]
    87b4:	2b0c      	cmp	r3, #12
    87b6:	d102      	bne.n	87be <btle_channel_index+0x36>
		idx = 38;
    87b8:	2326      	movs	r3, #38	; 0x26
    87ba:	73fb      	strb	r3, [r7, #15]
    87bc:	e008      	b.n	87d0 <btle_channel_index+0x48>
	else if (channel < 39)
    87be:	79fb      	ldrb	r3, [r7, #7]
    87c0:	2b26      	cmp	r3, #38	; 0x26
    87c2:	d803      	bhi.n	87cc <btle_channel_index+0x44>
		idx = channel - 2;
    87c4:	79fb      	ldrb	r3, [r7, #7]
    87c6:	3b02      	subs	r3, #2
    87c8:	73fb      	strb	r3, [r7, #15]
    87ca:	e001      	b.n	87d0 <btle_channel_index+0x48>
	else
		idx = 39;
    87cc:	2327      	movs	r3, #39	; 0x27
    87ce:	73fb      	strb	r3, [r7, #15]
	return idx;
    87d0:	7bfb      	ldrb	r3, [r7, #15]
}
    87d2:	4618      	mov	r0, r3
    87d4:	3714      	adds	r7, #20
    87d6:	46bd      	mov	sp, r7
    87d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    87dc:	4770      	bx	lr
    87de:	bf00      	nop

000087e0 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    87e0:	b480      	push	{r7}
    87e2:	b085      	sub	sp, #20
    87e4:	af00      	add	r7, sp, #0
    87e6:	4603      	mov	r3, r0
    87e8:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    87ea:	79fb      	ldrb	r3, [r7, #7]
    87ec:	2b0a      	cmp	r3, #10
    87ee:	d806      	bhi.n	87fe <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    87f0:	79fb      	ldrb	r3, [r7, #7]
    87f2:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    87f6:	b29b      	uxth	r3, r3
    87f8:	005b      	lsls	r3, r3, #1
    87fa:	81fb      	strh	r3, [r7, #14]
    87fc:	e01a      	b.n	8834 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    87fe:	79fb      	ldrb	r3, [r7, #7]
    8800:	2b24      	cmp	r3, #36	; 0x24
    8802:	d806      	bhi.n	8812 <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    8804:	79fb      	ldrb	r3, [r7, #7]
    8806:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    880a:	b29b      	uxth	r3, r3
    880c:	005b      	lsls	r3, r3, #1
    880e:	81fb      	strh	r3, [r7, #14]
    8810:	e010      	b.n	8834 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    8812:	79fb      	ldrb	r3, [r7, #7]
    8814:	2b25      	cmp	r3, #37	; 0x25
    8816:	d103      	bne.n	8820 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    8818:	f640 1362 	movw	r3, #2402	; 0x962
    881c:	81fb      	strh	r3, [r7, #14]
    881e:	e009      	b.n	8834 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    8820:	79fb      	ldrb	r3, [r7, #7]
    8822:	2b26      	cmp	r3, #38	; 0x26
    8824:	d103      	bne.n	882e <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    8826:	f640 137a 	movw	r3, #2426	; 0x97a
    882a:	81fb      	strh	r3, [r7, #14]
    882c:	e002      	b.n	8834 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    882e:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    8832:	81fb      	strh	r3, [r7, #14]
	return phys;
    8834:	89fb      	ldrh	r3, [r7, #14]
}
    8836:	4618      	mov	r0, r3
    8838:	3714      	adds	r7, #20
    883a:	46bd      	mov	sp, r7
    883c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8840:	4770      	bx	lr
    8842:	bf00      	nop

00008844 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    8844:	b480      	push	{r7}
    8846:	b08b      	sub	sp, #44	; 0x2c
    8848:	af00      	add	r7, sp, #0
    884a:	60f8      	str	r0, [r7, #12]
    884c:	60b9      	str	r1, [r7, #8]
    884e:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    8850:	68fb      	ldr	r3, [r7, #12]
    8852:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8856:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    8858:	4b1b      	ldr	r3, [pc, #108]	; (88c8 <btle_calc_crc+0x84>)
    885a:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    885c:	2300      	movs	r3, #0
    885e:	623b      	str	r3, [r7, #32]
    8860:	e027      	b.n	88b2 <btle_calc_crc+0x6e>
		u8 cur = data[i];
    8862:	6a3b      	ldr	r3, [r7, #32]
    8864:	68ba      	ldr	r2, [r7, #8]
    8866:	4413      	add	r3, r2
    8868:	781b      	ldrb	r3, [r3, #0]
    886a:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    886c:	2300      	movs	r3, #0
    886e:	61fb      	str	r3, [r7, #28]
    8870:	e019      	b.n	88a6 <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    8872:	7efa      	ldrb	r2, [r7, #27]
    8874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8876:	4053      	eors	r3, r2
    8878:	f003 0301 	and.w	r3, r3, #1
    887c:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    887e:	7efb      	ldrb	r3, [r7, #27]
    8880:	085b      	lsrs	r3, r3, #1
    8882:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    8884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8886:	085b      	lsrs	r3, r3, #1
    8888:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    888a:	693b      	ldr	r3, [r7, #16]
    888c:	2b00      	cmp	r3, #0
    888e:	d007      	beq.n	88a0 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    8890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8892:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    8896:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    8898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    889a:	697b      	ldr	r3, [r7, #20]
    889c:	4053      	eors	r3, r2
    889e:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    88a0:	69fb      	ldr	r3, [r7, #28]
    88a2:	3301      	adds	r3, #1
    88a4:	61fb      	str	r3, [r7, #28]
    88a6:	69fb      	ldr	r3, [r7, #28]
    88a8:	2b07      	cmp	r3, #7
    88aa:	dde2      	ble.n	8872 <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    88ac:	6a3b      	ldr	r3, [r7, #32]
    88ae:	3301      	adds	r3, #1
    88b0:	623b      	str	r3, [r7, #32]
    88b2:	6a3a      	ldr	r2, [r7, #32]
    88b4:	687b      	ldr	r3, [r7, #4]
    88b6:	429a      	cmp	r2, r3
    88b8:	dbd3      	blt.n	8862 <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    88ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    88bc:	4618      	mov	r0, r3
    88be:	372c      	adds	r7, #44	; 0x2c
    88c0:	46bd      	mov	sp, r7
    88c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88c6:	4770      	bx	lr
    88c8:	005a6000 	.word	0x005a6000

000088cc <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    88cc:	b480      	push	{r7}
    88ce:	b08d      	sub	sp, #52	; 0x34
    88d0:	af00      	add	r7, sp, #0
    88d2:	60f8      	str	r0, [r7, #12]
    88d4:	60b9      	str	r1, [r7, #8]
    88d6:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    88d8:	68fb      	ldr	r3, [r7, #12]
    88da:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    88dc:	4b2b      	ldr	r3, [pc, #172]	; (898c <btle_reverse_crc+0xc0>)
    88de:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	3b01      	subs	r3, #1
    88e4:	627b      	str	r3, [r7, #36]	; 0x24
    88e6:	e02d      	b.n	8944 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    88e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88ea:	68ba      	ldr	r2, [r7, #8]
    88ec:	4413      	add	r3, r2
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    88f2:	2300      	movs	r3, #0
    88f4:	623b      	str	r3, [r7, #32]
    88f6:	e01f      	b.n	8938 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    88f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    88fa:	0ddb      	lsrs	r3, r3, #23
    88fc:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    88fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8900:	005b      	lsls	r3, r3, #1
    8902:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8906:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    8908:	7efa      	ldrb	r2, [r7, #27]
    890a:	6a3b      	ldr	r3, [r7, #32]
    890c:	f1c3 0307 	rsb	r3, r3, #7
    8910:	fa42 f303 	asr.w	r3, r2, r3
    8914:	f003 0201 	and.w	r2, r3, #1
    8918:	697b      	ldr	r3, [r7, #20]
    891a:	4053      	eors	r3, r2
    891c:	461a      	mov	r2, r3
    891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8920:	4313      	orrs	r3, r2
    8922:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    8924:	697b      	ldr	r3, [r7, #20]
    8926:	2b00      	cmp	r3, #0
    8928:	d003      	beq.n	8932 <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    892a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    892c:	69fb      	ldr	r3, [r7, #28]
    892e:	4053      	eors	r3, r2
    8930:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    8932:	6a3b      	ldr	r3, [r7, #32]
    8934:	3301      	adds	r3, #1
    8936:	623b      	str	r3, [r7, #32]
    8938:	6a3b      	ldr	r3, [r7, #32]
    893a:	2b07      	cmp	r3, #7
    893c:	dddc      	ble.n	88f8 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8940:	3b01      	subs	r3, #1
    8942:	627b      	str	r3, [r7, #36]	; 0x24
    8944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8946:	2b00      	cmp	r3, #0
    8948:	dace      	bge.n	88e8 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    894a:	2300      	movs	r3, #0
    894c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    894e:	2300      	movs	r3, #0
    8950:	627b      	str	r3, [r7, #36]	; 0x24
    8952:	e010      	b.n	8976 <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    8954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8958:	fa22 f303 	lsr.w	r3, r2, r3
    895c:	f003 0201 	and.w	r2, r3, #1
    8960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8962:	f1c3 0317 	rsb	r3, r3, #23
    8966:	fa02 f303 	lsl.w	r3, r2, r3
    896a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    896c:	4313      	orrs	r3, r2
    896e:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    8970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8972:	3301      	adds	r3, #1
    8974:	627b      	str	r3, [r7, #36]	; 0x24
    8976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8978:	2b17      	cmp	r3, #23
    897a:	ddeb      	ble.n	8954 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    897e:	4618      	mov	r0, r3
    8980:	3734      	adds	r7, #52	; 0x34
    8982:	46bd      	mov	sp, r7
    8984:	f85d 7b04 	ldr.w	r7, [sp], #4
    8988:	4770      	bx	lr
    898a:	bf00      	nop
    898c:	00b4c000 	.word	0x00b4c000

00008990 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    8990:	b480      	push	{r7}
    8992:	b089      	sub	sp, #36	; 0x24
    8994:	af00      	add	r7, sp, #0
    8996:	60f8      	str	r0, [r7, #12]
    8998:	60b9      	str	r1, [r7, #8]
    899a:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    899c:	68fb      	ldr	r3, [r7, #12]
    899e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    89a2:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    89a4:	2300      	movs	r3, #0
    89a6:	61bb      	str	r3, [r7, #24]
    89a8:	e012      	b.n	89d0 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    89aa:	69bb      	ldr	r3, [r7, #24]
    89ac:	68ba      	ldr	r2, [r7, #8]
    89ae:	4413      	add	r3, r2
    89b0:	781a      	ldrb	r2, [r3, #0]
    89b2:	69fb      	ldr	r3, [r7, #28]
    89b4:	b2db      	uxtb	r3, r3
    89b6:	4053      	eors	r3, r2
    89b8:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    89ba:	69fb      	ldr	r3, [r7, #28]
    89bc:	0a1a      	lsrs	r2, r3, #8
    89be:	7dfb      	ldrb	r3, [r7, #23]
    89c0:	4909      	ldr	r1, [pc, #36]	; (89e8 <btle_crcgen_lut+0x58>)
    89c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    89c6:	4053      	eors	r3, r2
    89c8:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    89ca:	69bb      	ldr	r3, [r7, #24]
    89cc:	3301      	adds	r3, #1
    89ce:	61bb      	str	r3, [r7, #24]
    89d0:	69ba      	ldr	r2, [r7, #24]
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	429a      	cmp	r2, r3
    89d6:	dbe8      	blt.n	89aa <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    89d8:	69fb      	ldr	r3, [r7, #28]
}
    89da:	4618      	mov	r0, r3
    89dc:	3724      	adds	r7, #36	; 0x24
    89de:	46bd      	mov	sp, r7
    89e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    89e4:	4770      	bx	lr
    89e6:	bf00      	nop
    89e8:	100004a8 	.word	0x100004a8

000089ec <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    89ec:	b590      	push	{r4, r7, lr}
    89ee:	b087      	sub	sp, #28
    89f0:	af00      	add	r7, sp, #0
    89f2:	60f8      	str	r0, [r7, #12]
    89f4:	60b9      	str	r1, [r7, #8]
    89f6:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    89f8:	68fb      	ldr	r3, [r7, #12]
    89fa:	885b      	ldrh	r3, [r3, #2]
    89fc:	823b      	strh	r3, [r7, #16]
    89fe:	68fb      	ldr	r3, [r7, #12]
    8a00:	889b      	ldrh	r3, [r3, #4]
    8a02:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    8a04:	4b0b      	ldr	r3, [pc, #44]	; (8a34 <usb_vendor_request_handler+0x48>)
    8a06:	681c      	ldr	r4, [r3, #0]
    8a08:	68fb      	ldr	r3, [r7, #12]
    8a0a:	7859      	ldrb	r1, [r3, #1]
    8a0c:	687b      	ldr	r3, [r7, #4]
    8a0e:	681b      	ldr	r3, [r3, #0]
    8a10:	f107 0210 	add.w	r2, r7, #16
    8a14:	4608      	mov	r0, r1
    8a16:	4611      	mov	r1, r2
    8a18:	461a      	mov	r2, r3
    8a1a:	68bb      	ldr	r3, [r7, #8]
    8a1c:	47a0      	blx	r4
    8a1e:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    8a20:	697b      	ldr	r3, [r7, #20]
    8a22:	2b01      	cmp	r3, #1
    8a24:	bf0c      	ite	eq
    8a26:	2301      	moveq	r3, #1
    8a28:	2300      	movne	r3, #0
    8a2a:	b2db      	uxtb	r3, r3
}
    8a2c:	4618      	mov	r0, r3
    8a2e:	371c      	adds	r7, #28
    8a30:	46bd      	mov	sp, r7
    8a32:	bd90      	pop	{r4, r7, pc}
    8a34:	100032bc 	.word	0x100032bc

00008a38 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b082      	sub	sp, #8
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    8a40:	f001 fdce 	bl	a5e0 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    8a44:	480b      	ldr	r0, [pc, #44]	; (8a74 <ubertooth_usb_init+0x3c>)
    8a46:	f002 fa2d 	bl	aea4 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    8a4a:	4a0b      	ldr	r2, [pc, #44]	; (8a78 <ubertooth_usb_init+0x40>)
    8a4c:	687b      	ldr	r3, [r7, #4]
    8a4e:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    8a50:	2002      	movs	r0, #2
    8a52:	490a      	ldr	r1, [pc, #40]	; (8a7c <ubertooth_usb_init+0x44>)
    8a54:	4a0a      	ldr	r2, [pc, #40]	; (8a80 <ubertooth_usb_init+0x48>)
    8a56:	f001 fd9f 	bl	a598 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    8a5a:	20ff      	movs	r0, #255	; 0xff
    8a5c:	4909      	ldr	r1, [pc, #36]	; (8a84 <ubertooth_usb_init+0x4c>)
    8a5e:	f002 f9cb 	bl	adf8 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    8a62:	2001      	movs	r0, #1
    8a64:	f001 fefe 	bl	a864 <USBHwConnect>

	return 0;
    8a68:	2300      	movs	r3, #0
}
    8a6a:	4618      	mov	r0, r3
    8a6c:	3708      	adds	r7, #8
    8a6e:	46bd      	mov	sp, r7
    8a70:	bd80      	pop	{r7, pc}
    8a72:	bf00      	nop
    8a74:	0000bde0 	.word	0x0000bde0
    8a78:	100032bc 	.word	0x100032bc
    8a7c:	000089ed 	.word	0x000089ed
    8a80:	100031b8 	.word	0x100031b8
    8a84:	0000bea4 	.word	0x0000bea4

00008a88 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    8a88:	b480      	push	{r7}
    8a8a:	af00      	add	r7, sp, #0
	head = 0;
    8a8c:	4b04      	ldr	r3, [pc, #16]	; (8aa0 <queue_init+0x18>)
    8a8e:	2200      	movs	r2, #0
    8a90:	601a      	str	r2, [r3, #0]
	tail = 0;
    8a92:	4b04      	ldr	r3, [pc, #16]	; (8aa4 <queue_init+0x1c>)
    8a94:	2200      	movs	r2, #0
    8a96:	601a      	str	r2, [r3, #0]
}
    8a98:	46bd      	mov	sp, r7
    8a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a9e:	4770      	bx	lr
    8aa0:	10000a5c 	.word	0x10000a5c
    8aa4:	10000a60 	.word	0x10000a60

00008aa8 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    8aa8:	b480      	push	{r7}
    8aaa:	b083      	sub	sp, #12
    8aac:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    8aae:	4b13      	ldr	r3, [pc, #76]	; (8afc <usb_enqueue+0x54>)
    8ab0:	681b      	ldr	r3, [r3, #0]
    8ab2:	b2db      	uxtb	r3, r3
    8ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8ab8:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8aba:	4b11      	ldr	r3, [pc, #68]	; (8b00 <usb_enqueue+0x58>)
    8abc:	681b      	ldr	r3, [r3, #0]
    8abe:	b2db      	uxtb	r3, r3
    8ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8ac4:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    8ac6:	79bb      	ldrb	r3, [r7, #6]
    8ac8:	3301      	adds	r3, #1
    8aca:	b2db      	uxtb	r3, r3
    8acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8ad0:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    8ad2:	79fa      	ldrb	r2, [r7, #7]
    8ad4:	797b      	ldrb	r3, [r7, #5]
    8ad6:	429a      	cmp	r2, r3
    8ad8:	d101      	bne.n	8ade <usb_enqueue+0x36>
		return NULL;
    8ada:	2300      	movs	r3, #0
    8adc:	e008      	b.n	8af0 <usb_enqueue+0x48>
	}

	++tail;
    8ade:	4b08      	ldr	r3, [pc, #32]	; (8b00 <usb_enqueue+0x58>)
    8ae0:	681b      	ldr	r3, [r3, #0]
    8ae2:	3301      	adds	r3, #1
    8ae4:	4a06      	ldr	r2, [pc, #24]	; (8b00 <usb_enqueue+0x58>)
    8ae6:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8ae8:	79bb      	ldrb	r3, [r7, #6]
    8aea:	019b      	lsls	r3, r3, #6
    8aec:	4a05      	ldr	r2, [pc, #20]	; (8b04 <usb_enqueue+0x5c>)
    8aee:	4413      	add	r3, r2
	
}
    8af0:	4618      	mov	r0, r3
    8af2:	370c      	adds	r7, #12
    8af4:	46bd      	mov	sp, r7
    8af6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8afa:	4770      	bx	lr
    8afc:	10000a5c 	.word	0x10000a5c
    8b00:	10000a60 	.word	0x10000a60
    8b04:	100011b8 	.word	0x100011b8

00008b08 <dequeue>:

usb_pkt_rx *dequeue()
{
    8b08:	b480      	push	{r7}
    8b0a:	b083      	sub	sp, #12
    8b0c:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    8b0e:	4b10      	ldr	r3, [pc, #64]	; (8b50 <dequeue+0x48>)
    8b10:	681b      	ldr	r3, [r3, #0]
    8b12:	b2db      	uxtb	r3, r3
    8b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b18:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8b1a:	4b0e      	ldr	r3, [pc, #56]	; (8b54 <dequeue+0x4c>)
    8b1c:	681b      	ldr	r3, [r3, #0]
    8b1e:	b2db      	uxtb	r3, r3
    8b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b24:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    8b26:	79fa      	ldrb	r2, [r7, #7]
    8b28:	79bb      	ldrb	r3, [r7, #6]
    8b2a:	429a      	cmp	r2, r3
    8b2c:	d101      	bne.n	8b32 <dequeue+0x2a>
		return NULL;
    8b2e:	2300      	movs	r3, #0
    8b30:	e008      	b.n	8b44 <dequeue+0x3c>
	}

	++head;
    8b32:	4b07      	ldr	r3, [pc, #28]	; (8b50 <dequeue+0x48>)
    8b34:	681b      	ldr	r3, [r3, #0]
    8b36:	3301      	adds	r3, #1
    8b38:	4a05      	ldr	r2, [pc, #20]	; (8b50 <dequeue+0x48>)
    8b3a:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    8b3c:	79fb      	ldrb	r3, [r7, #7]
    8b3e:	019b      	lsls	r3, r3, #6
    8b40:	4a05      	ldr	r2, [pc, #20]	; (8b58 <dequeue+0x50>)
    8b42:	4413      	add	r3, r2
}
    8b44:	4618      	mov	r0, r3
    8b46:	370c      	adds	r7, #12
    8b48:	46bd      	mov	sp, r7
    8b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b4e:	4770      	bx	lr
    8b50:	10000a5c 	.word	0x10000a5c
    8b54:	10000a60 	.word	0x10000a60
    8b58:	100011b8 	.word	0x100011b8

00008b5c <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	b084      	sub	sp, #16
    8b60:	af00      	add	r7, sp, #0
    8b62:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    8b64:	f107 030c 	add.w	r3, r7, #12
    8b68:	4618      	mov	r0, r3
    8b6a:	f7ff ffcd 	bl	8b08 <dequeue>
    8b6e:	4603      	mov	r3, r0
    8b70:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    8b72:	68fb      	ldr	r3, [r7, #12]
    8b74:	2b00      	cmp	r3, #0
    8b76:	d00a      	beq.n	8b8e <dequeue_send+0x32>
		last_usb_pkt = clkn;
    8b78:	4a11      	ldr	r2, [pc, #68]	; (8bc0 <dequeue_send+0x64>)
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    8b7e:	68fb      	ldr	r3, [r7, #12]
    8b80:	2082      	movs	r0, #130	; 0x82
    8b82:	4619      	mov	r1, r3
    8b84:	2240      	movs	r2, #64	; 0x40
    8b86:	f001 fec9 	bl	a91c <USBHwEPWrite>
		return 1;
    8b8a:	2301      	movs	r3, #1
    8b8c:	e013      	b.n	8bb6 <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    8b8e:	4b0c      	ldr	r3, [pc, #48]	; (8bc0 <dequeue_send+0x64>)
    8b90:	681b      	ldr	r3, [r3, #0]
    8b92:	687a      	ldr	r2, [r7, #4]
    8b94:	1ad3      	subs	r3, r2, r3
    8b96:	4a0b      	ldr	r2, [pc, #44]	; (8bc4 <dequeue_send+0x68>)
    8b98:	4293      	cmp	r3, r2
    8b9a:	d90b      	bls.n	8bb4 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    8b9c:	2303      	movs	r3, #3
    8b9e:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    8ba0:	4a07      	ldr	r2, [pc, #28]	; (8bc0 <dequeue_send+0x64>)
    8ba2:	687b      	ldr	r3, [r7, #4]
    8ba4:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    8ba6:	f107 030b 	add.w	r3, r7, #11
    8baa:	2082      	movs	r0, #130	; 0x82
    8bac:	4619      	mov	r1, r3
    8bae:	2201      	movs	r2, #1
    8bb0:	f001 feb4 	bl	a91c <USBHwEPWrite>
		}
		return 0;
    8bb4:	2300      	movs	r3, #0
	}
}
    8bb6:	4618      	mov	r0, r3
    8bb8:	3710      	adds	r7, #16
    8bba:	46bd      	mov	sp, r7
    8bbc:	bd80      	pop	{r7, pc}
    8bbe:	bf00      	nop
    8bc0:	10000a64 	.word	0x10000a64
    8bc4:	00061a80 	.word	0x00061a80

00008bc8 <handle_usb>:

void handle_usb(u32 clkn)
{
    8bc8:	b580      	push	{r7, lr}
    8bca:	b084      	sub	sp, #16
    8bcc:	af00      	add	r7, sp, #0
    8bce:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    8bd0:	2082      	movs	r0, #130	; 0x82
    8bd2:	f001 fe67 	bl	a8a4 <USBHwEPGetStatus>
    8bd6:	4603      	mov	r3, r0
    8bd8:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    8bda:	7bfb      	ldrb	r3, [r7, #15]
    8bdc:	f003 0320 	and.w	r3, r3, #32
    8be0:	2b00      	cmp	r3, #0
    8be2:	d102      	bne.n	8bea <handle_usb+0x22>
		dequeue_send(clkn);
    8be4:	6878      	ldr	r0, [r7, #4]
    8be6:	f7ff ffb9 	bl	8b5c <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    8bea:	7bfb      	ldrb	r3, [r7, #15]
    8bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	d102      	bne.n	8bfa <handle_usb+0x32>
		dequeue_send(clkn);
    8bf4:	6878      	ldr	r0, [r7, #4]
    8bf6:	f7ff ffb1 	bl	8b5c <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    8bfa:	f001 ff55 	bl	aaa8 <USBHwISR>
}
    8bfe:	3710      	adds	r7, #16
    8c00:	46bd      	mov	sp, r7
    8c02:	bd80      	pop	{r7, pc}

00008c04 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c08:	b095      	sub	sp, #84	; 0x54
    8c0a:	af00      	add	r7, sp, #0
    8c0c:	6078      	str	r0, [r7, #4]
    8c0e:	4669      	mov	r1, sp
    8c10:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    8c12:	2116      	movs	r1, #22
    8c14:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8c18:	2100      	movs	r1, #0
    8c1a:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    8c1e:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8c22:	4631      	mov	r1, r6
    8c24:	3901      	subs	r1, #1
    8c26:	6439      	str	r1, [r7, #64]	; 0x40
    8c28:	b2f0      	uxtb	r0, r6
    8c2a:	f04f 0100 	mov.w	r1, #0
    8c2e:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    8c32:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    8c36:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    8c3a:	b2f0      	uxtb	r0, r6
    8c3c:	f04f 0100 	mov.w	r1, #0
    8c40:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    8c44:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    8c48:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    8c4c:	4631      	mov	r1, r6
    8c4e:	3107      	adds	r1, #7
    8c50:	08c9      	lsrs	r1, r1, #3
    8c52:	00c9      	lsls	r1, r1, #3
    8c54:	ebad 0d01 	sub.w	sp, sp, r1
    8c58:	4669      	mov	r1, sp
    8c5a:	3100      	adds	r1, #0
    8c5c:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    8c5e:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8c62:	4631      	mov	r1, r6
    8c64:	3901      	subs	r1, #1
    8c66:	63b9      	str	r1, [r7, #56]	; 0x38
    8c68:	b2f0      	uxtb	r0, r6
    8c6a:	f04f 0100 	mov.w	r1, #0
    8c6e:	00cd      	lsls	r5, r1, #3
    8c70:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8c74:	00c4      	lsls	r4, r0, #3
    8c76:	b2f0      	uxtb	r0, r6
    8c78:	f04f 0100 	mov.w	r1, #0
    8c7c:	00cb      	lsls	r3, r1, #3
    8c7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8c82:	00c2      	lsls	r2, r0, #3
    8c84:	4633      	mov	r3, r6
    8c86:	3307      	adds	r3, #7
    8c88:	08db      	lsrs	r3, r3, #3
    8c8a:	00db      	lsls	r3, r3, #3
    8c8c:	ebad 0d03 	sub.w	sp, sp, r3
    8c90:	466b      	mov	r3, sp
    8c92:	3300      	adds	r3, #0
    8c94:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    8c96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    8c9a:	3b01      	subs	r3, #1
    8c9c:	b2da      	uxtb	r2, r3
    8c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ca0:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    8ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ca4:	2200      	movs	r2, #0
    8ca6:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    8ca8:	233a      	movs	r3, #58	; 0x3a
    8caa:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    8cac:	4bb3      	ldr	r3, [pc, #716]	; (8f7c <cc2400_rangetest+0x378>)
    8cae:	681b      	ldr	r3, [r3, #0]
    8cb0:	f107 0120 	add.w	r1, r7, #32
    8cb4:	f107 020c 	add.w	r2, r7, #12
    8cb8:	4608      	mov	r0, r1
    8cba:	4611      	mov	r1, r2
    8cbc:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8cbe:	68fb      	ldr	r3, [r7, #12]
    8cc0:	b2db      	uxtb	r3, r3
    8cc2:	2b00      	cmp	r3, #0
    8cc4:	d001      	beq.n	8cca <cc2400_rangetest+0xc6>
    8cc6:	2300      	movs	r3, #0
		return;
    8cc8:	e1ac      	b.n	9024 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8cca:	693b      	ldr	r3, [r7, #16]
    8ccc:	0e1b      	lsrs	r3, r3, #24
    8cce:	b2da      	uxtb	r2, r3
    8cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8cd2:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8cd4:	693b      	ldr	r3, [r7, #16]
    8cd6:	0c1b      	lsrs	r3, r3, #16
    8cd8:	b2da      	uxtb	r2, r3
    8cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8cdc:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8cde:	693b      	ldr	r3, [r7, #16]
    8ce0:	0a1b      	lsrs	r3, r3, #8
    8ce2:	b2da      	uxtb	r2, r3
    8ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ce6:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8ce8:	693b      	ldr	r3, [r7, #16]
    8cea:	b2da      	uxtb	r2, r3
    8cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8cee:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8cf0:	697b      	ldr	r3, [r7, #20]
    8cf2:	0e1b      	lsrs	r3, r3, #24
    8cf4:	b2da      	uxtb	r2, r3
    8cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8cf8:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8cfa:	697b      	ldr	r3, [r7, #20]
    8cfc:	0c1b      	lsrs	r3, r3, #16
    8cfe:	b2da      	uxtb	r2, r3
    8d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d02:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8d04:	697b      	ldr	r3, [r7, #20]
    8d06:	0a1b      	lsrs	r3, r3, #8
    8d08:	b2da      	uxtb	r2, r3
    8d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d0c:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    8d0e:	697b      	ldr	r3, [r7, #20]
    8d10:	b2da      	uxtb	r2, r3
    8d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d14:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8d16:	69bb      	ldr	r3, [r7, #24]
    8d18:	0e1b      	lsrs	r3, r3, #24
    8d1a:	b2da      	uxtb	r2, r3
    8d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d1e:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    8d20:	69bb      	ldr	r3, [r7, #24]
    8d22:	0c1b      	lsrs	r3, r3, #16
    8d24:	b2da      	uxtb	r2, r3
    8d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d28:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8d2a:	69bb      	ldr	r3, [r7, #24]
    8d2c:	0a1b      	lsrs	r3, r3, #8
    8d2e:	b2da      	uxtb	r2, r3
    8d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d32:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    8d34:	69bb      	ldr	r3, [r7, #24]
    8d36:	b2da      	uxtb	r2, r3
    8d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d3a:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8d3c:	69fb      	ldr	r3, [r7, #28]
    8d3e:	0e1b      	lsrs	r3, r3, #24
    8d40:	b2da      	uxtb	r2, r3
    8d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d44:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    8d46:	69fb      	ldr	r3, [r7, #28]
    8d48:	0c1b      	lsrs	r3, r3, #16
    8d4a:	b2da      	uxtb	r2, r3
    8d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d4e:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    8d50:	69fb      	ldr	r3, [r7, #28]
    8d52:	0a1b      	lsrs	r3, r3, #8
    8d54:	b2da      	uxtb	r2, r3
    8d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d58:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    8d5a:	69fb      	ldr	r3, [r7, #28]
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d60:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    8d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d64:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8d68:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    8d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d6c:	2200      	movs	r2, #0
    8d6e:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    8d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d72:	22ff      	movs	r2, #255	; 0xff
    8d74:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    8d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8d78:	22ff      	movs	r2, #255	; 0xff
    8d7a:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    8d7c:	2012      	movs	r0, #18
    8d7e:	f642 3122 	movw	r1, #11042	; 0x2b22
    8d82:	f001 f8fb 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    8d86:	2014      	movs	r0, #20
    8d88:	f241 314b 	movw	r1, #4939	; 0x134b
    8d8c:	f001 f8f6 	bl	9f7c <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    8d90:	2020      	movs	r0, #32
    8d92:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8d96:	f001 f8f1 	bl	9f7c <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8d9a:	687b      	ldr	r3, [r7, #4]
    8d9c:	881b      	ldrh	r3, [r3, #0]
    8d9e:	b29b      	uxth	r3, r3
    8da0:	2002      	movs	r0, #2
    8da2:	4619      	mov	r1, r3
    8da4:	f001 f8ea 	bl	9f7c <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    8da8:	202d      	movs	r0, #45	; 0x2d
    8daa:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8dae:	f001 f8e5 	bl	9f7c <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    8db2:	202c      	movs	r0, #44	; 0x2c
    8db4:	f241 5184 	movw	r1, #5508	; 0x1584
    8db8:	f001 f8e0 	bl	9f7c <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    8dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8dc0:	f043 0308 	orr.w	r3, r3, #8
    8dc4:	b2db      	uxtb	r3, r3
    8dc6:	b29b      	uxth	r3, r3
    8dc8:	2005      	movs	r0, #5
    8dca:	4619      	mov	r1, r3
    8dcc:	f001 f8d6 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    8dd0:	2003      	movs	r0, #3
    8dd2:	2129      	movs	r1, #41	; 0x29
    8dd4:	f001 f8d2 	bl	9f7c <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8dd8:	bf00      	nop
    8dda:	f001 f987 	bl	a0ec <cc2400_status>
    8dde:	4603      	mov	r3, r0
    8de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8de4:	2b00      	cmp	r3, #0
    8de6:	d0f8      	beq.n	8dda <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8de8:	2061      	movs	r0, #97	; 0x61
    8dea:	f001 f989 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8dee:	bf00      	nop
    8df0:	f001 f97c 	bl	a0ec <cc2400_status>
    8df4:	4603      	mov	r3, r0
    8df6:	f003 0304 	and.w	r3, r3, #4
    8dfa:	2b00      	cmp	r3, #0
    8dfc:	d0f8      	beq.n	8df0 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    8dfe:	4b60      	ldr	r3, [pc, #384]	; (8f80 <cc2400_rangetest+0x37c>)
    8e00:	f44f 7280 	mov.w	r2, #256	; 0x100
    8e04:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8e06:	4b5f      	ldr	r3, [pc, #380]	; (8f84 <cc2400_rangetest+0x380>)
    8e08:	2280      	movs	r2, #128	; 0x80
    8e0a:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    8e0c:	2300      	movs	r3, #0
    8e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8e12:	e03e      	b.n	8e92 <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    8e14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8e18:	f043 0308 	orr.w	r3, r3, #8
    8e1c:	b2db      	uxtb	r3, r3
    8e1e:	b29b      	uxth	r3, r3
    8e20:	2005      	movs	r0, #5
    8e22:	4619      	mov	r1, r3
    8e24:	f001 f8aa 	bl	9f7c <cc2400_set>
		txbuf[18] = pa;
    8e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8e2a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8e2e:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    8e30:	2300      	movs	r3, #0
    8e32:	64fb      	str	r3, [r7, #76]	; 0x4c
    8e34:	e025      	b.n	8e82 <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    8e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8e38:	b2da      	uxtb	r2, r3
    8e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8e3c:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8e3e:	bf00      	nop
    8e40:	200e      	movs	r0, #14
    8e42:	f001 f885 	bl	9f50 <cc2400_get>
    8e46:	4603      	mov	r3, r0
    8e48:	f003 031f 	and.w	r3, r3, #31
    8e4c:	2b0f      	cmp	r3, #15
    8e4e:	d1f7      	bne.n	8e40 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    8e50:	2300      	movs	r3, #0
    8e52:	64bb      	str	r3, [r7, #72]	; 0x48
    8e54:	e00a      	b.n	8e6c <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    8e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8e5a:	4413      	add	r3, r2
    8e5c:	781b      	ldrb	r3, [r3, #0]
    8e5e:	2070      	movs	r0, #112	; 0x70
    8e60:	4619      	mov	r1, r3
    8e62:	f001 f8b9 	bl	9fd8 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    8e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8e68:	3301      	adds	r3, #1
    8e6a:	64bb      	str	r3, [r7, #72]	; 0x48
    8e6c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8e72:	429a      	cmp	r2, r3
    8e74:	dcef      	bgt.n	8e56 <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    8e76:	2063      	movs	r0, #99	; 0x63
    8e78:	f001 f942 	bl	a100 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    8e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8e7e:	3301      	adds	r3, #1
    8e80:	64fb      	str	r3, [r7, #76]	; 0x4c
    8e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8e84:	2b0f      	cmp	r3, #15
    8e86:	ddd6      	ble.n	8e36 <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    8e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8e8c:	3301      	adds	r3, #1
    8e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8e92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8e96:	2b07      	cmp	r3, #7
    8e98:	d9bc      	bls.n	8e14 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8e9a:	bf00      	nop
    8e9c:	200e      	movs	r0, #14
    8e9e:	f001 f857 	bl	9f50 <cc2400_get>
    8ea2:	4603      	mov	r3, r0
    8ea4:	f003 031f 	and.w	r3, r3, #31
    8ea8:	2b0f      	cmp	r3, #15
    8eaa:	d1f7      	bne.n	8e9c <cc2400_rangetest+0x298>
	TXLED_CLR;
    8eac:	4b36      	ldr	r3, [pc, #216]	; (8f88 <cc2400_rangetest+0x384>)
    8eae:	f44f 7280 	mov.w	r2, #256	; 0x100
    8eb2:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    8eb4:	2064      	movs	r0, #100	; 0x64
    8eb6:	f001 f923 	bl	a100 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8eba:	bf00      	nop
    8ebc:	f001 f916 	bl	a0ec <cc2400_status>
    8ec0:	4603      	mov	r3, r0
    8ec2:	f003 0304 	and.w	r3, r3, #4
    8ec6:	2b00      	cmp	r3, #0
    8ec8:	d1f8      	bne.n	8ebc <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8eca:	687b      	ldr	r3, [r7, #4]
    8ecc:	881b      	ldrh	r3, [r3, #0]
    8ece:	b29b      	uxth	r3, r3
    8ed0:	3b01      	subs	r3, #1
    8ed2:	b29b      	uxth	r3, r3
    8ed4:	2002      	movs	r0, #2
    8ed6:	4619      	mov	r1, r3
    8ed8:	f001 f850 	bl	9f7c <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8edc:	bf00      	nop
    8ede:	f001 f905 	bl	a0ec <cc2400_status>
    8ee2:	4603      	mov	r3, r0
    8ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d0f8      	beq.n	8ede <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8eec:	2061      	movs	r0, #97	; 0x61
    8eee:	f001 f907 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8ef2:	bf00      	nop
    8ef4:	f001 f8fa 	bl	a0ec <cc2400_status>
    8ef8:	4603      	mov	r3, r0
    8efa:	f003 0304 	and.w	r3, r3, #4
    8efe:	2b00      	cmp	r3, #0
    8f00:	d0f8      	beq.n	8ef4 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    8f02:	4b1f      	ldr	r3, [pc, #124]	; (8f80 <cc2400_rangetest+0x37c>)
    8f04:	2210      	movs	r2, #16
    8f06:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8f08:	bf00      	nop
    8f0a:	200e      	movs	r0, #14
    8f0c:	f001 f820 	bl	9f50 <cc2400_get>
    8f10:	4603      	mov	r3, r0
    8f12:	f003 031f 	and.w	r3, r3, #31
    8f16:	2b0f      	cmp	r3, #15
    8f18:	d1f7      	bne.n	8f0a <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8f1a:	2062      	movs	r0, #98	; 0x62
    8f1c:	f001 f8f0 	bl	a100 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8f20:	bf00      	nop
    8f22:	f001 f8e3 	bl	a0ec <cc2400_status>
    8f26:	4603      	mov	r3, r0
    8f28:	f003 0310 	and.w	r3, r3, #16
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	d0f8      	beq.n	8f22 <cc2400_rangetest+0x31e>
		USRLED_SET;
    8f30:	4b13      	ldr	r3, [pc, #76]	; (8f80 <cc2400_rangetest+0x37c>)
    8f32:	2202      	movs	r2, #2
    8f34:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8f36:	2300      	movs	r3, #0
    8f38:	64bb      	str	r3, [r7, #72]	; 0x48
    8f3a:	e00c      	b.n	8f56 <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8f3c:	2070      	movs	r0, #112	; 0x70
    8f3e:	f001 f831 	bl	9fa4 <cc2400_get8>
    8f42:	4603      	mov	r3, r0
    8f44:	4619      	mov	r1, r3
    8f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8f4a:	4413      	add	r3, r2
    8f4c:	460a      	mov	r2, r1
    8f4e:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    8f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8f52:	3301      	adds	r3, #1
    8f54:	64bb      	str	r3, [r7, #72]	; 0x48
    8f56:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8f5c:	429a      	cmp	r2, r3
    8f5e:	dced      	bgt.n	8f3c <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8f60:	f001 f8c4 	bl	a0ec <cc2400_status>
    8f64:	4603      	mov	r3, r0
    8f66:	f003 0308 	and.w	r3, r3, #8
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d001      	beq.n	8f72 <cc2400_rangetest+0x36e>
			break;
    8f6e:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8f70:	e00c      	b.n	8f8c <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    8f72:	4b05      	ldr	r3, [pc, #20]	; (8f88 <cc2400_rangetest+0x384>)
    8f74:	2202      	movs	r2, #2
    8f76:	601a      	str	r2, [r3, #0]
	}
    8f78:	e7c6      	b.n	8f08 <cc2400_rangetest+0x304>
    8f7a:	bf00      	nop
    8f7c:	100008a8 	.word	0x100008a8
    8f80:	2009c038 	.word	0x2009c038
    8f84:	2009c058 	.word	0x2009c058
    8f88:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8f8c:	200e      	movs	r0, #14
    8f8e:	f000 ffdf 	bl	9f50 <cc2400_get>
    8f92:	4603      	mov	r3, r0
    8f94:	f003 031f 	and.w	r3, r3, #31
    8f98:	2b0f      	cmp	r3, #15
    8f9a:	d1f7      	bne.n	8f8c <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    8f9c:	2064      	movs	r0, #100	; 0x64
    8f9e:	f001 f8af 	bl	a100 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8fa2:	bf00      	nop
    8fa4:	f001 f8a2 	bl	a0ec <cc2400_status>
    8fa8:	4603      	mov	r3, r0
    8faa:	f003 0304 	and.w	r3, r3, #4
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d1f8      	bne.n	8fa4 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8fb2:	4b20      	ldr	r3, [pc, #128]	; (9034 <cc2400_rangetest+0x430>)
    8fb4:	2280      	movs	r2, #128	; 0x80
    8fb6:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8fb8:	4b1f      	ldr	r3, [pc, #124]	; (9038 <cc2400_rangetest+0x434>)
    8fba:	2210      	movs	r2, #16
    8fbc:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    8fbe:	4b1f      	ldr	r3, [pc, #124]	; (903c <cc2400_rangetest+0x438>)
    8fc0:	2201      	movs	r2, #1
    8fc2:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fc6:	7c9a      	ldrb	r2, [r3, #18]
    8fc8:	4b1c      	ldr	r3, [pc, #112]	; (903c <cc2400_rangetest+0x438>)
    8fca:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fce:	7cda      	ldrb	r2, [r3, #19]
    8fd0:	4b1a      	ldr	r3, [pc, #104]	; (903c <cc2400_rangetest+0x438>)
    8fd2:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fd6:	7d1a      	ldrb	r2, [r3, #20]
    8fd8:	4b18      	ldr	r3, [pc, #96]	; (903c <cc2400_rangetest+0x438>)
    8fda:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8fde:	7d5a      	ldrb	r2, [r3, #21]
    8fe0:	4b16      	ldr	r3, [pc, #88]	; (903c <cc2400_rangetest+0x438>)
    8fe2:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fe6:	2201      	movs	r2, #1
    8fe8:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8fea:	2300      	movs	r3, #0
    8fec:	64fb      	str	r3, [r7, #76]	; 0x4c
    8fee:	e012      	b.n	9016 <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    8ff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8ff4:	4413      	add	r3, r2
    8ff6:	781a      	ldrb	r2, [r3, #0]
    8ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8ffc:	440b      	add	r3, r1
    8ffe:	781b      	ldrb	r3, [r3, #0]
    9000:	429a      	cmp	r2, r3
    9002:	d005      	beq.n	9010 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    9004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9006:	b2db      	uxtb	r3, r3
    9008:	3302      	adds	r3, #2
    900a:	b2da      	uxtb	r2, r3
    900c:	4b0b      	ldr	r3, [pc, #44]	; (903c <cc2400_rangetest+0x438>)
    900e:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    9010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9012:	3301      	adds	r3, #1
    9014:	64fb      	str	r3, [r7, #76]	; 0x4c
    9016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9018:	2b11      	cmp	r3, #17
    901a:	dde9      	ble.n	8ff0 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    901c:	4b06      	ldr	r3, [pc, #24]	; (9038 <cc2400_rangetest+0x434>)
    901e:	2202      	movs	r2, #2
    9020:	601a      	str	r2, [r3, #0]
    9022:	2301      	movs	r3, #1
    9024:	f8d7 d000 	ldr.w	sp, [r7]
    9028:	2b01      	cmp	r3, #1
#endif
}
    902a:	3754      	adds	r7, #84	; 0x54
    902c:	46bd      	mov	sp, r7
    902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9032:	bf00      	nop
    9034:	2009c05c 	.word	0x2009c05c
    9038:	2009c03c 	.word	0x2009c03c
    903c:	100010b8 	.word	0x100010b8

00009040 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    9040:	b5f0      	push	{r4, r5, r6, r7, lr}
    9042:	b089      	sub	sp, #36	; 0x24
    9044:	af00      	add	r7, sp, #0
    9046:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    9048:	2116      	movs	r1, #22
    904a:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    904c:	2100      	movs	r1, #0
    904e:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    9050:	7dbe      	ldrb	r6, [r7, #22]
    9052:	4631      	mov	r1, r6
    9054:	3901      	subs	r1, #1
    9056:	6139      	str	r1, [r7, #16]
    9058:	b2f0      	uxtb	r0, r6
    905a:	f04f 0100 	mov.w	r1, #0
    905e:	00cd      	lsls	r5, r1, #3
    9060:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    9064:	00c4      	lsls	r4, r0, #3
    9066:	b2f0      	uxtb	r0, r6
    9068:	f04f 0100 	mov.w	r1, #0
    906c:	00cb      	lsls	r3, r1, #3
    906e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    9072:	00c2      	lsls	r2, r0, #3
    9074:	4633      	mov	r3, r6
    9076:	3307      	adds	r3, #7
    9078:	08db      	lsrs	r3, r3, #3
    907a:	00db      	lsls	r3, r3, #3
    907c:	ebad 0d03 	sub.w	sp, sp, r3
    9080:	466b      	mov	r3, sp
    9082:	3300      	adds	r3, #0
    9084:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    9086:	2012      	movs	r0, #18
    9088:	f642 3122 	movw	r1, #11042	; 0x2b22
    908c:	f000 ff76 	bl	9f7c <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    9090:	2014      	movs	r0, #20
    9092:	f241 314b 	movw	r1, #4939	; 0x134b
    9096:	f000 ff71 	bl	9f7c <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	881b      	ldrh	r3, [r3, #0]
    909e:	b29b      	uxth	r3, r3
    90a0:	3b01      	subs	r3, #1
    90a2:	b29b      	uxth	r3, r3
    90a4:	2002      	movs	r0, #2
    90a6:	4619      	mov	r1, r3
    90a8:	f000 ff68 	bl	9f7c <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    90ac:	202d      	movs	r0, #45	; 0x2d
    90ae:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    90b2:	f000 ff63 	bl	9f7c <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    90b6:	202c      	movs	r0, #44	; 0x2c
    90b8:	f241 5184 	movw	r1, #5508	; 0x1584
    90bc:	f000 ff5e 	bl	9f7c <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    90c0:	2005      	movs	r0, #5
    90c2:	2108      	movs	r1, #8
    90c4:	f000 ff5a 	bl	9f7c <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    90c8:	2003      	movs	r0, #3
    90ca:	2129      	movs	r1, #41	; 0x29
    90cc:	f000 ff56 	bl	9f7c <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    90d0:	bf00      	nop
    90d2:	f001 f80b 	bl	a0ec <cc2400_status>
    90d6:	4603      	mov	r3, r0
    90d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90dc:	2b00      	cmp	r3, #0
    90de:	d0f8      	beq.n	90d2 <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    90e0:	2061      	movs	r0, #97	; 0x61
    90e2:	f001 f80d 	bl	a100 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    90e6:	bf00      	nop
    90e8:	f001 f800 	bl	a0ec <cc2400_status>
    90ec:	4603      	mov	r3, r0
    90ee:	f003 0304 	and.w	r3, r3, #4
    90f2:	2b00      	cmp	r3, #0
    90f4:	d0f8      	beq.n	90e8 <cc2400_repeater+0xa8>
		RXLED_SET;
    90f6:	4b6a      	ldr	r3, [pc, #424]	; (92a0 <cc2400_repeater+0x260>)
    90f8:	2210      	movs	r2, #16
    90fa:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    90fc:	4b69      	ldr	r3, [pc, #420]	; (92a4 <cc2400_repeater+0x264>)
    90fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    9102:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    9104:	4b67      	ldr	r3, [pc, #412]	; (92a4 <cc2400_repeater+0x264>)
    9106:	2202      	movs	r2, #2
    9108:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    910a:	4b67      	ldr	r3, [pc, #412]	; (92a8 <cc2400_repeater+0x268>)
    910c:	2280      	movs	r2, #128	; 0x80
    910e:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9110:	bf00      	nop
    9112:	200e      	movs	r0, #14
    9114:	f000 ff1c 	bl	9f50 <cc2400_get>
    9118:	4603      	mov	r3, r0
    911a:	f003 031f 	and.w	r3, r3, #31
    911e:	2b0f      	cmp	r3, #15
    9120:	d1f7      	bne.n	9112 <cc2400_repeater+0xd2>
			USRLED_CLR;
    9122:	4b60      	ldr	r3, [pc, #384]	; (92a4 <cc2400_repeater+0x264>)
    9124:	2202      	movs	r2, #2
    9126:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    9128:	2062      	movs	r0, #98	; 0x62
    912a:	f000 ffe9 	bl	a100 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    912e:	bf00      	nop
    9130:	f000 ffdc 	bl	a0ec <cc2400_status>
    9134:	4603      	mov	r3, r0
    9136:	f003 0310 	and.w	r3, r3, #16
    913a:	2b00      	cmp	r3, #0
    913c:	d0f8      	beq.n	9130 <cc2400_repeater+0xf0>
			USRLED_SET;
    913e:	4b58      	ldr	r3, [pc, #352]	; (92a0 <cc2400_repeater+0x260>)
    9140:	2202      	movs	r2, #2
    9142:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    9144:	2300      	movs	r3, #0
    9146:	61fb      	str	r3, [r7, #28]
    9148:	e00c      	b.n	9164 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    914a:	2070      	movs	r0, #112	; 0x70
    914c:	f000 ff2a 	bl	9fa4 <cc2400_get8>
    9150:	4603      	mov	r3, r0
    9152:	4619      	mov	r1, r3
    9154:	68fa      	ldr	r2, [r7, #12]
    9156:	69fb      	ldr	r3, [r7, #28]
    9158:	4413      	add	r3, r2
    915a:	460a      	mov	r2, r1
    915c:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    915e:	69fb      	ldr	r3, [r7, #28]
    9160:	3301      	adds	r3, #1
    9162:	61fb      	str	r3, [r7, #28]
    9164:	7dba      	ldrb	r2, [r7, #22]
    9166:	69fb      	ldr	r3, [r7, #28]
    9168:	429a      	cmp	r2, r3
    916a:	dcee      	bgt.n	914a <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    916c:	f000 ffbe 	bl	a0ec <cc2400_status>
    9170:	4603      	mov	r3, r0
    9172:	f003 0308 	and.w	r3, r3, #8
    9176:	2b00      	cmp	r3, #0
    9178:	d003      	beq.n	9182 <cc2400_repeater+0x142>
				break;
    917a:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    917c:	4b4b      	ldr	r3, [pc, #300]	; (92ac <cc2400_repeater+0x26c>)
    917e:	61fb      	str	r3, [r7, #28]
    9180:	e000      	b.n	9184 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    9182:	e7c5      	b.n	9110 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    9184:	69fb      	ldr	r3, [r7, #28]
    9186:	3b01      	subs	r3, #1
    9188:	61fb      	str	r3, [r7, #28]
    918a:	69fb      	ldr	r3, [r7, #28]
    918c:	2b00      	cmp	r3, #0
    918e:	d1f9      	bne.n	9184 <cc2400_repeater+0x144>
		USRLED_CLR;
    9190:	4b44      	ldr	r3, [pc, #272]	; (92a4 <cc2400_repeater+0x264>)
    9192:	2202      	movs	r2, #2
    9194:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    9196:	4b43      	ldr	r3, [pc, #268]	; (92a4 <cc2400_repeater+0x264>)
    9198:	2210      	movs	r2, #16
    919a:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    919c:	2064      	movs	r0, #100	; 0x64
    919e:	f000 ffaf 	bl	a100 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    91a2:	bf00      	nop
    91a4:	f000 ffa2 	bl	a0ec <cc2400_status>
    91a8:	4603      	mov	r3, r0
    91aa:	f003 0304 	and.w	r3, r3, #4
    91ae:	2b00      	cmp	r3, #0
    91b0:	d1f8      	bne.n	91a4 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    91b2:	bf00      	nop
    91b4:	f000 ff9a 	bl	a0ec <cc2400_status>
    91b8:	4603      	mov	r3, r0
    91ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    91be:	2b00      	cmp	r3, #0
    91c0:	d0f8      	beq.n	91b4 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    91c2:	687b      	ldr	r3, [r7, #4]
    91c4:	881b      	ldrh	r3, [r3, #0]
    91c6:	b29b      	uxth	r3, r3
    91c8:	2002      	movs	r0, #2
    91ca:	4619      	mov	r1, r3
    91cc:	f000 fed6 	bl	9f7c <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    91d0:	bf00      	nop
    91d2:	f000 ff8b 	bl	a0ec <cc2400_status>
    91d6:	4603      	mov	r3, r0
    91d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    91dc:	2b00      	cmp	r3, #0
    91de:	d0f8      	beq.n	91d2 <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    91e0:	2061      	movs	r0, #97	; 0x61
    91e2:	f000 ff8d 	bl	a100 <cc2400_strobe>
		TXLED_SET;
    91e6:	4b2e      	ldr	r3, [pc, #184]	; (92a0 <cc2400_repeater+0x260>)
    91e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    91ec:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    91ee:	7dbb      	ldrb	r3, [r7, #22]
    91f0:	3b01      	subs	r3, #1
    91f2:	b2da      	uxtb	r2, r3
    91f4:	68fb      	ldr	r3, [r7, #12]
    91f6:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    91f8:	68fb      	ldr	r3, [r7, #12]
    91fa:	2201      	movs	r2, #1
    91fc:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    91fe:	2300      	movs	r3, #0
    9200:	75fb      	strb	r3, [r7, #23]
    9202:	e039      	b.n	9278 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    9204:	7dfb      	ldrb	r3, [r7, #23]
    9206:	f043 0308 	orr.w	r3, r3, #8
    920a:	b2db      	uxtb	r3, r3
    920c:	b29b      	uxth	r3, r3
    920e:	2005      	movs	r0, #5
    9210:	4619      	mov	r1, r3
    9212:	f000 feb3 	bl	9f7c <cc2400_set>
			buf[20] = pa;
    9216:	68fb      	ldr	r3, [r7, #12]
    9218:	7dfa      	ldrb	r2, [r7, #23]
    921a:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    921c:	2300      	movs	r3, #0
    921e:	61fb      	str	r3, [r7, #28]
    9220:	e024      	b.n	926c <cc2400_repeater+0x22c>
				buf[21] = i;
    9222:	69fb      	ldr	r3, [r7, #28]
    9224:	b2da      	uxtb	r2, r3
    9226:	68fb      	ldr	r3, [r7, #12]
    9228:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    922a:	bf00      	nop
    922c:	200e      	movs	r0, #14
    922e:	f000 fe8f 	bl	9f50 <cc2400_get>
    9232:	4603      	mov	r3, r0
    9234:	f003 031f 	and.w	r3, r3, #31
    9238:	2b0f      	cmp	r3, #15
    923a:	d1f7      	bne.n	922c <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    923c:	2300      	movs	r3, #0
    923e:	61bb      	str	r3, [r7, #24]
    9240:	e00a      	b.n	9258 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    9242:	68fa      	ldr	r2, [r7, #12]
    9244:	69bb      	ldr	r3, [r7, #24]
    9246:	4413      	add	r3, r2
    9248:	781b      	ldrb	r3, [r3, #0]
    924a:	2070      	movs	r0, #112	; 0x70
    924c:	4619      	mov	r1, r3
    924e:	f000 fec3 	bl	9fd8 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    9252:	69bb      	ldr	r3, [r7, #24]
    9254:	3301      	adds	r3, #1
    9256:	61bb      	str	r3, [r7, #24]
    9258:	7dba      	ldrb	r2, [r7, #22]
    925a:	69bb      	ldr	r3, [r7, #24]
    925c:	429a      	cmp	r2, r3
    925e:	dcf0      	bgt.n	9242 <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    9260:	2063      	movs	r0, #99	; 0x63
    9262:	f000 ff4d 	bl	a100 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    9266:	69fb      	ldr	r3, [r7, #28]
    9268:	3301      	adds	r3, #1
    926a:	61fb      	str	r3, [r7, #28]
    926c:	69fb      	ldr	r3, [r7, #28]
    926e:	2b0f      	cmp	r3, #15
    9270:	ddd7      	ble.n	9222 <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    9272:	7dfb      	ldrb	r3, [r7, #23]
    9274:	3301      	adds	r3, #1
    9276:	75fb      	strb	r3, [r7, #23]
    9278:	7dfb      	ldrb	r3, [r7, #23]
    927a:	2b07      	cmp	r3, #7
    927c:	d9c2      	bls.n	9204 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    927e:	4b09      	ldr	r3, [pc, #36]	; (92a4 <cc2400_repeater+0x264>)
    9280:	f44f 7280 	mov.w	r2, #256	; 0x100
    9284:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9286:	2064      	movs	r0, #100	; 0x64
    9288:	f000 ff3a 	bl	a100 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    928c:	bf00      	nop
    928e:	f000 ff2d 	bl	a0ec <cc2400_status>
    9292:	4603      	mov	r3, r0
    9294:	f003 0304 	and.w	r3, r3, #4
    9298:	2b00      	cmp	r3, #0
    929a:	d1f8      	bne.n	928e <cc2400_repeater+0x24e>
	}
    929c:	e6f3      	b.n	9086 <cc2400_repeater+0x46>
    929e:	bf00      	nop
    92a0:	2009c038 	.word	0x2009c038
    92a4:	2009c03c 	.word	0x2009c03c
    92a8:	2009c058 	.word	0x2009c058
    92ac:	001e8480 	.word	0x001e8480

000092b0 <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    92b0:	b580      	push	{r7, lr}
    92b2:	b084      	sub	sp, #16
    92b4:	af00      	add	r7, sp, #0
    92b6:	6078      	str	r0, [r7, #4]
    92b8:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    92ba:	687b      	ldr	r3, [r7, #4]
    92bc:	781b      	ldrb	r3, [r3, #0]
    92be:	b2db      	uxtb	r3, r3
    92c0:	2b00      	cmp	r3, #0
    92c2:	d102      	bne.n	92ca <cc2400_txtest+0x1a>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    92c4:	2329      	movs	r3, #41	; 0x29
    92c6:	81fb      	strh	r3, [r7, #14]
    92c8:	e008      	b.n	92dc <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    92ca:	687b      	ldr	r3, [r7, #4]
    92cc:	781b      	ldrb	r3, [r3, #0]
    92ce:	b2db      	uxtb	r3, r3
    92d0:	2b01      	cmp	r3, #1
    92d2:	d102      	bne.n	92da <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    92d4:	2340      	movs	r3, #64	; 0x40
    92d6:	81fb      	strh	r3, [r7, #14]
    92d8:	e000      	b.n	92dc <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    92da:	e037      	b.n	934c <cc2400_txtest+0x9c>
	}
	cc2400_set(LMTST,   0x2b22);
    92dc:	2012      	movs	r0, #18
    92de:	f642 3122 	movw	r1, #11042	; 0x2b22
    92e2:	f000 fe4b 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    92e6:	2014      	movs	r0, #20
    92e8:	f243 314b 	movw	r1, #13131	; 0x334b
    92ec:	f000 fe46 	bl	9f7c <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    92f0:	2020      	movs	r0, #32
    92f2:	f640 51f1 	movw	r1, #3569	; 0xdf1
    92f6:	f000 fe41 	bl	9f7c <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    92fa:	683b      	ldr	r3, [r7, #0]
    92fc:	881b      	ldrh	r3, [r3, #0]
    92fe:	b29b      	uxth	r3, r3
    9300:	2002      	movs	r0, #2
    9302:	4619      	mov	r1, r3
    9304:	f000 fe3a 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    9308:	89fb      	ldrh	r3, [r7, #14]
    930a:	2003      	movs	r0, #3
    930c:	4619      	mov	r1, r3
    930e:	f000 fe35 	bl	9f7c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9312:	bf00      	nop
    9314:	f000 feea 	bl	a0ec <cc2400_status>
    9318:	4603      	mov	r3, r0
    931a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    931e:	2b00      	cmp	r3, #0
    9320:	d0f8      	beq.n	9314 <cc2400_txtest+0x64>
	cc2400_strobe(SFSON);
    9322:	2061      	movs	r0, #97	; 0x61
    9324:	f000 feec 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9328:	bf00      	nop
    932a:	f000 fedf 	bl	a0ec <cc2400_status>
    932e:	4603      	mov	r3, r0
    9330:	f003 0304 	and.w	r3, r3, #4
    9334:	2b00      	cmp	r3, #0
    9336:	d0f8      	beq.n	932a <cc2400_txtest+0x7a>
	TXLED_SET;
    9338:	4b06      	ldr	r3, [pc, #24]	; (9354 <cc2400_txtest+0xa4>)
    933a:	f44f 7280 	mov.w	r2, #256	; 0x100
    933e:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    9340:	2063      	movs	r0, #99	; 0x63
    9342:	f000 fedd 	bl	a100 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9346:	4b04      	ldr	r3, [pc, #16]	; (9358 <cc2400_txtest+0xa8>)
    9348:	2280      	movs	r2, #128	; 0x80
    934a:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    934c:	3710      	adds	r7, #16
    934e:	46bd      	mov	sp, r7
    9350:	bd80      	pop	{r7, pc}
    9352:	bf00      	nop
    9354:	2009c038 	.word	0x2009c038
    9358:	2009c058 	.word	0x2009c058

0000935c <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    935c:	b480      	push	{r7}
    935e:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    9360:	4b08      	ldr	r3, [pc, #32]	; (9384 <ssp_start+0x28>)
    9362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9366:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    9368:	4a07      	ldr	r2, [pc, #28]	; (9388 <ssp_start+0x2c>)
    936a:	4b07      	ldr	r3, [pc, #28]	; (9388 <ssp_start+0x2c>)
    936c:	681b      	ldr	r3, [r3, #0]
    936e:	f043 0302 	orr.w	r3, r3, #2
    9372:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    9374:	4b05      	ldr	r3, [pc, #20]	; (938c <ssp_start+0x30>)
    9376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    937a:	601a      	str	r2, [r3, #0]
}
    937c:	46bd      	mov	sp, r7
    937e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9382:	4770      	bx	lr
    9384:	2009c098 	.word	0x2009c098
    9388:	40030004 	.word	0x40030004
    938c:	2009c09c 	.word	0x2009c09c

00009390 <ssp_stop>:

static void ssp_stop() {
    9390:	b480      	push	{r7}
    9392:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    9394:	4b06      	ldr	r3, [pc, #24]	; (93b0 <ssp_stop+0x20>)
    9396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    939a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    939c:	4a05      	ldr	r2, [pc, #20]	; (93b4 <ssp_stop+0x24>)
    939e:	4b05      	ldr	r3, [pc, #20]	; (93b4 <ssp_stop+0x24>)
    93a0:	681b      	ldr	r3, [r3, #0]
    93a2:	f023 0302 	bic.w	r3, r3, #2
    93a6:	6013      	str	r3, [r2, #0]
}
    93a8:	46bd      	mov	sp, r7
    93aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    93ae:	4770      	bx	lr
    93b0:	2009c098 	.word	0x2009c098
    93b4:	40030004 	.word	0x40030004

000093b8 <ego_init>:

static void ego_init(void) {
    93b8:	b580      	push	{r7, lr}
    93ba:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    93bc:	4b03      	ldr	r3, [pc, #12]	; (93cc <ego_init+0x14>)
    93be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    93c2:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    93c4:	f000 fd08 	bl	9dd8 <dio_ssp_init>
}
    93c8:	bd80      	pop	{r7, pc}
    93ca:	bf00      	nop
    93cc:	e000e100 	.word	0xe000e100

000093d0 <ego_deinit>:

static void ego_deinit(void) {
    93d0:	b580      	push	{r7, lr}
    93d2:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    93d4:	2064      	movs	r0, #100	; 0x64
    93d6:	f000 fe93 	bl	a100 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    93da:	f7ff ffd9 	bl	9390 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    93de:	4b02      	ldr	r3, [pc, #8]	; (93e8 <ego_deinit+0x18>)
    93e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    93e4:	601a      	str	r2, [r3, #0]
}
    93e6:	bd80      	pop	{r7, pc}
    93e8:	e000e180 	.word	0xe000e180

000093ec <rf_on>:

static void rf_on(void) {
    93ec:	b580      	push	{r7, lr}
    93ee:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    93f0:	200d      	movs	r0, #13
    93f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    93f6:	f000 fdc1 	bl	9f7c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    93fa:	2012      	movs	r0, #18
    93fc:	f642 3122 	movw	r1, #11042	; 0x2b22
    9400:	f000 fdbc 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    9404:	2014      	movs	r0, #20
    9406:	f241 314b 	movw	r1, #4939	; 0x134b
    940a:	f000 fdb7 	bl	9f7c <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    940e:	2020      	movs	r0, #32
    9410:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9414:	f000 fdb2 	bl	9f7c <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    9418:	4b1e      	ldr	r3, [pc, #120]	; (9494 <rf_on+0xa8>)
    941a:	881b      	ldrh	r3, [r3, #0]
    941c:	b29b      	uxth	r3, r3
    941e:	3b01      	subs	r3, #1
    9420:	b29b      	uxth	r3, r3
    9422:	2002      	movs	r0, #2
    9424:	4619      	mov	r1, r3
    9426:	f000 fda9 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    942a:	2003      	movs	r0, #3
    942c:	2126      	movs	r1, #38	; 0x26
    942e:	f000 fda5 	bl	9f7c <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9432:	2021      	movs	r0, #33	; 0x21
    9434:	2103      	movs	r1, #3
    9436:	f000 fda1 	bl	9f7c <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    943a:	202d      	movs	r0, #45	; 0x2d
    943c:	f246 310f 	movw	r1, #25359	; 0x630f
    9440:	f000 fd9c 	bl	9f7c <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    9444:	202c      	movs	r0, #44	; 0x2c
    9446:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    944a:	f000 fd97 	bl	9f7c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    944e:	bf00      	nop
    9450:	f000 fe4c 	bl	a0ec <cc2400_status>
    9454:	4603      	mov	r3, r0
    9456:	f003 0340 	and.w	r3, r3, #64	; 0x40
    945a:	2b00      	cmp	r3, #0
    945c:	d0f8      	beq.n	9450 <rf_on+0x64>

	ssp_start();
    945e:	f7ff ff7d 	bl	935c <ssp_start>

	cc2400_strobe(SFSON);
    9462:	2061      	movs	r0, #97	; 0x61
    9464:	f000 fe4c 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9468:	bf00      	nop
    946a:	f000 fe3f 	bl	a0ec <cc2400_status>
    946e:	4603      	mov	r3, r0
    9470:	f003 0304 	and.w	r3, r3, #4
    9474:	2b00      	cmp	r3, #0
    9476:	d0f8      	beq.n	946a <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9478:	bf00      	nop
    947a:	200e      	movs	r0, #14
    947c:	f000 fd68 	bl	9f50 <cc2400_get>
    9480:	4603      	mov	r3, r0
    9482:	f003 031f 	and.w	r3, r3, #31
    9486:	2b0f      	cmp	r3, #15
    9488:	d1f7      	bne.n	947a <rf_on+0x8e>

	cc2400_strobe(SRX);
    948a:	2062      	movs	r0, #98	; 0x62
    948c:	f000 fe38 	bl	a100 <cc2400_strobe>
}
    9490:	bd80      	pop	{r7, pc}
    9492:	bf00      	nop
    9494:	1000049c 	.word	0x1000049c

00009498 <do_rx>:

void do_rx(ego_packet_t *packet) {
    9498:	b480      	push	{r7}
    949a:	b085      	sub	sp, #20
    949c:	af00      	add	r7, sp, #0
    949e:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    94a0:	2300      	movs	r3, #0
    94a2:	60fb      	str	r3, [r7, #12]
    94a4:	e011      	b.n	94ca <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    94a6:	bf00      	nop
    94a8:	4b0c      	ldr	r3, [pc, #48]	; (94dc <do_rx+0x44>)
    94aa:	681b      	ldr	r3, [r3, #0]
    94ac:	f003 0304 	and.w	r3, r3, #4
    94b0:	2b00      	cmp	r3, #0
    94b2:	d0f9      	beq.n	94a8 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    94b4:	4b0a      	ldr	r3, [pc, #40]	; (94e0 <do_rx+0x48>)
    94b6:	681b      	ldr	r3, [r3, #0]
    94b8:	b2d9      	uxtb	r1, r3
    94ba:	687a      	ldr	r2, [r7, #4]
    94bc:	68fb      	ldr	r3, [r7, #12]
    94be:	4413      	add	r3, r2
    94c0:	460a      	mov	r2, r1
    94c2:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    94c4:	68fb      	ldr	r3, [r7, #12]
    94c6:	3301      	adds	r3, #1
    94c8:	60fb      	str	r3, [r7, #12]
    94ca:	68fb      	ldr	r3, [r7, #12]
    94cc:	2b23      	cmp	r3, #35	; 0x23
    94ce:	ddea      	ble.n	94a6 <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    94d0:	3714      	adds	r7, #20
    94d2:	46bd      	mov	sp, r7
    94d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    94d8:	4770      	bx	lr
    94da:	bf00      	nop
    94dc:	4003000c 	.word	0x4003000c
    94e0:	40030008 	.word	0x40030008

000094e4 <sync_received>:

static inline int sync_received(void) {
    94e4:	b580      	push	{r7, lr}
    94e6:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    94e8:	f000 fe00 	bl	a0ec <cc2400_status>
    94ec:	4603      	mov	r3, r0
    94ee:	f003 0310 	and.w	r3, r3, #16
}
    94f2:	4618      	mov	r0, r3
    94f4:	bd80      	pop	{r7, pc}
    94f6:	bf00      	nop

000094f8 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    94f8:	b480      	push	{r7}
    94fa:	b083      	sub	sp, #12
    94fc:	af00      	add	r7, sp, #0
    94fe:	6078      	str	r0, [r7, #4]
    9500:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    9502:	4b0c      	ldr	r3, [pc, #48]	; (9534 <sleep_ms+0x3c>)
    9504:	681b      	ldr	r3, [r3, #0]
    9506:	f3c3 0313 	ubfx	r3, r3, #0, #20
    950a:	f640 4235 	movw	r2, #3125	; 0xc35
    950e:	fb02 f203 	mul.w	r2, r2, r3
    9512:	4b09      	ldr	r3, [pc, #36]	; (9538 <sleep_ms+0x40>)
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	441a      	add	r2, r3
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    951c:	683b      	ldr	r3, [r7, #0]
    951e:	f242 7210 	movw	r2, #10000	; 0x2710
    9522:	fb02 f203 	mul.w	r2, r2, r3
    9526:	687b      	ldr	r3, [r7, #4]
    9528:	60da      	str	r2, [r3, #12]
}
    952a:	370c      	adds	r7, #12
    952c:	46bd      	mov	sp, r7
    952e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9532:	4770      	bx	lr
    9534:	10000c2c 	.word	0x10000c2c
    9538:	40004008 	.word	0x40004008

0000953c <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    953c:	b480      	push	{r7}
    953e:	b083      	sub	sp, #12
    9540:	af00      	add	r7, sp, #0
    9542:	6078      	str	r0, [r7, #4]
    9544:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	699a      	ldr	r2, [r3, #24]
    954a:	687b      	ldr	r3, [r7, #4]
    954c:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    954e:	683b      	ldr	r3, [r7, #0]
    9550:	f242 7210 	movw	r2, #10000	; 0x2710
    9554:	fb02 f203 	mul.w	r2, r2, r3
    9558:	687b      	ldr	r3, [r7, #4]
    955a:	60da      	str	r2, [r3, #12]
}
    955c:	370c      	adds	r7, #12
    955e:	46bd      	mov	sp, r7
    9560:	f85d 7b04 	ldr.w	r7, [sp], #4
    9564:	4770      	bx	lr
    9566:	bf00      	nop

00009568 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    9568:	b480      	push	{r7}
    956a:	b085      	sub	sp, #20
    956c:	af00      	add	r7, sp, #0
    956e:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    9570:	4b13      	ldr	r3, [pc, #76]	; (95c0 <sleep_elapsed+0x58>)
    9572:	681b      	ldr	r3, [r3, #0]
    9574:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9578:	f640 4235 	movw	r2, #3125	; 0xc35
    957c:	fb02 f203 	mul.w	r2, r2, r3
    9580:	4b10      	ldr	r3, [pc, #64]	; (95c4 <sleep_elapsed+0x5c>)
    9582:	681b      	ldr	r3, [r3, #0]
    9584:	4413      	add	r3, r2
    9586:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    9588:	687b      	ldr	r3, [r7, #4]
    958a:	689a      	ldr	r2, [r3, #8]
    958c:	68fb      	ldr	r3, [r7, #12]
    958e:	429a      	cmp	r2, r3
    9590:	d905      	bls.n	959e <sleep_elapsed+0x36>
		now += 3276800000;
    9592:	68fb      	ldr	r3, [r7, #12]
    9594:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    9598:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    959c:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    959e:	687b      	ldr	r3, [r7, #4]
    95a0:	689b      	ldr	r3, [r3, #8]
    95a2:	68fa      	ldr	r2, [r7, #12]
    95a4:	1ad2      	subs	r2, r2, r3
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	68db      	ldr	r3, [r3, #12]
    95aa:	429a      	cmp	r2, r3
    95ac:	bf2c      	ite	cs
    95ae:	2301      	movcs	r3, #1
    95b0:	2300      	movcc	r3, #0
    95b2:	b2db      	uxtb	r3, r3
}
    95b4:	4618      	mov	r0, r3
    95b6:	3714      	adds	r7, #20
    95b8:	46bd      	mov	sp, r7
    95ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    95be:	4770      	bx	lr
    95c0:	10000c2c 	.word	0x10000c2c
    95c4:	40004008 	.word	0x40004008

000095c8 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    95c8:	b480      	push	{r7}
    95ca:	b083      	sub	sp, #12
    95cc:	af00      	add	r7, sp, #0
    95ce:	6078      	str	r0, [r7, #4]
}
    95d0:	370c      	adds	r7, #12
    95d2:	46bd      	mov	sp, r7
    95d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    95d8:	4770      	bx	lr
    95da:	bf00      	nop

000095dc <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    95dc:	b480      	push	{r7}
    95de:	b083      	sub	sp, #12
    95e0:	af00      	add	r7, sp, #0
    95e2:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    95e4:	687b      	ldr	r3, [r7, #4]
    95e6:	2200      	movs	r2, #0
    95e8:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    95ea:	687b      	ldr	r3, [r7, #4]
    95ec:	685b      	ldr	r3, [r3, #4]
    95ee:	4a06      	ldr	r2, [pc, #24]	; (9608 <init_state+0x2c>)
    95f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    95f4:	4b05      	ldr	r3, [pc, #20]	; (960c <init_state+0x30>)
    95f6:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    95f8:	687b      	ldr	r3, [r7, #4]
    95fa:	2201      	movs	r2, #1
    95fc:	701a      	strb	r2, [r3, #0]
}
    95fe:	370c      	adds	r7, #12
    9600:	46bd      	mov	sp, r7
    9602:	f85d 7b04 	ldr.w	r7, [sp], #4
    9606:	4770      	bx	lr
    9608:	100008b0 	.word	0x100008b0
    960c:	1000049c 	.word	0x1000049c

00009610 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    9610:	b580      	push	{r7, lr}
    9612:	b082      	sub	sp, #8
    9614:	af00      	add	r7, sp, #0
    9616:	6078      	str	r0, [r7, #4]
	rf_on();
    9618:	f7ff fee8 	bl	93ec <rf_on>
	state->state = EGO_ST_CAP;
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	2202      	movs	r2, #2
    9620:	701a      	strb	r2, [r3, #0]
}
    9622:	3708      	adds	r7, #8
    9624:	46bd      	mov	sp, r7
    9626:	bd80      	pop	{r7, pc}

00009628 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    9628:	b580      	push	{r7, lr}
    962a:	b08c      	sub	sp, #48	; 0x30
    962c:	af00      	add	r7, sp, #0
    962e:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9630:	f107 0308 	add.w	r3, r7, #8
    9634:	2200      	movs	r2, #0
    9636:	601a      	str	r2, [r3, #0]
    9638:	3304      	adds	r3, #4
    963a:	2200      	movs	r2, #0
    963c:	601a      	str	r2, [r3, #0]
    963e:	3304      	adds	r3, #4
    9640:	2200      	movs	r2, #0
    9642:	601a      	str	r2, [r3, #0]
    9644:	3304      	adds	r3, #4
    9646:	2200      	movs	r2, #0
    9648:	601a      	str	r2, [r3, #0]
    964a:	3304      	adds	r3, #4
    964c:	2200      	movs	r2, #0
    964e:	601a      	str	r2, [r3, #0]
    9650:	3304      	adds	r3, #4
    9652:	2200      	movs	r2, #0
    9654:	601a      	str	r2, [r3, #0]
    9656:	3304      	adds	r3, #4
    9658:	2200      	movs	r2, #0
    965a:	601a      	str	r2, [r3, #0]
    965c:	3304      	adds	r3, #4
    965e:	2200      	movs	r2, #0
    9660:	601a      	str	r2, [r3, #0]
    9662:	3304      	adds	r3, #4
    9664:	2200      	movs	r2, #0
    9666:	601a      	str	r2, [r3, #0]
    9668:	3304      	adds	r3, #4
    966a:	2200      	movs	r2, #0
    966c:	601a      	str	r2, [r3, #0]
    966e:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9670:	4b23      	ldr	r3, [pc, #140]	; (9700 <cap_state+0xd8>)
    9672:	681b      	ldr	r3, [r3, #0]
    9674:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9678:	f640 4235 	movw	r2, #3125	; 0xc35
    967c:	fb02 f203 	mul.w	r2, r2, r3
    9680:	4b20      	ldr	r3, [pc, #128]	; (9704 <cap_state+0xdc>)
    9682:	681b      	ldr	r3, [r3, #0]
    9684:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    9686:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    9688:	6878      	ldr	r0, [r7, #4]
    968a:	f7ff ff6d 	bl	9568 <sleep_elapsed>
    968e:	4603      	mov	r3, r0
    9690:	2b00      	cmp	r3, #0
    9692:	d006      	beq.n	96a2 <cap_state+0x7a>
		sleep_ms(state, 4);
    9694:	6878      	ldr	r0, [r7, #4]
    9696:	2104      	movs	r1, #4
    9698:	f7ff ff2e 	bl	94f8 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    969c:	687b      	ldr	r3, [r7, #4]
    969e:	2203      	movs	r2, #3
    96a0:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    96a2:	f7ff ff1f 	bl	94e4 <sync_received>
    96a6:	4603      	mov	r3, r0
    96a8:	2b00      	cmp	r3, #0
    96aa:	d019      	beq.n	96e0 <cap_state+0xb8>
		RXLED_SET;
    96ac:	4b16      	ldr	r3, [pc, #88]	; (9708 <cap_state+0xe0>)
    96ae:	2210      	movs	r2, #16
    96b0:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    96b2:	f107 0308 	add.w	r3, r7, #8
    96b6:	4618      	mov	r0, r3
    96b8:	f7ff feee 	bl	9498 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    96bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96be:	f107 0208 	add.w	r2, r7, #8
    96c2:	2006      	movs	r0, #6
    96c4:	4611      	mov	r1, r2
    96c6:	461a      	mov	r2, r3
    96c8:	f7fb f914 	bl	48f4 <enqueue_with_ts>
		RXLED_CLR;
    96cc:	4b0f      	ldr	r3, [pc, #60]	; (970c <cap_state+0xe4>)
    96ce:	2210      	movs	r2, #16
    96d0:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    96d2:	6878      	ldr	r0, [r7, #4]
    96d4:	2106      	movs	r1, #6
    96d6:	f7ff ff0f 	bl	94f8 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	2203      	movs	r2, #3
    96de:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	2b02      	cmp	r3, #2
    96e6:	d007      	beq.n	96f8 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    96e8:	2064      	movs	r0, #100	; 0x64
    96ea:	f000 fd09 	bl	a100 <cc2400_strobe>
		ssp_stop();
    96ee:	f7ff fe4f 	bl	9390 <ssp_stop>
		state->timer_active = 1;
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	2201      	movs	r2, #1
    96f6:	611a      	str	r2, [r3, #16]
	}
}
    96f8:	3730      	adds	r7, #48	; 0x30
    96fa:	46bd      	mov	sp, r7
    96fc:	bd80      	pop	{r7, pc}
    96fe:	bf00      	nop
    9700:	10000c2c 	.word	0x10000c2c
    9704:	40004008 	.word	0x40004008
    9708:	2009c038 	.word	0x2009c038
    970c:	2009c03c 	.word	0x2009c03c

00009710 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    9710:	b580      	push	{r7, lr}
    9712:	b082      	sub	sp, #8
    9714:	af00      	add	r7, sp, #0
    9716:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9718:	6878      	ldr	r0, [r7, #4]
    971a:	f7ff ff25 	bl	9568 <sleep_elapsed>
    971e:	4603      	mov	r3, r0
    9720:	2b00      	cmp	r3, #0
    9722:	d01e      	beq.n	9762 <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9724:	687b      	ldr	r3, [r7, #4]
    9726:	685b      	ldr	r3, [r3, #4]
    9728:	1c5a      	adds	r2, r3, #1
    972a:	4b0f      	ldr	r3, [pc, #60]	; (9768 <sleep_state+0x58>)
    972c:	4013      	ands	r3, r2
    972e:	2b00      	cmp	r3, #0
    9730:	da03      	bge.n	973a <sleep_state+0x2a>
    9732:	3b01      	subs	r3, #1
    9734:	f063 0303 	orn	r3, r3, #3
    9738:	3301      	adds	r3, #1
    973a:	461a      	mov	r2, r3
    973c:	687b      	ldr	r3, [r7, #4]
    973e:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9740:	687b      	ldr	r3, [r7, #4]
    9742:	685b      	ldr	r3, [r3, #4]
    9744:	4a09      	ldr	r2, [pc, #36]	; (976c <sleep_state+0x5c>)
    9746:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    974a:	4b09      	ldr	r3, [pc, #36]	; (9770 <sleep_state+0x60>)
    974c:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    974e:	6878      	ldr	r0, [r7, #4]
    9750:	2107      	movs	r1, #7
    9752:	f7ff fed1 	bl	94f8 <sleep_ms>
		state->timer_active = 1;
    9756:	687b      	ldr	r3, [r7, #4]
    9758:	2201      	movs	r2, #1
    975a:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	2201      	movs	r2, #1
    9760:	701a      	strb	r2, [r3, #0]
	}
}
    9762:	3708      	adds	r7, #8
    9764:	46bd      	mov	sp, r7
    9766:	bd80      	pop	{r7, pc}
    9768:	80000003 	.word	0x80000003
    976c:	100008b0 	.word	0x100008b0
    9770:	1000049c 	.word	0x1000049c

00009774 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    9774:	b480      	push	{r7}
    9776:	b083      	sub	sp, #12
    9778:	af00      	add	r7, sp, #0
    977a:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	2201      	movs	r2, #1
    9780:	701a      	strb	r2, [r3, #0]
}
    9782:	370c      	adds	r7, #12
    9784:	46bd      	mov	sp, r7
    9786:	f85d 7b04 	ldr.w	r7, [sp], #4
    978a:	4770      	bx	lr

0000978c <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    978c:	b580      	push	{r7, lr}
    978e:	b08c      	sub	sp, #48	; 0x30
    9790:	af00      	add	r7, sp, #0
    9792:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9794:	f107 0308 	add.w	r3, r7, #8
    9798:	2200      	movs	r2, #0
    979a:	601a      	str	r2, [r3, #0]
    979c:	3304      	adds	r3, #4
    979e:	2200      	movs	r2, #0
    97a0:	601a      	str	r2, [r3, #0]
    97a2:	3304      	adds	r3, #4
    97a4:	2200      	movs	r2, #0
    97a6:	601a      	str	r2, [r3, #0]
    97a8:	3304      	adds	r3, #4
    97aa:	2200      	movs	r2, #0
    97ac:	601a      	str	r2, [r3, #0]
    97ae:	3304      	adds	r3, #4
    97b0:	2200      	movs	r2, #0
    97b2:	601a      	str	r2, [r3, #0]
    97b4:	3304      	adds	r3, #4
    97b6:	2200      	movs	r2, #0
    97b8:	601a      	str	r2, [r3, #0]
    97ba:	3304      	adds	r3, #4
    97bc:	2200      	movs	r2, #0
    97be:	601a      	str	r2, [r3, #0]
    97c0:	3304      	adds	r3, #4
    97c2:	2200      	movs	r2, #0
    97c4:	601a      	str	r2, [r3, #0]
    97c6:	3304      	adds	r3, #4
    97c8:	2200      	movs	r2, #0
    97ca:	601a      	str	r2, [r3, #0]
    97cc:	3304      	adds	r3, #4
    97ce:	2200      	movs	r2, #0
    97d0:	601a      	str	r2, [r3, #0]
    97d2:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    97d4:	4b1e      	ldr	r3, [pc, #120]	; (9850 <continuous_cap_state+0xc4>)
    97d6:	681b      	ldr	r3, [r3, #0]
    97d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    97dc:	f640 4235 	movw	r2, #3125	; 0xc35
    97e0:	fb02 f203 	mul.w	r2, r2, r3
    97e4:	4b1b      	ldr	r3, [pc, #108]	; (9854 <continuous_cap_state+0xc8>)
    97e6:	681b      	ldr	r3, [r3, #0]
    97e8:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    97ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    97ec:	f7ff fe7a 	bl	94e4 <sync_received>
    97f0:	4603      	mov	r3, r0
    97f2:	2b00      	cmp	r3, #0
    97f4:	d029      	beq.n	984a <continuous_cap_state+0xbe>
		RXLED_SET;
    97f6:	4b18      	ldr	r3, [pc, #96]	; (9858 <continuous_cap_state+0xcc>)
    97f8:	2210      	movs	r2, #16
    97fa:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    97fc:	f107 0308 	add.w	r3, r7, #8
    9800:	4618      	mov	r0, r3
    9802:	f7ff fe49 	bl	9498 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    9806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9808:	f107 0208 	add.w	r2, r7, #8
    980c:	2006      	movs	r0, #6
    980e:	4611      	mov	r1, r2
    9810:	461a      	mov	r2, r3
    9812:	f7fb f86f 	bl	48f4 <enqueue_with_ts>
		RXLED_CLR;
    9816:	4b11      	ldr	r3, [pc, #68]	; (985c <continuous_cap_state+0xd0>)
    9818:	2210      	movs	r2, #16
    981a:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    981c:	2061      	movs	r0, #97	; 0x61
    981e:	f000 fc6f 	bl	a100 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    9822:	bf00      	nop
    9824:	f000 fc62 	bl	a0ec <cc2400_status>
    9828:	4603      	mov	r3, r0
    982a:	f003 0304 	and.w	r3, r3, #4
    982e:	2b00      	cmp	r3, #0
    9830:	d0f8      	beq.n	9824 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9832:	bf00      	nop
    9834:	200e      	movs	r0, #14
    9836:	f000 fb8b 	bl	9f50 <cc2400_get>
    983a:	4603      	mov	r3, r0
    983c:	f003 031f 	and.w	r3, r3, #31
    9840:	2b0f      	cmp	r3, #15
    9842:	d1f7      	bne.n	9834 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    9844:	2062      	movs	r0, #98	; 0x62
    9846:	f000 fc5b 	bl	a100 <cc2400_strobe>
	}
}
    984a:	3730      	adds	r7, #48	; 0x30
    984c:	46bd      	mov	sp, r7
    984e:	bd80      	pop	{r7, pc}
    9850:	10000c2c 	.word	0x10000c2c
    9854:	40004008 	.word	0x40004008
    9858:	2009c038 	.word	0x2009c038
    985c:	2009c03c 	.word	0x2009c03c

00009860 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    9860:	b580      	push	{r7, lr}
    9862:	b082      	sub	sp, #8
    9864:	af00      	add	r7, sp, #0
    9866:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    9868:	f7ff fe3c 	bl	94e4 <sync_received>
    986c:	4603      	mov	r3, r0
    986e:	2b00      	cmp	r3, #0
    9870:	d012      	beq.n	9898 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    9872:	687b      	ldr	r3, [r7, #4]
    9874:	2204      	movs	r2, #4
    9876:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    9878:	687b      	ldr	r3, [r7, #4]
    987a:	2201      	movs	r2, #1
    987c:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    987e:	4b16      	ldr	r3, [pc, #88]	; (98d8 <jam_cap_state+0x78>)
    9880:	681b      	ldr	r3, [r3, #0]
    9882:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9886:	f640 4235 	movw	r2, #3125	; 0xc35
    988a:	fb02 f203 	mul.w	r2, r2, r3
    988e:	4b13      	ldr	r3, [pc, #76]	; (98dc <jam_cap_state+0x7c>)
    9890:	681b      	ldr	r3, [r3, #0]
    9892:	441a      	add	r2, r3
    9894:	687b      	ldr	r3, [r7, #4]
    9896:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    9898:	687b      	ldr	r3, [r7, #4]
    989a:	691b      	ldr	r3, [r3, #16]
    989c:	2b00      	cmp	r3, #0
    989e:	d00f      	beq.n	98c0 <jam_cap_state+0x60>
    98a0:	6878      	ldr	r0, [r7, #4]
    98a2:	f7ff fe61 	bl	9568 <sleep_elapsed>
    98a6:	4603      	mov	r3, r0
    98a8:	2b00      	cmp	r3, #0
    98aa:	d009      	beq.n	98c0 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    98ac:	687b      	ldr	r3, [r7, #4]
    98ae:	2204      	movs	r2, #4
    98b0:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    98b2:	687b      	ldr	r3, [r7, #4]
    98b4:	2200      	movs	r2, #0
    98b6:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    98b8:	6878      	ldr	r0, [r7, #4]
    98ba:	210b      	movs	r1, #11
    98bc:	f7ff fe1c 	bl	94f8 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    98c0:	687b      	ldr	r3, [r7, #4]
    98c2:	781b      	ldrb	r3, [r3, #0]
    98c4:	2b02      	cmp	r3, #2
    98c6:	d004      	beq.n	98d2 <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    98c8:	2064      	movs	r0, #100	; 0x64
    98ca:	f000 fc19 	bl	a100 <cc2400_strobe>
		ssp_stop();
    98ce:	f7ff fd5f 	bl	9390 <ssp_stop>
	}
}
    98d2:	3708      	adds	r7, #8
    98d4:	46bd      	mov	sp, r7
    98d6:	bd80      	pop	{r7, pc}
    98d8:	10000c2c 	.word	0x10000c2c
    98dc:	40004008 	.word	0x40004008

000098e0 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    98e0:	b580      	push	{r7, lr}
    98e2:	b082      	sub	sp, #8
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    98e8:	200d      	movs	r0, #13
    98ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
    98ee:	f000 fb45 	bl	9f7c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    98f2:	2012      	movs	r0, #18
    98f4:	f642 3122 	movw	r1, #11042	; 0x2b22
    98f8:	f000 fb40 	bl	9f7c <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    98fc:	2014      	movs	r0, #20
    98fe:	f243 314b 	movw	r1, #13131	; 0x334b
    9902:	f000 fb3b 	bl	9f7c <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    9906:	2020      	movs	r0, #32
    9908:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    990c:	f000 fb36 	bl	9f7c <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    9910:	4b21      	ldr	r3, [pc, #132]	; (9998 <start_jamming_state+0xb8>)
    9912:	881b      	ldrh	r3, [r3, #0]
    9914:	b29b      	uxth	r3, r3
    9916:	2002      	movs	r0, #2
    9918:	4619      	mov	r1, r3
    991a:	f000 fb2f 	bl	9f7c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    991e:	2003      	movs	r0, #3
    9920:	2126      	movs	r1, #38	; 0x26
    9922:	f000 fb2b 	bl	9f7c <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9926:	2021      	movs	r0, #33	; 0x21
    9928:	2103      	movs	r1, #3
    992a:	f000 fb27 	bl	9f7c <cc2400_set>
	cc2400_set(FREND, 0xf);
    992e:	2005      	movs	r0, #5
    9930:	210f      	movs	r1, #15
    9932:	f000 fb23 	bl	9f7c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9936:	bf00      	nop
    9938:	f000 fbd8 	bl	a0ec <cc2400_status>
    993c:	4603      	mov	r3, r0
    993e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9942:	2b00      	cmp	r3, #0
    9944:	d0f8      	beq.n	9938 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    9946:	2061      	movs	r0, #97	; 0x61
    9948:	f000 fbda 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    994c:	bf00      	nop
    994e:	f000 fbcd 	bl	a0ec <cc2400_status>
    9952:	4603      	mov	r3, r0
    9954:	f003 0304 	and.w	r3, r3, #4
    9958:	2b00      	cmp	r3, #0
    995a:	d0f8      	beq.n	994e <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    995c:	bf00      	nop
    995e:	200e      	movs	r0, #14
    9960:	f000 faf6 	bl	9f50 <cc2400_get>
    9964:	4603      	mov	r3, r0
    9966:	f003 031f 	and.w	r3, r3, #31
    996a:	2b0f      	cmp	r3, #15
    996c:	d1f7      	bne.n	995e <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    996e:	4b0b      	ldr	r3, [pc, #44]	; (999c <start_jamming_state+0xbc>)
    9970:	2280      	movs	r2, #128	; 0x80
    9972:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    9974:	2063      	movs	r0, #99	; 0x63
    9976:	f000 fbc3 	bl	a100 <cc2400_strobe>
	TXLED_SET;
    997a:	4b09      	ldr	r3, [pc, #36]	; (99a0 <start_jamming_state+0xc0>)
    997c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9980:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	2205      	movs	r2, #5
    9986:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    9988:	6878      	ldr	r0, [r7, #4]
    998a:	2102      	movs	r1, #2
    998c:	f7ff fdd6 	bl	953c <sleep_ms_anchor>
}
    9990:	3708      	adds	r7, #8
    9992:	46bd      	mov	sp, r7
    9994:	bd80      	pop	{r7, pc}
    9996:	bf00      	nop
    9998:	1000049c 	.word	0x1000049c
    999c:	2009c058 	.word	0x2009c058
    99a0:	2009c038 	.word	0x2009c038

000099a4 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    99a4:	b580      	push	{r7, lr}
    99a6:	b082      	sub	sp, #8
    99a8:	af00      	add	r7, sp, #0
    99aa:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    99ac:	6878      	ldr	r0, [r7, #4]
    99ae:	f7ff fddb 	bl	9568 <sleep_elapsed>
    99b2:	4603      	mov	r3, r0
    99b4:	2b00      	cmp	r3, #0
    99b6:	d025      	beq.n	9a04 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    99b8:	2064      	movs	r0, #100	; 0x64
    99ba:	f000 fba1 	bl	a100 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    99be:	4b13      	ldr	r3, [pc, #76]	; (9a0c <jamming_state+0x68>)
    99c0:	2280      	movs	r2, #128	; 0x80
    99c2:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    99c4:	4b12      	ldr	r3, [pc, #72]	; (9a10 <jamming_state+0x6c>)
    99c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    99ca:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	685b      	ldr	r3, [r3, #4]
    99d0:	1c5a      	adds	r2, r3, #1
    99d2:	4b10      	ldr	r3, [pc, #64]	; (9a14 <jamming_state+0x70>)
    99d4:	4013      	ands	r3, r2
    99d6:	2b00      	cmp	r3, #0
    99d8:	da03      	bge.n	99e2 <jamming_state+0x3e>
    99da:	3b01      	subs	r3, #1
    99dc:	f063 0303 	orn	r3, r3, #3
    99e0:	3301      	adds	r3, #1
    99e2:	461a      	mov	r2, r3
    99e4:	687b      	ldr	r3, [r7, #4]
    99e6:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    99e8:	687b      	ldr	r3, [r7, #4]
    99ea:	685b      	ldr	r3, [r3, #4]
    99ec:	4a0a      	ldr	r2, [pc, #40]	; (9a18 <jamming_state+0x74>)
    99ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    99f2:	4b0a      	ldr	r3, [pc, #40]	; (9a1c <jamming_state+0x78>)
    99f4:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	2203      	movs	r2, #3
    99fa:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    99fc:	6878      	ldr	r0, [r7, #4]
    99fe:	2106      	movs	r1, #6
    9a00:	f7ff fd9c 	bl	953c <sleep_ms_anchor>
	}
}
    9a04:	3708      	adds	r7, #8
    9a06:	46bd      	mov	sp, r7
    9a08:	bd80      	pop	{r7, pc}
    9a0a:	bf00      	nop
    9a0c:	2009c05c 	.word	0x2009c05c
    9a10:	2009c03c 	.word	0x2009c03c
    9a14:	80000003 	.word	0x80000003
    9a18:	100008b0 	.word	0x100008b0
    9a1c:	1000049c 	.word	0x1000049c

00009a20 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    9a20:	b580      	push	{r7, lr}
    9a22:	b082      	sub	sp, #8
    9a24:	af00      	add	r7, sp, #0
    9a26:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9a28:	6878      	ldr	r0, [r7, #4]
    9a2a:	f7ff fd9d 	bl	9568 <sleep_elapsed>
    9a2e:	4603      	mov	r3, r0
    9a30:	2b00      	cmp	r3, #0
    9a32:	d009      	beq.n	9a48 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    9a34:	687b      	ldr	r3, [r7, #4]
    9a36:	2201      	movs	r2, #1
    9a38:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    9a3a:	687b      	ldr	r3, [r7, #4]
    9a3c:	2201      	movs	r2, #1
    9a3e:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    9a40:	6878      	ldr	r0, [r7, #4]
    9a42:	210b      	movs	r1, #11
    9a44:	f7ff fd7a 	bl	953c <sleep_ms_anchor>
	}
}
    9a48:	3708      	adds	r7, #8
    9a4a:	46bd      	mov	sp, r7
    9a4c:	bd80      	pop	{r7, pc}
    9a4e:	bf00      	nop

00009a50 <ego_main>:

void ego_main(ego_mode_t mode) {
    9a50:	b5b0      	push	{r4, r5, r7, lr}
    9a52:	b09e      	sub	sp, #120	; 0x78
    9a54:	af00      	add	r7, sp, #0
    9a56:	4603      	mov	r3, r0
    9a58:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    9a5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
    9a5e:	2200      	movs	r2, #0
    9a60:	601a      	str	r2, [r3, #0]
    9a62:	3304      	adds	r3, #4
    9a64:	2200      	movs	r2, #0
    9a66:	601a      	str	r2, [r3, #0]
    9a68:	3304      	adds	r3, #4
    9a6a:	2200      	movs	r2, #0
    9a6c:	601a      	str	r2, [r3, #0]
    9a6e:	3304      	adds	r3, #4
    9a70:	2200      	movs	r2, #0
    9a72:	601a      	str	r2, [r3, #0]
    9a74:	3304      	adds	r3, #4
    9a76:	2200      	movs	r2, #0
    9a78:	601a      	str	r2, [r3, #0]
    9a7a:	3304      	adds	r3, #4
    9a7c:	2200      	movs	r2, #0
    9a7e:	601a      	str	r2, [r3, #0]
    9a80:	3304      	adds	r3, #4
    9a82:	2200      	movs	r2, #0
    9a84:	601a      	str	r2, [r3, #0]
    9a86:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    9a88:	4b26      	ldr	r3, [pc, #152]	; (9b24 <ego_main+0xd4>)
    9a8a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    9a8e:	461d      	mov	r5, r3
    9a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    9a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    9a9c:	4b22      	ldr	r3, [pc, #136]	; (9b28 <ego_main+0xd8>)
    9a9e:	f107 0424 	add.w	r4, r7, #36	; 0x24
    9aa2:	461d      	mov	r5, r3
    9aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9aa8:	e895 0003 	ldmia.w	r5, {r0, r1}
    9aac:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    9ab0:	4b1e      	ldr	r3, [pc, #120]	; (9b2c <ego_main+0xdc>)
    9ab2:	f107 040c 	add.w	r4, r7, #12
    9ab6:	461d      	mov	r5, r3
    9ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9abc:	e895 0003 	ldmia.w	r5, {r0, r1}
    9ac0:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    9ac4:	79fb      	ldrb	r3, [r7, #7]
    9ac6:	2b01      	cmp	r3, #1
    9ac8:	d007      	beq.n	9ada <ego_main+0x8a>
    9aca:	2b02      	cmp	r3, #2
    9acc:	d009      	beq.n	9ae2 <ego_main+0x92>
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d10b      	bne.n	9aea <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    9ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    9ad6:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9ad8:	e00b      	b.n	9af2 <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    9ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9ade:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9ae0:	e007      	b.n	9af2 <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    9ae2:	f107 030c 	add.w	r3, r7, #12
    9ae6:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9ae8:	e003      	b.n	9af2 <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    9aea:	4b11      	ldr	r3, [pc, #68]	; (9b30 <ego_main+0xe0>)
    9aec:	2200      	movs	r2, #0
    9aee:	701a      	strb	r2, [r3, #0]
    9af0:	e015      	b.n	9b1e <ego_main+0xce>
			return;
	}

	ego_init();
    9af2:	f7ff fc61 	bl	93b8 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    9af6:	4b0e      	ldr	r3, [pc, #56]	; (9b30 <ego_main+0xe0>)
    9af8:	781b      	ldrb	r3, [r3, #0]
    9afa:	b2db      	uxtb	r3, r3
    9afc:	2b0d      	cmp	r3, #13
    9afe:	d003      	beq.n	9b08 <ego_main+0xb8>
			break;
    9b00:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    9b02:	f7ff fc65 	bl	93d0 <ego_deinit>
    9b06:	e00a      	b.n	9b1e <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    9b08:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    9b0c:	009b      	lsls	r3, r3, #2
    9b0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    9b10:	4413      	add	r3, r2
    9b12:	681b      	ldr	r3, [r3, #0]
    9b14:	f107 0258 	add.w	r2, r7, #88	; 0x58
    9b18:	4610      	mov	r0, r2
    9b1a:	4798      	blx	r3
	}
    9b1c:	e7eb      	b.n	9af6 <ego_main+0xa6>

	ego_deinit();
}
    9b1e:	3778      	adds	r7, #120	; 0x78
    9b20:	46bd      	mov	sp, r7
    9b22:	bdb0      	pop	{r4, r5, r7, pc}
    9b24:	0000becc 	.word	0x0000becc
    9b28:	0000bee8 	.word	0x0000bee8
    9b2c:	0000bf00 	.word	0x0000bf00
    9b30:	10000a3f 	.word	0x10000a3f

00009b34 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    9b34:	b580      	push	{r7, lr}
    9b36:	af00      	add	r7, sp, #0
	USBHwISR();
    9b38:	f000 ffb6 	bl	aaa8 <USBHwISR>
}
    9b3c:	bd80      	pop	{r7, pc}
    9b3e:	bf00      	nop

00009b40 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    9b40:	b580      	push	{r7, lr}
    9b42:	b082      	sub	sp, #8
    9b44:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    9b46:	4b12      	ldr	r3, [pc, #72]	; (9b90 <Reset_Handler+0x50>)
    9b48:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    9b4a:	4b12      	ldr	r3, [pc, #72]	; (9b94 <Reset_Handler+0x54>)
    9b4c:	603b      	str	r3, [r7, #0]
    9b4e:	e007      	b.n	9b60 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    9b50:	683b      	ldr	r3, [r7, #0]
    9b52:	1d1a      	adds	r2, r3, #4
    9b54:	603a      	str	r2, [r7, #0]
    9b56:	687a      	ldr	r2, [r7, #4]
    9b58:	1d11      	adds	r1, r2, #4
    9b5a:	6079      	str	r1, [r7, #4]
    9b5c:	6812      	ldr	r2, [r2, #0]
    9b5e:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9b60:	683b      	ldr	r3, [r7, #0]
    9b62:	4a0d      	ldr	r2, [pc, #52]	; (9b98 <Reset_Handler+0x58>)
    9b64:	4293      	cmp	r3, r2
    9b66:	d3f3      	bcc.n	9b50 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    9b68:	4b0c      	ldr	r3, [pc, #48]	; (9b9c <Reset_Handler+0x5c>)
    9b6a:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    9b6c:	e004      	b.n	9b78 <Reset_Handler+0x38>
	{
		*src++ = 0;
    9b6e:	687b      	ldr	r3, [r7, #4]
    9b70:	1d1a      	adds	r2, r3, #4
    9b72:	607a      	str	r2, [r7, #4]
    9b74:	2200      	movs	r2, #0
    9b76:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    9b78:	687b      	ldr	r3, [r7, #4]
    9b7a:	4a09      	ldr	r2, [pc, #36]	; (9ba0 <Reset_Handler+0x60>)
    9b7c:	4293      	cmp	r3, r2
    9b7e:	d3f6      	bcc.n	9b6e <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    9b80:	f7fa fb12 	bl	41a8 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    9b84:	4b07      	ldr	r3, [pc, #28]	; (9ba4 <Reset_Handler+0x64>)
    9b86:	4a08      	ldr	r2, [pc, #32]	; (9ba8 <Reset_Handler+0x68>)
    9b88:	601a      	str	r2, [r3, #0]
    
	main();
    9b8a:	f7fe fa6d 	bl	8068 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    9b8e:	e7fe      	b.n	9b8e <Reset_Handler+0x4e>
    9b90:	0000bf68 	.word	0x0000bf68
    9b94:	10000020 	.word	0x10000020
    9b98:	1000095e 	.word	0x1000095e
    9b9c:	10000960 	.word	0x10000960
    9ba0:	100032c0 	.word	0x100032c0
    9ba4:	e000ed08 	.word	0xe000ed08
    9ba8:	00004000 	.word	0x00004000

00009bac <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9bac:	b480      	push	{r7}
    9bae:	af00      	add	r7, sp, #0
    9bb0:	e7fe      	b.n	9bb0 <ADC_IRQHandler+0x4>
    9bb2:	bf00      	nop

00009bb4 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b082      	sub	sp, #8
    9bb8:	af00      	add	r7, sp, #0
    9bba:	4603      	mov	r3, r0
    9bbc:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    9bbe:	79fb      	ldrb	r3, [r7, #7]
    9bc0:	4a04      	ldr	r2, [pc, #16]	; (9bd4 <wait+0x20>)
    9bc2:	fb02 f303 	mul.w	r3, r2, r3
    9bc6:	4618      	mov	r0, r3
    9bc8:	f000 f818 	bl	9bfc <wait_us>
}
    9bcc:	3708      	adds	r7, #8
    9bce:	46bd      	mov	sp, r7
    9bd0:	bd80      	pop	{r7, pc}
    9bd2:	bf00      	nop
    9bd4:	000f4240 	.word	0x000f4240

00009bd8 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    9bd8:	b480      	push	{r7}
    9bda:	b085      	sub	sp, #20
    9bdc:	af00      	add	r7, sp, #0
    9bde:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    9be0:	2300      	movs	r3, #0
    9be2:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    9be4:	687b      	ldr	r3, [r7, #4]
    9be6:	fa93 f3a3 	rbit	r3, r3
    9bea:	60fb      	str	r3, [r7, #12]
  return result;
    9bec:	68fb      	ldr	r3, [r7, #12]
}
    9bee:	4618      	mov	r0, r3
    9bf0:	3714      	adds	r7, #20
    9bf2:	46bd      	mov	sp, r7
    9bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bf8:	4770      	bx	lr
    9bfa:	bf00      	nop

00009bfc <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    9bfc:	b480      	push	{r7}
    9bfe:	b083      	sub	sp, #12
    9c00:	af00      	add	r7, sp, #0
    9c02:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    9c04:	687b      	ldr	r3, [r7, #4]
    9c06:	089a      	lsrs	r2, r3, #2
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	08db      	lsrs	r3, r3, #3
    9c0c:	441a      	add	r2, r3
    9c0e:	687b      	ldr	r3, [r7, #4]
    9c10:	099b      	lsrs	r3, r3, #6
    9c12:	441a      	add	r2, r3
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	09db      	lsrs	r3, r3, #7
    9c18:	441a      	add	r2, r3
    9c1a:	687b      	ldr	r3, [r7, #4]
    9c1c:	0a9b      	lsrs	r3, r3, #10
    9c1e:	441a      	add	r2, r3
    9c20:	687b      	ldr	r3, [r7, #4]
    9c22:	0adb      	lsrs	r3, r3, #11
    9c24:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    9c26:	4a07      	ldr	r2, [pc, #28]	; (9c44 <wait_us+0x48>)
    9c28:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    9c2a:	bf00      	nop
    9c2c:	4b05      	ldr	r3, [pc, #20]	; (9c44 <wait_us+0x48>)
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	3b01      	subs	r3, #1
    9c32:	4a04      	ldr	r2, [pc, #16]	; (9c44 <wait_us+0x48>)
    9c34:	6013      	str	r3, [r2, #0]
    9c36:	2b00      	cmp	r3, #0
    9c38:	d1f8      	bne.n	9c2c <wait_us+0x30>
}
    9c3a:	370c      	adds	r7, #12
    9c3c:	46bd      	mov	sp, r7
    9c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c42:	4770      	bx	lr
    9c44:	10000a68 	.word	0x10000a68

00009c48 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    9c48:	b580      	push	{r7, lr}
    9c4a:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    9c4c:	f000 f836 	bl	9cbc <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    9c50:	4b10      	ldr	r3, [pc, #64]	; (9c94 <gpio_init+0x4c>)
    9c52:	2200      	movs	r2, #0
    9c54:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9c56:	4b10      	ldr	r3, [pc, #64]	; (9c98 <gpio_init+0x50>)
    9c58:	f24c 7212 	movw	r2, #50962	; 0xc712
    9c5c:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9c5e:	4b0f      	ldr	r3, [pc, #60]	; (9c9c <gpio_init+0x54>)
    9c60:	f240 12b1 	movw	r2, #433	; 0x1b1
    9c64:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9c66:	4b0e      	ldr	r3, [pc, #56]	; (9ca0 <gpio_init+0x58>)
    9c68:	2200      	movs	r2, #0
    9c6a:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9c6c:	4b0d      	ldr	r3, [pc, #52]	; (9ca4 <gpio_init+0x5c>)
    9c6e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    9c72:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    9c74:	4b0c      	ldr	r3, [pc, #48]	; (9ca8 <gpio_init+0x60>)
    9c76:	2200      	movs	r2, #0
    9c78:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9c7a:	4b0c      	ldr	r3, [pc, #48]	; (9cac <gpio_init+0x64>)
    9c7c:	2200      	movs	r2, #0
    9c7e:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9c80:	4b0b      	ldr	r3, [pc, #44]	; (9cb0 <gpio_init+0x68>)
    9c82:	2200      	movs	r2, #0
    9c84:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9c86:	4b0b      	ldr	r3, [pc, #44]	; (9cb4 <gpio_init+0x6c>)
    9c88:	2200      	movs	r2, #0
    9c8a:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9c8c:	4b0a      	ldr	r3, [pc, #40]	; (9cb8 <gpio_init+0x70>)
    9c8e:	2200      	movs	r2, #0
    9c90:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    9c92:	bd80      	pop	{r7, pc}
    9c94:	2009c000 	.word	0x2009c000
    9c98:	2009c020 	.word	0x2009c020
    9c9c:	2009c040 	.word	0x2009c040
    9ca0:	2009c060 	.word	0x2009c060
    9ca4:	2009c080 	.word	0x2009c080
    9ca8:	2009c014 	.word	0x2009c014
    9cac:	2009c034 	.word	0x2009c034
    9cb0:	2009c054 	.word	0x2009c054
    9cb4:	2009c074 	.word	0x2009c074
    9cb8:	2009c094 	.word	0x2009c094

00009cbc <all_pins_off>:

void all_pins_off(void)
{
    9cbc:	b480      	push	{r7}
    9cbe:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9cc0:	4b27      	ldr	r3, [pc, #156]	; (9d60 <all_pins_off+0xa4>)
    9cc2:	2200      	movs	r2, #0
    9cc4:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    9cc6:	4b27      	ldr	r3, [pc, #156]	; (9d64 <all_pins_off+0xa8>)
    9cc8:	2200      	movs	r2, #0
    9cca:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    9ccc:	4b26      	ldr	r3, [pc, #152]	; (9d68 <all_pins_off+0xac>)
    9cce:	2200      	movs	r2, #0
    9cd0:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    9cd2:	4b26      	ldr	r3, [pc, #152]	; (9d6c <all_pins_off+0xb0>)
    9cd4:	2200      	movs	r2, #0
    9cd6:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9cd8:	4b25      	ldr	r3, [pc, #148]	; (9d70 <all_pins_off+0xb4>)
    9cda:	2200      	movs	r2, #0
    9cdc:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    9cde:	4b25      	ldr	r3, [pc, #148]	; (9d74 <all_pins_off+0xb8>)
    9ce0:	2200      	movs	r2, #0
    9ce2:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    9ce4:	4b24      	ldr	r3, [pc, #144]	; (9d78 <all_pins_off+0xbc>)
    9ce6:	2200      	movs	r2, #0
    9ce8:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    9cea:	4b24      	ldr	r3, [pc, #144]	; (9d7c <all_pins_off+0xc0>)
    9cec:	2200      	movs	r2, #0
    9cee:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    9cf0:	4b23      	ldr	r3, [pc, #140]	; (9d80 <all_pins_off+0xc4>)
    9cf2:	2200      	movs	r2, #0
    9cf4:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    9cf6:	4b23      	ldr	r3, [pc, #140]	; (9d84 <all_pins_off+0xc8>)
    9cf8:	2200      	movs	r2, #0
    9cfa:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    9cfc:	4b22      	ldr	r3, [pc, #136]	; (9d88 <all_pins_off+0xcc>)
    9cfe:	2200      	movs	r2, #0
    9d00:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9d02:	4b22      	ldr	r3, [pc, #136]	; (9d8c <all_pins_off+0xd0>)
    9d04:	2200      	movs	r2, #0
    9d06:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    9d08:	4b21      	ldr	r3, [pc, #132]	; (9d90 <all_pins_off+0xd4>)
    9d0a:	2200      	movs	r2, #0
    9d0c:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    9d0e:	4b21      	ldr	r3, [pc, #132]	; (9d94 <all_pins_off+0xd8>)
    9d10:	2200      	movs	r2, #0
    9d12:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    9d14:	4b20      	ldr	r3, [pc, #128]	; (9d98 <all_pins_off+0xdc>)
    9d16:	2200      	movs	r2, #0
    9d18:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    9d1a:	4b20      	ldr	r3, [pc, #128]	; (9d9c <all_pins_off+0xe0>)
    9d1c:	2200      	movs	r2, #0
    9d1e:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    9d20:	4b1f      	ldr	r3, [pc, #124]	; (9da0 <all_pins_off+0xe4>)
    9d22:	2200      	movs	r2, #0
    9d24:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    9d26:	4b1f      	ldr	r3, [pc, #124]	; (9da4 <all_pins_off+0xe8>)
    9d28:	2200      	movs	r2, #0
    9d2a:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    9d2c:	4b1e      	ldr	r3, [pc, #120]	; (9da8 <all_pins_off+0xec>)
    9d2e:	2200      	movs	r2, #0
    9d30:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    9d32:	4b1e      	ldr	r3, [pc, #120]	; (9dac <all_pins_off+0xf0>)
    9d34:	2200      	movs	r2, #0
    9d36:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    9d38:	4b1d      	ldr	r3, [pc, #116]	; (9db0 <all_pins_off+0xf4>)
    9d3a:	2200      	movs	r2, #0
    9d3c:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9d3e:	4b1d      	ldr	r3, [pc, #116]	; (9db4 <all_pins_off+0xf8>)
    9d40:	2200      	movs	r2, #0
    9d42:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9d44:	4b1c      	ldr	r3, [pc, #112]	; (9db8 <all_pins_off+0xfc>)
    9d46:	2200      	movs	r2, #0
    9d48:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9d4a:	4b1c      	ldr	r3, [pc, #112]	; (9dbc <all_pins_off+0x100>)
    9d4c:	2200      	movs	r2, #0
    9d4e:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9d50:	4b1b      	ldr	r3, [pc, #108]	; (9dc0 <all_pins_off+0x104>)
    9d52:	2200      	movs	r2, #0
    9d54:	601a      	str	r2, [r3, #0]
}
    9d56:	46bd      	mov	sp, r7
    9d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5c:	4770      	bx	lr
    9d5e:	bf00      	nop
    9d60:	4002c000 	.word	0x4002c000
    9d64:	4002c004 	.word	0x4002c004
    9d68:	4002c008 	.word	0x4002c008
    9d6c:	4002c00c 	.word	0x4002c00c
    9d70:	4002c010 	.word	0x4002c010
    9d74:	4002c01c 	.word	0x4002c01c
    9d78:	4002c024 	.word	0x4002c024
    9d7c:	4002c028 	.word	0x4002c028
    9d80:	2009c000 	.word	0x2009c000
    9d84:	2009c020 	.word	0x2009c020
    9d88:	2009c040 	.word	0x2009c040
    9d8c:	2009c060 	.word	0x2009c060
    9d90:	2009c080 	.word	0x2009c080
    9d94:	4002c040 	.word	0x4002c040
    9d98:	4002c044 	.word	0x4002c044
    9d9c:	4002c048 	.word	0x4002c048
    9da0:	4002c04c 	.word	0x4002c04c
    9da4:	4002c050 	.word	0x4002c050
    9da8:	4002c05c 	.word	0x4002c05c
    9dac:	4002c064 	.word	0x4002c064
    9db0:	2009c014 	.word	0x2009c014
    9db4:	2009c034 	.word	0x2009c034
    9db8:	2009c054 	.word	0x2009c054
    9dbc:	2009c074 	.word	0x2009c074
    9dc0:	2009c094 	.word	0x2009c094

00009dc4 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    9dc4:	b580      	push	{r7, lr}
    9dc6:	af00      	add	r7, sp, #0
	gpio_init();
    9dc8:	f7ff ff3e 	bl	9c48 <gpio_init>
	cc2400_init();
    9dcc:	f000 f860 	bl	9e90 <cc2400_init>
	clock_start();
    9dd0:	f000 f9c2 	bl	a158 <clock_start>
}
    9dd4:	bd80      	pop	{r7, pc}
    9dd6:	bf00      	nop

00009dd8 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    9dd8:	b480      	push	{r7}
    9dda:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9ddc:	4a16      	ldr	r2, [pc, #88]	; (9e38 <dio_ssp_init+0x60>)
    9dde:	4b16      	ldr	r3, [pc, #88]	; (9e38 <dio_ssp_init+0x60>)
    9de0:	681b      	ldr	r3, [r3, #0]
    9de2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    9de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9dea:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9dec:	4a12      	ldr	r2, [pc, #72]	; (9e38 <dio_ssp_init+0x60>)
    9dee:	4b12      	ldr	r3, [pc, #72]	; (9e38 <dio_ssp_init+0x60>)
    9df0:	681b      	ldr	r3, [r3, #0]
    9df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    9df6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9dfa:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9dfc:	4a0e      	ldr	r2, [pc, #56]	; (9e38 <dio_ssp_init+0x60>)
    9dfe:	4b0e      	ldr	r3, [pc, #56]	; (9e38 <dio_ssp_init+0x60>)
    9e00:	681b      	ldr	r3, [r3, #0]
    9e02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    9e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9e0a:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9e0c:	4a0a      	ldr	r2, [pc, #40]	; (9e38 <dio_ssp_init+0x60>)
    9e0e:	4b0a      	ldr	r3, [pc, #40]	; (9e38 <dio_ssp_init+0x60>)
    9e10:	681b      	ldr	r3, [r3, #0]
    9e12:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    9e16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    9e1a:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    9e1c:	4b07      	ldr	r3, [pc, #28]	; (9e3c <dio_ssp_init+0x64>)
    9e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9e22:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    9e24:	4b06      	ldr	r3, [pc, #24]	; (9e40 <dio_ssp_init+0x68>)
    9e26:	22c7      	movs	r2, #199	; 0xc7
    9e28:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    9e2a:	4b06      	ldr	r3, [pc, #24]	; (9e44 <dio_ssp_init+0x6c>)
    9e2c:	220c      	movs	r2, #12
    9e2e:	601a      	str	r2, [r3, #0]
}
    9e30:	46bd      	mov	sp, r7
    9e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e36:	4770      	bx	lr
    9e38:	4002c000 	.word	0x4002c000
    9e3c:	2009c098 	.word	0x2009c098
    9e40:	40030000 	.word	0x40030000
    9e44:	40030004 	.word	0x40030004

00009e48 <atest_init>:

void atest_init()
{
    9e48:	b480      	push	{r7}
    9e4a:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    9e4c:	4a0d      	ldr	r2, [pc, #52]	; (9e84 <atest_init+0x3c>)
    9e4e:	4b0d      	ldr	r3, [pc, #52]	; (9e84 <atest_init+0x3c>)
    9e50:	681b      	ldr	r3, [r3, #0]
    9e52:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    9e56:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    9e58:	4a0b      	ldr	r2, [pc, #44]	; (9e88 <atest_init+0x40>)
    9e5a:	4b0b      	ldr	r3, [pc, #44]	; (9e88 <atest_init+0x40>)
    9e5c:	681b      	ldr	r3, [r3, #0]
    9e5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    9e62:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9e64:	4a09      	ldr	r2, [pc, #36]	; (9e8c <atest_init+0x44>)
    9e66:	4b09      	ldr	r3, [pc, #36]	; (9e8c <atest_init+0x44>)
    9e68:	681b      	ldr	r3, [r3, #0]
    9e6a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    9e6e:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9e70:	4a06      	ldr	r2, [pc, #24]	; (9e8c <atest_init+0x44>)
    9e72:	4b06      	ldr	r3, [pc, #24]	; (9e8c <atest_init+0x44>)
    9e74:	681b      	ldr	r3, [r3, #0]
    9e76:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    9e7a:	6013      	str	r3, [r2, #0]
}
    9e7c:	46bd      	mov	sp, r7
    9e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e82:	4770      	bx	lr
    9e84:	4002c004 	.word	0x4002c004
    9e88:	2009c000 	.word	0x2009c000
    9e8c:	4002c044 	.word	0x4002c044

00009e90 <cc2400_init>:

void cc2400_init()
{
    9e90:	b580      	push	{r7, lr}
    9e92:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    9e94:	f7ff ffd8 	bl	9e48 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    9e98:	4b09      	ldr	r3, [pc, #36]	; (9ec0 <cc2400_init+0x30>)
    9e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
    9e9e:	601a      	str	r2, [r3, #0]
	wait_us(50);
    9ea0:	2032      	movs	r0, #50	; 0x32
    9ea2:	f7ff feab 	bl	9bfc <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    9ea6:	4b07      	ldr	r3, [pc, #28]	; (9ec4 <cc2400_init+0x34>)
    9ea8:	2220      	movs	r2, #32
    9eaa:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    9eac:	4b04      	ldr	r3, [pc, #16]	; (9ec0 <cc2400_init+0x30>)
    9eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9eb2:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    9eb4:	200d      	movs	r0, #13
    9eb6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9eba:	f000 f85f 	bl	9f7c <cc2400_set>
}
    9ebe:	bd80      	pop	{r7, pc}
    9ec0:	2009c038 	.word	0x2009c038
    9ec4:	2009c058 	.word	0x2009c058

00009ec8 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9ec8:	b480      	push	{r7}
    9eca:	b085      	sub	sp, #20
    9ecc:	af00      	add	r7, sp, #0
    9ece:	4603      	mov	r3, r0
    9ed0:	6039      	str	r1, [r7, #0]
    9ed2:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9ed4:	79fb      	ldrb	r3, [r7, #7]
    9ed6:	3b01      	subs	r3, #1
    9ed8:	2201      	movs	r2, #1
    9eda:	fa02 f303 	lsl.w	r3, r2, r3
    9ede:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9ee0:	4b18      	ldr	r3, [pc, #96]	; (9f44 <cc2400_spi+0x7c>)
    9ee2:	2220      	movs	r2, #32
    9ee4:	601a      	str	r2, [r3, #0]

	while (len--) {
    9ee6:	e01e      	b.n	9f26 <cc2400_spi+0x5e>
		if (data & msb)
    9ee8:	683a      	ldr	r2, [r7, #0]
    9eea:	68fb      	ldr	r3, [r7, #12]
    9eec:	4013      	ands	r3, r2
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d003      	beq.n	9efa <cc2400_spi+0x32>
			MOSI_SET;
    9ef2:	4b15      	ldr	r3, [pc, #84]	; (9f48 <cc2400_spi+0x80>)
    9ef4:	2201      	movs	r2, #1
    9ef6:	601a      	str	r2, [r3, #0]
    9ef8:	e002      	b.n	9f00 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    9efa:	4b12      	ldr	r3, [pc, #72]	; (9f44 <cc2400_spi+0x7c>)
    9efc:	2201      	movs	r2, #1
    9efe:	601a      	str	r2, [r3, #0]
		data <<= 1;
    9f00:	683b      	ldr	r3, [r7, #0]
    9f02:	005b      	lsls	r3, r3, #1
    9f04:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    9f06:	4b10      	ldr	r3, [pc, #64]	; (9f48 <cc2400_spi+0x80>)
    9f08:	2210      	movs	r2, #16
    9f0a:	601a      	str	r2, [r3, #0]
		if (MISO)
    9f0c:	4b0f      	ldr	r3, [pc, #60]	; (9f4c <cc2400_spi+0x84>)
    9f0e:	681b      	ldr	r3, [r3, #0]
    9f10:	f003 0302 	and.w	r3, r3, #2
    9f14:	2b00      	cmp	r3, #0
    9f16:	d003      	beq.n	9f20 <cc2400_spi+0x58>
			data |= 1;
    9f18:	683b      	ldr	r3, [r7, #0]
    9f1a:	f043 0301 	orr.w	r3, r3, #1
    9f1e:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    9f20:	4b08      	ldr	r3, [pc, #32]	; (9f44 <cc2400_spi+0x7c>)
    9f22:	2210      	movs	r2, #16
    9f24:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    9f26:	79fb      	ldrb	r3, [r7, #7]
    9f28:	1e5a      	subs	r2, r3, #1
    9f2a:	71fa      	strb	r2, [r7, #7]
    9f2c:	2b00      	cmp	r3, #0
    9f2e:	d1db      	bne.n	9ee8 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9f30:	4b05      	ldr	r3, [pc, #20]	; (9f48 <cc2400_spi+0x80>)
    9f32:	2220      	movs	r2, #32
    9f34:	601a      	str	r2, [r3, #0]

	return data;
    9f36:	683b      	ldr	r3, [r7, #0]
}
    9f38:	4618      	mov	r0, r3
    9f3a:	3714      	adds	r7, #20
    9f3c:	46bd      	mov	sp, r7
    9f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f42:	4770      	bx	lr
    9f44:	2009c05c 	.word	0x2009c05c
    9f48:	2009c058 	.word	0x2009c058
    9f4c:	2009c054 	.word	0x2009c054

00009f50 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9f50:	b580      	push	{r7, lr}
    9f52:	b084      	sub	sp, #16
    9f54:	af00      	add	r7, sp, #0
    9f56:	4603      	mov	r3, r0
    9f58:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    9f5a:	79fb      	ldrb	r3, [r7, #7]
    9f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9f60:	b2db      	uxtb	r3, r3
    9f62:	041b      	lsls	r3, r3, #16
    9f64:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9f66:	2018      	movs	r0, #24
    9f68:	68f9      	ldr	r1, [r7, #12]
    9f6a:	f7ff ffad 	bl	9ec8 <cc2400_spi>
    9f6e:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9f70:	68bb      	ldr	r3, [r7, #8]
    9f72:	b29b      	uxth	r3, r3
}
    9f74:	4618      	mov	r0, r3
    9f76:	3710      	adds	r7, #16
    9f78:	46bd      	mov	sp, r7
    9f7a:	bd80      	pop	{r7, pc}

00009f7c <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    9f7c:	b580      	push	{r7, lr}
    9f7e:	b084      	sub	sp, #16
    9f80:	af00      	add	r7, sp, #0
    9f82:	4603      	mov	r3, r0
    9f84:	460a      	mov	r2, r1
    9f86:	71fb      	strb	r3, [r7, #7]
    9f88:	4613      	mov	r3, r2
    9f8a:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    9f8c:	79fb      	ldrb	r3, [r7, #7]
    9f8e:	041a      	lsls	r2, r3, #16
    9f90:	88bb      	ldrh	r3, [r7, #4]
    9f92:	4313      	orrs	r3, r2
    9f94:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9f96:	2018      	movs	r0, #24
    9f98:	68f9      	ldr	r1, [r7, #12]
    9f9a:	f7ff ff95 	bl	9ec8 <cc2400_spi>
}
    9f9e:	3710      	adds	r7, #16
    9fa0:	46bd      	mov	sp, r7
    9fa2:	bd80      	pop	{r7, pc}

00009fa4 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9fa4:	b580      	push	{r7, lr}
    9fa6:	b084      	sub	sp, #16
    9fa8:	af00      	add	r7, sp, #0
    9faa:	4603      	mov	r3, r0
    9fac:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    9fae:	79fb      	ldrb	r3, [r7, #7]
    9fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9fb4:	b2db      	uxtb	r3, r3
    9fb6:	b29b      	uxth	r3, r3
    9fb8:	021b      	lsls	r3, r3, #8
    9fba:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    9fbc:	89fb      	ldrh	r3, [r7, #14]
    9fbe:	2010      	movs	r0, #16
    9fc0:	4619      	mov	r1, r3
    9fc2:	f7ff ff81 	bl	9ec8 <cc2400_spi>
    9fc6:	4603      	mov	r3, r0
    9fc8:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    9fca:	89bb      	ldrh	r3, [r7, #12]
    9fcc:	b2db      	uxtb	r3, r3
}
    9fce:	4618      	mov	r0, r3
    9fd0:	3710      	adds	r7, #16
    9fd2:	46bd      	mov	sp, r7
    9fd4:	bd80      	pop	{r7, pc}
    9fd6:	bf00      	nop

00009fd8 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9fd8:	b580      	push	{r7, lr}
    9fda:	b084      	sub	sp, #16
    9fdc:	af00      	add	r7, sp, #0
    9fde:	4603      	mov	r3, r0
    9fe0:	460a      	mov	r2, r1
    9fe2:	71fb      	strb	r3, [r7, #7]
    9fe4:	4613      	mov	r3, r2
    9fe6:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9fe8:	79fb      	ldrb	r3, [r7, #7]
    9fea:	021a      	lsls	r2, r3, #8
    9fec:	79bb      	ldrb	r3, [r7, #6]
    9fee:	4313      	orrs	r3, r2
    9ff0:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    9ff2:	2010      	movs	r0, #16
    9ff4:	68f9      	ldr	r1, [r7, #12]
    9ff6:	f7ff ff67 	bl	9ec8 <cc2400_spi>
}
    9ffa:	3710      	adds	r7, #16
    9ffc:	46bd      	mov	sp, r7
    9ffe:	bd80      	pop	{r7, pc}

0000a000 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    a000:	b480      	push	{r7}
    a002:	b085      	sub	sp, #20
    a004:	af00      	add	r7, sp, #0
    a006:	4603      	mov	r3, r0
    a008:	603a      	str	r2, [r7, #0]
    a00a:	71fb      	strb	r3, [r7, #7]
    a00c:	460b      	mov	r3, r1
    a00e:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    a010:	2380      	movs	r3, #128	; 0x80
    a012:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    a014:	4b33      	ldr	r3, [pc, #204]	; (a0e4 <cc2400_spi_buf+0xe4>)
    a016:	2220      	movs	r2, #32
    a018:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    a01a:	2300      	movs	r3, #0
    a01c:	73fb      	strb	r3, [r7, #15]
    a01e:	e018      	b.n	a052 <cc2400_spi_buf+0x52>
		if (reg & msb)
    a020:	79fa      	ldrb	r2, [r7, #7]
    a022:	7b3b      	ldrb	r3, [r7, #12]
    a024:	4013      	ands	r3, r2
    a026:	b2db      	uxtb	r3, r3
    a028:	2b00      	cmp	r3, #0
    a02a:	d003      	beq.n	a034 <cc2400_spi_buf+0x34>
			MOSI_SET;
    a02c:	4b2e      	ldr	r3, [pc, #184]	; (a0e8 <cc2400_spi_buf+0xe8>)
    a02e:	2201      	movs	r2, #1
    a030:	601a      	str	r2, [r3, #0]
    a032:	e002      	b.n	a03a <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    a034:	4b2b      	ldr	r3, [pc, #172]	; (a0e4 <cc2400_spi_buf+0xe4>)
    a036:	2201      	movs	r2, #1
    a038:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    a03a:	79fb      	ldrb	r3, [r7, #7]
    a03c:	005b      	lsls	r3, r3, #1
    a03e:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    a040:	4b29      	ldr	r3, [pc, #164]	; (a0e8 <cc2400_spi_buf+0xe8>)
    a042:	2210      	movs	r2, #16
    a044:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    a046:	4b27      	ldr	r3, [pc, #156]	; (a0e4 <cc2400_spi_buf+0xe4>)
    a048:	2210      	movs	r2, #16
    a04a:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    a04c:	7bfb      	ldrb	r3, [r7, #15]
    a04e:	3301      	adds	r3, #1
    a050:	73fb      	strb	r3, [r7, #15]
    a052:	7bfb      	ldrb	r3, [r7, #15]
    a054:	2b07      	cmp	r3, #7
    a056:	d9e3      	bls.n	a020 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    a058:	2300      	movs	r3, #0
    a05a:	73fb      	strb	r3, [r7, #15]
    a05c:	e026      	b.n	a0ac <cc2400_spi_buf+0xac>
		temp = data[i];
    a05e:	7bfb      	ldrb	r3, [r7, #15]
    a060:	683a      	ldr	r2, [r7, #0]
    a062:	4413      	add	r3, r2
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    a068:	2300      	movs	r3, #0
    a06a:	73bb      	strb	r3, [r7, #14]
    a06c:	e018      	b.n	a0a0 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    a06e:	7b7a      	ldrb	r2, [r7, #13]
    a070:	7b3b      	ldrb	r3, [r7, #12]
    a072:	4013      	ands	r3, r2
    a074:	b2db      	uxtb	r3, r3
    a076:	2b00      	cmp	r3, #0
    a078:	d003      	beq.n	a082 <cc2400_spi_buf+0x82>
				MOSI_SET;
    a07a:	4b1b      	ldr	r3, [pc, #108]	; (a0e8 <cc2400_spi_buf+0xe8>)
    a07c:	2201      	movs	r2, #1
    a07e:	601a      	str	r2, [r3, #0]
    a080:	e002      	b.n	a088 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    a082:	4b18      	ldr	r3, [pc, #96]	; (a0e4 <cc2400_spi_buf+0xe4>)
    a084:	2201      	movs	r2, #1
    a086:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    a088:	7b7b      	ldrb	r3, [r7, #13]
    a08a:	005b      	lsls	r3, r3, #1
    a08c:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    a08e:	4b16      	ldr	r3, [pc, #88]	; (a0e8 <cc2400_spi_buf+0xe8>)
    a090:	2210      	movs	r2, #16
    a092:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    a094:	4b13      	ldr	r3, [pc, #76]	; (a0e4 <cc2400_spi_buf+0xe4>)
    a096:	2210      	movs	r2, #16
    a098:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    a09a:	7bbb      	ldrb	r3, [r7, #14]
    a09c:	3301      	adds	r3, #1
    a09e:	73bb      	strb	r3, [r7, #14]
    a0a0:	7bbb      	ldrb	r3, [r7, #14]
    a0a2:	2b07      	cmp	r3, #7
    a0a4:	d9e3      	bls.n	a06e <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    a0a6:	7bfb      	ldrb	r3, [r7, #15]
    a0a8:	3301      	adds	r3, #1
    a0aa:	73fb      	strb	r3, [r7, #15]
    a0ac:	7bfa      	ldrb	r2, [r7, #15]
    a0ae:	79bb      	ldrb	r3, [r7, #6]
    a0b0:	429a      	cmp	r2, r3
    a0b2:	d3d4      	bcc.n	a05e <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    a0b4:	2300      	movs	r3, #0
    a0b6:	73fb      	strb	r3, [r7, #15]
    a0b8:	e008      	b.n	a0cc <cc2400_spi_buf+0xcc>
		SCLK_SET;
    a0ba:	4b0b      	ldr	r3, [pc, #44]	; (a0e8 <cc2400_spi_buf+0xe8>)
    a0bc:	2210      	movs	r2, #16
    a0be:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    a0c0:	4b08      	ldr	r3, [pc, #32]	; (a0e4 <cc2400_spi_buf+0xe4>)
    a0c2:	2210      	movs	r2, #16
    a0c4:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    a0c6:	7bfb      	ldrb	r3, [r7, #15]
    a0c8:	3301      	adds	r3, #1
    a0ca:	73fb      	strb	r3, [r7, #15]
    a0cc:	7bfb      	ldrb	r3, [r7, #15]
    a0ce:	2b07      	cmp	r3, #7
    a0d0:	d9f3      	bls.n	a0ba <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    a0d2:	4b05      	ldr	r3, [pc, #20]	; (a0e8 <cc2400_spi_buf+0xe8>)
    a0d4:	2220      	movs	r2, #32
    a0d6:	601a      	str	r2, [r3, #0]
}
    a0d8:	3714      	adds	r7, #20
    a0da:	46bd      	mov	sp, r7
    a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0e0:	4770      	bx	lr
    a0e2:	bf00      	nop
    a0e4:	2009c05c 	.word	0x2009c05c
    a0e8:	2009c058 	.word	0x2009c058

0000a0ec <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    a0ec:	b580      	push	{r7, lr}
    a0ee:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    a0f0:	2008      	movs	r0, #8
    a0f2:	2100      	movs	r1, #0
    a0f4:	f7ff fee8 	bl	9ec8 <cc2400_spi>
    a0f8:	4603      	mov	r3, r0
    a0fa:	b2db      	uxtb	r3, r3
}
    a0fc:	4618      	mov	r0, r3
    a0fe:	bd80      	pop	{r7, pc}

0000a100 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    a100:	b580      	push	{r7, lr}
    a102:	b082      	sub	sp, #8
    a104:	af00      	add	r7, sp, #0
    a106:	4603      	mov	r3, r0
    a108:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    a10a:	79fb      	ldrb	r3, [r7, #7]
    a10c:	2008      	movs	r0, #8
    a10e:	4619      	mov	r1, r3
    a110:	f7ff feda 	bl	9ec8 <cc2400_spi>
    a114:	4603      	mov	r3, r0
    a116:	b2db      	uxtb	r3, r3
}
    a118:	4618      	mov	r0, r3
    a11a:	3708      	adds	r7, #8
    a11c:	46bd      	mov	sp, r7
    a11e:	bd80      	pop	{r7, pc}

0000a120 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    a120:	b580      	push	{r7, lr}
    a122:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    a124:	2000      	movs	r0, #0
    a126:	2100      	movs	r1, #0
    a128:	f7ff ff28 	bl	9f7c <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    a12c:	bf00      	nop
    a12e:	2000      	movs	r0, #0
    a130:	f7ff ff0e 	bl	9f50 <cc2400_get>
    a134:	4603      	mov	r3, r0
    a136:	2b00      	cmp	r3, #0
    a138:	d1f9      	bne.n	a12e <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    a13a:	2000      	movs	r0, #0
    a13c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a140:	f7ff ff1c 	bl	9f7c <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    a144:	bf00      	nop
    a146:	2000      	movs	r0, #0
    a148:	f7ff ff02 	bl	9f50 <cc2400_get>
    a14c:	4603      	mov	r3, r0
    a14e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a152:	d1f8      	bne.n	a146 <cc2400_reset+0x26>
}
    a154:	bd80      	pop	{r7, pc}
    a156:	bf00      	nop

0000a158 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    a158:	b580      	push	{r7, lr}
    a15a:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    a15c:	4b5e      	ldr	r3, [pc, #376]	; (a2d8 <clock_start+0x180>)
    a15e:	f244 023a 	movw	r2, #16442	; 0x403a
    a162:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    a164:	4b5d      	ldr	r3, [pc, #372]	; (a2dc <clock_start+0x184>)
    a166:	2200      	movs	r2, #0
    a168:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    a16a:	4a5d      	ldr	r2, [pc, #372]	; (a2e0 <clock_start+0x188>)
    a16c:	4b5c      	ldr	r3, [pc, #368]	; (a2e0 <clock_start+0x188>)
    a16e:	681b      	ldr	r3, [r3, #0]
    a170:	f023 0302 	bic.w	r3, r3, #2
    a174:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a176:	4b5b      	ldr	r3, [pc, #364]	; (a2e4 <clock_start+0x18c>)
    a178:	22aa      	movs	r2, #170	; 0xaa
    a17a:	601a      	str	r2, [r3, #0]
    a17c:	4b59      	ldr	r3, [pc, #356]	; (a2e4 <clock_start+0x18c>)
    a17e:	2255      	movs	r2, #85	; 0x55
    a180:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    a182:	bf00      	nop
    a184:	4b58      	ldr	r3, [pc, #352]	; (a2e8 <clock_start+0x190>)
    a186:	681b      	ldr	r3, [r3, #0]
    a188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a18c:	2b00      	cmp	r3, #0
    a18e:	d1f9      	bne.n	a184 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    a190:	4a53      	ldr	r2, [pc, #332]	; (a2e0 <clock_start+0x188>)
    a192:	4b53      	ldr	r3, [pc, #332]	; (a2e0 <clock_start+0x188>)
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	f023 0301 	bic.w	r3, r3, #1
    a19a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a19c:	4b51      	ldr	r3, [pc, #324]	; (a2e4 <clock_start+0x18c>)
    a19e:	22aa      	movs	r2, #170	; 0xaa
    a1a0:	601a      	str	r2, [r3, #0]
    a1a2:	4b50      	ldr	r3, [pc, #320]	; (a2e4 <clock_start+0x18c>)
    a1a4:	2255      	movs	r2, #85	; 0x55
    a1a6:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    a1a8:	bf00      	nop
    a1aa:	4b4f      	ldr	r3, [pc, #316]	; (a2e8 <clock_start+0x190>)
    a1ac:	681b      	ldr	r3, [r3, #0]
    a1ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d1f9      	bne.n	a1aa <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    a1b6:	4b4d      	ldr	r3, [pc, #308]	; (a2ec <clock_start+0x194>)
    a1b8:	2200      	movs	r2, #0
    a1ba:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    a1bc:	f7ff ffb0 	bl	a120 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    a1c0:	2008      	movs	r0, #8
    a1c2:	f241 5170 	movw	r1, #5488	; 0x1570
    a1c6:	f7ff fed9 	bl	9f7c <cc2400_set>
	cc2400_strobe(SXOSCON);
    a1ca:	2060      	movs	r0, #96	; 0x60
    a1cc:	f7ff ff98 	bl	a100 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    a1d0:	bf00      	nop
    a1d2:	f7ff ff8b 	bl	a0ec <cc2400_status>
    a1d6:	4603      	mov	r3, r0
    a1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a1dc:	2b00      	cmp	r3, #0
    a1de:	d0f8      	beq.n	a1d2 <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    a1e0:	4b43      	ldr	r3, [pc, #268]	; (a2f0 <clock_start+0x198>)
    a1e2:	2220      	movs	r2, #32
    a1e4:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    a1e6:	bf00      	nop
    a1e8:	4b41      	ldr	r3, [pc, #260]	; (a2f0 <clock_start+0x198>)
    a1ea:	681b      	ldr	r3, [r3, #0]
    a1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d0f9      	beq.n	a1e8 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    a1f4:	4b3f      	ldr	r3, [pc, #252]	; (a2f4 <clock_start+0x19c>)
    a1f6:	2208      	movs	r2, #8
    a1f8:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    a1fa:	4b3f      	ldr	r3, [pc, #252]	; (a2f8 <clock_start+0x1a0>)
    a1fc:	2200      	movs	r2, #0
    a1fe:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    a200:	4b36      	ldr	r3, [pc, #216]	; (a2dc <clock_start+0x184>)
    a202:	2201      	movs	r2, #1
    a204:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    a206:	4b3d      	ldr	r3, [pc, #244]	; (a2fc <clock_start+0x1a4>)
    a208:	4a3d      	ldr	r2, [pc, #244]	; (a300 <clock_start+0x1a8>)
    a20a:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    a20c:	4b35      	ldr	r3, [pc, #212]	; (a2e4 <clock_start+0x18c>)
    a20e:	22aa      	movs	r2, #170	; 0xaa
    a210:	601a      	str	r2, [r3, #0]
    a212:	4b34      	ldr	r3, [pc, #208]	; (a2e4 <clock_start+0x18c>)
    a214:	2255      	movs	r2, #85	; 0x55
    a216:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    a218:	4a31      	ldr	r2, [pc, #196]	; (a2e0 <clock_start+0x188>)
    a21a:	4b31      	ldr	r3, [pc, #196]	; (a2e0 <clock_start+0x188>)
    a21c:	681b      	ldr	r3, [r3, #0]
    a21e:	f043 0301 	orr.w	r3, r3, #1
    a222:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a224:	4b2f      	ldr	r3, [pc, #188]	; (a2e4 <clock_start+0x18c>)
    a226:	22aa      	movs	r2, #170	; 0xaa
    a228:	601a      	str	r2, [r3, #0]
    a22a:	4b2e      	ldr	r3, [pc, #184]	; (a2e4 <clock_start+0x18c>)
    a22c:	2255      	movs	r2, #85	; 0x55
    a22e:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    a230:	bf00      	nop
    a232:	4b2d      	ldr	r3, [pc, #180]	; (a2e8 <clock_start+0x190>)
    a234:	681b      	ldr	r3, [r3, #0]
    a236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a23a:	2b00      	cmp	r3, #0
    a23c:	d0f9      	beq.n	a232 <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    a23e:	4b2b      	ldr	r3, [pc, #172]	; (a2ec <clock_start+0x194>)
    a240:	2203      	movs	r2, #3
    a242:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    a244:	4a26      	ldr	r2, [pc, #152]	; (a2e0 <clock_start+0x188>)
    a246:	4b26      	ldr	r3, [pc, #152]	; (a2e0 <clock_start+0x188>)
    a248:	681b      	ldr	r3, [r3, #0]
    a24a:	f043 0302 	orr.w	r3, r3, #2
    a24e:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a250:	4b24      	ldr	r3, [pc, #144]	; (a2e4 <clock_start+0x18c>)
    a252:	22aa      	movs	r2, #170	; 0xaa
    a254:	601a      	str	r2, [r3, #0]
    a256:	4b23      	ldr	r3, [pc, #140]	; (a2e4 <clock_start+0x18c>)
    a258:	2255      	movs	r2, #85	; 0x55
    a25a:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    a25c:	bf00      	nop
    a25e:	4b22      	ldr	r3, [pc, #136]	; (a2e8 <clock_start+0x190>)
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a266:	2b00      	cmp	r3, #0
    a268:	d0f9      	beq.n	a25e <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    a26a:	4b26      	ldr	r3, [pc, #152]	; (a304 <clock_start+0x1ac>)
    a26c:	2222      	movs	r2, #34	; 0x22
    a26e:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    a270:	4b25      	ldr	r3, [pc, #148]	; (a308 <clock_start+0x1b0>)
    a272:	22aa      	movs	r2, #170	; 0xaa
    a274:	601a      	str	r2, [r3, #0]
    a276:	4b24      	ldr	r3, [pc, #144]	; (a308 <clock_start+0x1b0>)
    a278:	2255      	movs	r2, #85	; 0x55
    a27a:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    a27c:	4a23      	ldr	r2, [pc, #140]	; (a30c <clock_start+0x1b4>)
    a27e:	4b23      	ldr	r3, [pc, #140]	; (a30c <clock_start+0x1b4>)
    a280:	681b      	ldr	r3, [r3, #0]
    a282:	f043 0301 	orr.w	r3, r3, #1
    a286:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    a288:	4b1f      	ldr	r3, [pc, #124]	; (a308 <clock_start+0x1b0>)
    a28a:	22aa      	movs	r2, #170	; 0xaa
    a28c:	601a      	str	r2, [r3, #0]
    a28e:	4b1e      	ldr	r3, [pc, #120]	; (a308 <clock_start+0x1b0>)
    a290:	2255      	movs	r2, #85	; 0x55
    a292:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    a294:	bf00      	nop
    a296:	4b1e      	ldr	r3, [pc, #120]	; (a310 <clock_start+0x1b8>)
    a298:	681b      	ldr	r3, [r3, #0]
    a29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d0f9      	beq.n	a296 <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    a2a2:	bf00      	nop
    a2a4:	4b1a      	ldr	r3, [pc, #104]	; (a310 <clock_start+0x1b8>)
    a2a6:	681b      	ldr	r3, [r3, #0]
    a2a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a2ac:	2b00      	cmp	r3, #0
    a2ae:	d0f9      	beq.n	a2a4 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    a2b0:	4a16      	ldr	r2, [pc, #88]	; (a30c <clock_start+0x1b4>)
    a2b2:	4b16      	ldr	r3, [pc, #88]	; (a30c <clock_start+0x1b4>)
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	f043 0302 	orr.w	r3, r3, #2
    a2ba:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    a2bc:	4b12      	ldr	r3, [pc, #72]	; (a308 <clock_start+0x1b0>)
    a2be:	22aa      	movs	r2, #170	; 0xaa
    a2c0:	601a      	str	r2, [r3, #0]
    a2c2:	4b11      	ldr	r3, [pc, #68]	; (a308 <clock_start+0x1b0>)
    a2c4:	2255      	movs	r2, #85	; 0x55
    a2c6:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    a2c8:	bf00      	nop
    a2ca:	4b11      	ldr	r3, [pc, #68]	; (a310 <clock_start+0x1b8>)
    a2cc:	681b      	ldr	r3, [r3, #0]
    a2ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a2d2:	2b00      	cmp	r3, #0
    a2d4:	d0f9      	beq.n	a2ca <clock_start+0x172>
}
    a2d6:	bd80      	pop	{r7, pc}
    a2d8:	400fc000 	.word	0x400fc000
    a2dc:	400fc10c 	.word	0x400fc10c
    a2e0:	400fc080 	.word	0x400fc080
    a2e4:	400fc08c 	.word	0x400fc08c
    a2e8:	400fc088 	.word	0x400fc088
    a2ec:	400fc104 	.word	0x400fc104
    a2f0:	400fc1a0 	.word	0x400fc1a0
    a2f4:	400fc1a8 	.word	0x400fc1a8
    a2f8:	400fc1ac 	.word	0x400fc1ac
    a2fc:	400fc084 	.word	0x400fc084
    a300:	00010018 	.word	0x00010018
    a304:	400fc0a4 	.word	0x400fc0a4
    a308:	400fc0ac 	.word	0x400fc0ac
    a30c:	400fc0a0 	.word	0x400fc0a0
    a310:	400fc0a8 	.word	0x400fc0a8

0000a314 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    a314:	b580      	push	{r7, lr}
    a316:	af00      	add	r7, sp, #0
	all_pins_off();
    a318:	f7ff fcd0 	bl	9cbc <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    a31c:	4b0a      	ldr	r3, [pc, #40]	; (a348 <reset+0x34>)
    a31e:	2202      	movs	r2, #2
    a320:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    a322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a32a:	681b      	ldr	r3, [r3, #0]
    a32c:	f043 0303 	orr.w	r3, r3, #3
    a330:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    a332:	4b06      	ldr	r3, [pc, #24]	; (a34c <reset+0x38>)
    a334:	22aa      	movs	r2, #170	; 0xaa
    a336:	601a      	str	r2, [r3, #0]
    a338:	4b04      	ldr	r3, [pc, #16]	; (a34c <reset+0x38>)
    a33a:	2255      	movs	r2, #85	; 0x55
    a33c:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    a33e:	2001      	movs	r0, #1
    a340:	f7ff fc38 	bl	9bb4 <wait>
}
    a344:	bd80      	pop	{r7, pc}
    a346:	bf00      	nop
    a348:	2009c03c 	.word	0x2009c03c
    a34c:	40000008 	.word	0x40000008

0000a350 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    a350:	b580      	push	{r7, lr}
    a352:	b088      	sub	sp, #32
    a354:	af00      	add	r7, sp, #0
    a356:	60f8      	str	r0, [r7, #12]
    a358:	60b9      	str	r1, [r7, #8]
    a35a:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    a35c:	68fb      	ldr	r3, [r7, #12]
    a35e:	781b      	ldrb	r3, [r3, #0]
    a360:	095b      	lsrs	r3, r3, #5
    a362:	b2db      	uxtb	r3, r3
    a364:	f003 0303 	and.w	r3, r3, #3
    a368:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    a36a:	69fb      	ldr	r3, [r7, #28]
    a36c:	2b02      	cmp	r3, #2
    a36e:	d10e      	bne.n	a38e <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    a370:	2300      	movs	r3, #0
    a372:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    a374:	f107 0314 	add.w	r3, r7, #20
    a378:	68f8      	ldr	r0, [r7, #12]
    a37a:	4619      	mov	r1, r3
    a37c:	68ba      	ldr	r2, [r7, #8]
    a37e:	687b      	ldr	r3, [r7, #4]
    a380:	f000 fcd2 	bl	ad28 <USBFilterOsVendorMessage>
    a384:	4603      	mov	r3, r0
    a386:	2b00      	cmp	r3, #0
    a388:	d001      	beq.n	a38e <_HandleRequest+0x3e>
			return fFilterStatus;
    a38a:	697b      	ldr	r3, [r7, #20]
    a38c:	e00f      	b.n	a3ae <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    a38e:	4a0a      	ldr	r2, [pc, #40]	; (a3b8 <_HandleRequest+0x68>)
    a390:	69fb      	ldr	r3, [r7, #28]
    a392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a396:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    a398:	69bb      	ldr	r3, [r7, #24]
    a39a:	2b00      	cmp	r3, #0
    a39c:	d101      	bne.n	a3a2 <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    a39e:	2300      	movs	r3, #0
    a3a0:	e005      	b.n	a3ae <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    a3a2:	69bb      	ldr	r3, [r7, #24]
    a3a4:	68f8      	ldr	r0, [r7, #12]
    a3a6:	68b9      	ldr	r1, [r7, #8]
    a3a8:	687a      	ldr	r2, [r7, #4]
    a3aa:	4798      	blx	r3
    a3ac:	4603      	mov	r3, r0
}
    a3ae:	4618      	mov	r0, r3
    a3b0:	3720      	adds	r7, #32
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop
    a3b8:	10000a80 	.word	0x10000a80

0000a3bc <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    a3bc:	b580      	push	{r7, lr}
    a3be:	b084      	sub	sp, #16
    a3c0:	af00      	add	r7, sp, #0
    a3c2:	4603      	mov	r3, r0
    a3c4:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    a3c6:	2080      	movs	r0, #128	; 0x80
    a3c8:	2101      	movs	r1, #1
    a3ca:	f000 fa83 	bl	a8d4 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    a3ce:	4b07      	ldr	r3, [pc, #28]	; (a3ec <StallControlPipe+0x30>)
    a3d0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    a3d2:	2300      	movs	r3, #0
    a3d4:	60fb      	str	r3, [r7, #12]
    a3d6:	e002      	b.n	a3de <StallControlPipe+0x22>
    a3d8:	68fb      	ldr	r3, [r7, #12]
    a3da:	3301      	adds	r3, #1
    a3dc:	60fb      	str	r3, [r7, #12]
    a3de:	68fb      	ldr	r3, [r7, #12]
    a3e0:	2b07      	cmp	r3, #7
    a3e2:	ddf9      	ble.n	a3d8 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    a3e4:	3710      	adds	r7, #16
    a3e6:	46bd      	mov	sp, r7
    a3e8:	bd80      	pop	{r7, pc}
    a3ea:	bf00      	nop
    a3ec:	10000a6c 	.word	0x10000a6c

0000a3f0 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    a3f0:	b580      	push	{r7, lr}
    a3f2:	b082      	sub	sp, #8
    a3f4:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    a3f6:	4b0e      	ldr	r3, [pc, #56]	; (a430 <DataIn+0x40>)
    a3f8:	681b      	ldr	r3, [r3, #0]
    a3fa:	2b40      	cmp	r3, #64	; 0x40
    a3fc:	bfa8      	it	ge
    a3fe:	2340      	movge	r3, #64	; 0x40
    a400:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    a402:	4b0c      	ldr	r3, [pc, #48]	; (a434 <DataIn+0x44>)
    a404:	681a      	ldr	r2, [r3, #0]
    a406:	687b      	ldr	r3, [r7, #4]
    a408:	2080      	movs	r0, #128	; 0x80
    a40a:	4611      	mov	r1, r2
    a40c:	461a      	mov	r2, r3
    a40e:	f000 fa85 	bl	a91c <USBHwEPWrite>
	pbData += iChunk;
    a412:	4b08      	ldr	r3, [pc, #32]	; (a434 <DataIn+0x44>)
    a414:	681a      	ldr	r2, [r3, #0]
    a416:	687b      	ldr	r3, [r7, #4]
    a418:	4413      	add	r3, r2
    a41a:	4a06      	ldr	r2, [pc, #24]	; (a434 <DataIn+0x44>)
    a41c:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    a41e:	4b04      	ldr	r3, [pc, #16]	; (a430 <DataIn+0x40>)
    a420:	681a      	ldr	r2, [r3, #0]
    a422:	687b      	ldr	r3, [r7, #4]
    a424:	1ad3      	subs	r3, r2, r3
    a426:	4a02      	ldr	r2, [pc, #8]	; (a430 <DataIn+0x40>)
    a428:	6013      	str	r3, [r2, #0]
}
    a42a:	3708      	adds	r7, #8
    a42c:	46bd      	mov	sp, r7
    a42e:	bd80      	pop	{r7, pc}
    a430:	10000a78 	.word	0x10000a78
    a434:	10000a74 	.word	0x10000a74

0000a438 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    a438:	b580      	push	{r7, lr}
    a43a:	b084      	sub	sp, #16
    a43c:	af00      	add	r7, sp, #0
    a43e:	4603      	mov	r3, r0
    a440:	460a      	mov	r2, r1
    a442:	71fb      	strb	r3, [r7, #7]
    a444:	4613      	mov	r3, r2
    a446:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    a448:	79fb      	ldrb	r3, [r7, #7]
    a44a:	2b00      	cmp	r3, #0
    a44c:	f040 8091 	bne.w	a572 <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    a450:	79bb      	ldrb	r3, [r7, #6]
    a452:	f003 0304 	and.w	r3, r3, #4
    a456:	2b00      	cmp	r3, #0
    a458:	d041      	beq.n	a4de <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    a45a:	2000      	movs	r0, #0
    a45c:	4949      	ldr	r1, [pc, #292]	; (a584 <USBHandleControlTransfer+0x14c>)
    a45e:	2208      	movs	r2, #8
    a460:	f000 faaa 	bl	a9b8 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a464:	4b47      	ldr	r3, [pc, #284]	; (a584 <USBHandleControlTransfer+0x14c>)
    a466:	781b      	ldrb	r3, [r3, #0]
    a468:	095b      	lsrs	r3, r3, #5
    a46a:	b2db      	uxtb	r3, r3
    a46c:	f003 0303 	and.w	r3, r3, #3
    a470:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    a472:	4a45      	ldr	r2, [pc, #276]	; (a588 <USBHandleControlTransfer+0x150>)
    a474:	68fb      	ldr	r3, [r7, #12]
    a476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a47a:	4a44      	ldr	r2, [pc, #272]	; (a58c <USBHandleControlTransfer+0x154>)
    a47c:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    a47e:	4b41      	ldr	r3, [pc, #260]	; (a584 <USBHandleControlTransfer+0x14c>)
    a480:	88db      	ldrh	r3, [r3, #6]
    a482:	461a      	mov	r2, r3
    a484:	4b42      	ldr	r3, [pc, #264]	; (a590 <USBHandleControlTransfer+0x158>)
    a486:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    a488:	4b3e      	ldr	r3, [pc, #248]	; (a584 <USBHandleControlTransfer+0x14c>)
    a48a:	88db      	ldrh	r3, [r3, #6]
    a48c:	461a      	mov	r2, r3
    a48e:	4b41      	ldr	r3, [pc, #260]	; (a594 <USBHandleControlTransfer+0x15c>)
    a490:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    a492:	4b3c      	ldr	r3, [pc, #240]	; (a584 <USBHandleControlTransfer+0x14c>)
    a494:	88db      	ldrh	r3, [r3, #6]
    a496:	2b00      	cmp	r3, #0
    a498:	d007      	beq.n	a4aa <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    a49a:	4b3a      	ldr	r3, [pc, #232]	; (a584 <USBHandleControlTransfer+0x14c>)
    a49c:	781b      	ldrb	r3, [r3, #0]
    a49e:	09db      	lsrs	r3, r3, #7
    a4a0:	b2db      	uxtb	r3, r3
    a4a2:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    a4a6:	2b00      	cmp	r3, #0
    a4a8:	d068      	beq.n	a57c <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a4aa:	4836      	ldr	r0, [pc, #216]	; (a584 <USBHandleControlTransfer+0x14c>)
    a4ac:	4939      	ldr	r1, [pc, #228]	; (a594 <USBHandleControlTransfer+0x15c>)
    a4ae:	4a37      	ldr	r2, [pc, #220]	; (a58c <USBHandleControlTransfer+0x154>)
    a4b0:	f7ff ff4e 	bl	a350 <_HandleRequest>
    a4b4:	4603      	mov	r3, r0
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	d104      	bne.n	a4c4 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    a4ba:	79bb      	ldrb	r3, [r7, #6]
    a4bc:	4618      	mov	r0, r3
    a4be:	f7ff ff7d 	bl	a3bc <StallControlPipe>
					return;
    a4c2:	e05b      	b.n	a57c <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    a4c4:	4b2f      	ldr	r3, [pc, #188]	; (a584 <USBHandleControlTransfer+0x14c>)
    a4c6:	88db      	ldrh	r3, [r3, #6]
    a4c8:	461a      	mov	r2, r3
    a4ca:	4b32      	ldr	r3, [pc, #200]	; (a594 <USBHandleControlTransfer+0x15c>)
    a4cc:	681b      	ldr	r3, [r3, #0]
    a4ce:	4293      	cmp	r3, r2
    a4d0:	bfa8      	it	ge
    a4d2:	4613      	movge	r3, r2
    a4d4:	4a2e      	ldr	r2, [pc, #184]	; (a590 <USBHandleControlTransfer+0x158>)
    a4d6:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a4d8:	f7ff ff8a 	bl	a3f0 <DataIn>
    a4dc:	e04e      	b.n	a57c <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a4de:	4b2c      	ldr	r3, [pc, #176]	; (a590 <USBHandleControlTransfer+0x158>)
    a4e0:	681b      	ldr	r3, [r3, #0]
    a4e2:	2b00      	cmp	r3, #0
    a4e4:	dd3e      	ble.n	a564 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a4e6:	4b29      	ldr	r3, [pc, #164]	; (a58c <USBHandleControlTransfer+0x154>)
    a4e8:	681a      	ldr	r2, [r3, #0]
    a4ea:	4b29      	ldr	r3, [pc, #164]	; (a590 <USBHandleControlTransfer+0x158>)
    a4ec:	681b      	ldr	r3, [r3, #0]
    a4ee:	2000      	movs	r0, #0
    a4f0:	4611      	mov	r1, r2
    a4f2:	461a      	mov	r2, r3
    a4f4:	f000 fa60 	bl	a9b8 <USBHwEPRead>
    a4f8:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a4fa:	68bb      	ldr	r3, [r7, #8]
    a4fc:	2b00      	cmp	r3, #0
    a4fe:	da04      	bge.n	a50a <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a500:	79bb      	ldrb	r3, [r7, #6]
    a502:	4618      	mov	r0, r3
    a504:	f7ff ff5a 	bl	a3bc <StallControlPipe>
					return;
    a508:	e038      	b.n	a57c <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a50a:	4b20      	ldr	r3, [pc, #128]	; (a58c <USBHandleControlTransfer+0x154>)
    a50c:	681a      	ldr	r2, [r3, #0]
    a50e:	68bb      	ldr	r3, [r7, #8]
    a510:	4413      	add	r3, r2
    a512:	4a1e      	ldr	r2, [pc, #120]	; (a58c <USBHandleControlTransfer+0x154>)
    a514:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a516:	4b1e      	ldr	r3, [pc, #120]	; (a590 <USBHandleControlTransfer+0x158>)
    a518:	681a      	ldr	r2, [r3, #0]
    a51a:	68bb      	ldr	r3, [r7, #8]
    a51c:	1ad3      	subs	r3, r2, r3
    a51e:	4a1c      	ldr	r2, [pc, #112]	; (a590 <USBHandleControlTransfer+0x158>)
    a520:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a522:	4b1b      	ldr	r3, [pc, #108]	; (a590 <USBHandleControlTransfer+0x158>)
    a524:	681b      	ldr	r3, [r3, #0]
    a526:	2b00      	cmp	r3, #0
    a528:	d128      	bne.n	a57c <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a52a:	4b16      	ldr	r3, [pc, #88]	; (a584 <USBHandleControlTransfer+0x14c>)
    a52c:	781b      	ldrb	r3, [r3, #0]
    a52e:	095b      	lsrs	r3, r3, #5
    a530:	b2db      	uxtb	r3, r3
    a532:	f003 0303 	and.w	r3, r3, #3
    a536:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a538:	4a13      	ldr	r2, [pc, #76]	; (a588 <USBHandleControlTransfer+0x150>)
    a53a:	68fb      	ldr	r3, [r7, #12]
    a53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a540:	4a12      	ldr	r2, [pc, #72]	; (a58c <USBHandleControlTransfer+0x154>)
    a542:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a544:	480f      	ldr	r0, [pc, #60]	; (a584 <USBHandleControlTransfer+0x14c>)
    a546:	4913      	ldr	r1, [pc, #76]	; (a594 <USBHandleControlTransfer+0x15c>)
    a548:	4a10      	ldr	r2, [pc, #64]	; (a58c <USBHandleControlTransfer+0x154>)
    a54a:	f7ff ff01 	bl	a350 <_HandleRequest>
    a54e:	4603      	mov	r3, r0
    a550:	2b00      	cmp	r3, #0
    a552:	d104      	bne.n	a55e <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a554:	79bb      	ldrb	r3, [r7, #6]
    a556:	4618      	mov	r0, r3
    a558:	f7ff ff30 	bl	a3bc <StallControlPipe>
						return;
    a55c:	e00e      	b.n	a57c <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a55e:	f7ff ff47 	bl	a3f0 <DataIn>
    a562:	e00b      	b.n	a57c <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a564:	2000      	movs	r0, #0
    a566:	2100      	movs	r1, #0
    a568:	2200      	movs	r2, #0
    a56a:	f000 fa25 	bl	a9b8 <USBHwEPRead>
    a56e:	60b8      	str	r0, [r7, #8]
    a570:	e004      	b.n	a57c <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a572:	79fb      	ldrb	r3, [r7, #7]
    a574:	2b80      	cmp	r3, #128	; 0x80
    a576:	d101      	bne.n	a57c <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a578:	f7ff ff3a 	bl	a3f0 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a57c:	3710      	adds	r7, #16
    a57e:	46bd      	mov	sp, r7
    a580:	bd80      	pop	{r7, pc}
    a582:	bf00      	nop
    a584:	10000a6c 	.word	0x10000a6c
    a588:	10000a90 	.word	0x10000a90
    a58c:	10000a74 	.word	0x10000a74
    a590:	10000a78 	.word	0x10000a78
    a594:	10000a7c 	.word	0x10000a7c

0000a598 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a598:	b480      	push	{r7}
    a59a:	b085      	sub	sp, #20
    a59c:	af00      	add	r7, sp, #0
    a59e:	60f8      	str	r0, [r7, #12]
    a5a0:	60b9      	str	r1, [r7, #8]
    a5a2:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a5a4:	4907      	ldr	r1, [pc, #28]	; (a5c4 <USBRegisterRequestHandler+0x2c>)
    a5a6:	68fb      	ldr	r3, [r7, #12]
    a5a8:	68ba      	ldr	r2, [r7, #8]
    a5aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a5ae:	4906      	ldr	r1, [pc, #24]	; (a5c8 <USBRegisterRequestHandler+0x30>)
    a5b0:	68fb      	ldr	r3, [r7, #12]
    a5b2:	687a      	ldr	r2, [r7, #4]
    a5b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a5b8:	3714      	adds	r7, #20
    a5ba:	46bd      	mov	sp, r7
    a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5c0:	4770      	bx	lr
    a5c2:	bf00      	nop
    a5c4:	10000a80 	.word	0x10000a80
    a5c8:	10000a90 	.word	0x10000a90

0000a5cc <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a5cc:	b480      	push	{r7}
    a5ce:	b083      	sub	sp, #12
    a5d0:	af00      	add	r7, sp, #0
    a5d2:	4603      	mov	r3, r0
    a5d4:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a5d6:	370c      	adds	r7, #12
    a5d8:	46bd      	mov	sp, r7
    a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5de:	4770      	bx	lr

0000a5e0 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a5e0:	b580      	push	{r7, lr}
    a5e2:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a5e4:	f000 fb2a 	bl	ac3c <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a5e8:	480d      	ldr	r0, [pc, #52]	; (a620 <USBInit+0x40>)
    a5ea:	f000 f913 	bl	a814 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a5ee:	2000      	movs	r0, #0
    a5f0:	490c      	ldr	r1, [pc, #48]	; (a624 <USBInit+0x44>)
    a5f2:	f000 f8dd 	bl	a7b0 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a5f6:	2080      	movs	r0, #128	; 0x80
    a5f8:	490a      	ldr	r1, [pc, #40]	; (a624 <USBInit+0x44>)
    a5fa:	f000 f8d9 	bl	a7b0 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a5fe:	2000      	movs	r0, #0
    a600:	2140      	movs	r1, #64	; 0x40
    a602:	f000 f8b7 	bl	a774 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a606:	2080      	movs	r0, #128	; 0x80
    a608:	2140      	movs	r1, #64	; 0x40
    a60a:	f000 f8b3 	bl	a774 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a60e:	2000      	movs	r0, #0
    a610:	4905      	ldr	r1, [pc, #20]	; (a628 <USBInit+0x48>)
    a612:	4a06      	ldr	r2, [pc, #24]	; (a62c <USBInit+0x4c>)
    a614:	f7ff ffc0 	bl	a598 <USBRegisterRequestHandler>

	return TRUE;
    a618:	2301      	movs	r3, #1
}
    a61a:	4618      	mov	r0, r3
    a61c:	bd80      	pop	{r7, pc}
    a61e:	bf00      	nop
    a620:	0000a5cd 	.word	0x0000a5cd
    a624:	0000a439 	.word	0x0000a439
    a628:	0000b275 	.word	0x0000b275
    a62c:	10000aa0 	.word	0x10000aa0

0000a630 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a630:	b480      	push	{r7}
    a632:	b083      	sub	sp, #12
    a634:	af00      	add	r7, sp, #0
    a636:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a638:	bf00      	nop
    a63a:	4b07      	ldr	r3, [pc, #28]	; (a658 <Wait4DevInt+0x28>)
    a63c:	681a      	ldr	r2, [r3, #0]
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	401a      	ands	r2, r3
    a642:	687b      	ldr	r3, [r7, #4]
    a644:	429a      	cmp	r2, r3
    a646:	d1f8      	bne.n	a63a <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a648:	4a04      	ldr	r2, [pc, #16]	; (a65c <Wait4DevInt+0x2c>)
    a64a:	687b      	ldr	r3, [r7, #4]
    a64c:	6013      	str	r3, [r2, #0]
}
    a64e:	370c      	adds	r7, #12
    a650:	46bd      	mov	sp, r7
    a652:	f85d 7b04 	ldr.w	r7, [sp], #4
    a656:	4770      	bx	lr
    a658:	5000c200 	.word	0x5000c200
    a65c:	5000c208 	.word	0x5000c208

0000a660 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a660:	b580      	push	{r7, lr}
    a662:	b082      	sub	sp, #8
    a664:	af00      	add	r7, sp, #0
    a666:	4603      	mov	r3, r0
    a668:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a66a:	4b07      	ldr	r3, [pc, #28]	; (a688 <USBHwCmd+0x28>)
    a66c:	2230      	movs	r2, #48	; 0x30
    a66e:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a670:	4a06      	ldr	r2, [pc, #24]	; (a68c <USBHwCmd+0x2c>)
    a672:	79fb      	ldrb	r3, [r7, #7]
    a674:	041b      	lsls	r3, r3, #16
    a676:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a67a:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a67c:	2010      	movs	r0, #16
    a67e:	f7ff ffd7 	bl	a630 <Wait4DevInt>
}
    a682:	3708      	adds	r7, #8
    a684:	46bd      	mov	sp, r7
    a686:	bd80      	pop	{r7, pc}
    a688:	5000c208 	.word	0x5000c208
    a68c:	5000c210 	.word	0x5000c210

0000a690 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a690:	b580      	push	{r7, lr}
    a692:	b082      	sub	sp, #8
    a694:	af00      	add	r7, sp, #0
    a696:	4603      	mov	r3, r0
    a698:	460a      	mov	r2, r1
    a69a:	71fb      	strb	r3, [r7, #7]
    a69c:	4613      	mov	r3, r2
    a69e:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a6a0:	79fb      	ldrb	r3, [r7, #7]
    a6a2:	4618      	mov	r0, r3
    a6a4:	f7ff ffdc 	bl	a660 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a6a8:	4a05      	ldr	r2, [pc, #20]	; (a6c0 <USBHwCmdWrite+0x30>)
    a6aa:	88bb      	ldrh	r3, [r7, #4]
    a6ac:	041b      	lsls	r3, r3, #16
    a6ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a6b2:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a6b4:	2010      	movs	r0, #16
    a6b6:	f7ff ffbb 	bl	a630 <Wait4DevInt>
}
    a6ba:	3708      	adds	r7, #8
    a6bc:	46bd      	mov	sp, r7
    a6be:	bd80      	pop	{r7, pc}
    a6c0:	5000c210 	.word	0x5000c210

0000a6c4 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a6c4:	b580      	push	{r7, lr}
    a6c6:	b082      	sub	sp, #8
    a6c8:	af00      	add	r7, sp, #0
    a6ca:	4603      	mov	r3, r0
    a6cc:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a6ce:	79fb      	ldrb	r3, [r7, #7]
    a6d0:	4618      	mov	r0, r3
    a6d2:	f7ff ffc5 	bl	a660 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a6d6:	4a08      	ldr	r2, [pc, #32]	; (a6f8 <USBHwCmdRead+0x34>)
    a6d8:	79fb      	ldrb	r3, [r7, #7]
    a6da:	041b      	lsls	r3, r3, #16
    a6dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a6e0:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a6e2:	2020      	movs	r0, #32
    a6e4:	f7ff ffa4 	bl	a630 <Wait4DevInt>
    return USBCmdData;
    a6e8:	4b04      	ldr	r3, [pc, #16]	; (a6fc <USBHwCmdRead+0x38>)
    a6ea:	681b      	ldr	r3, [r3, #0]
    a6ec:	b2db      	uxtb	r3, r3
}
    a6ee:	4618      	mov	r0, r3
    a6f0:	3708      	adds	r7, #8
    a6f2:	46bd      	mov	sp, r7
    a6f4:	bd80      	pop	{r7, pc}
    a6f6:	bf00      	nop
    a6f8:	5000c210 	.word	0x5000c210
    a6fc:	5000c214 	.word	0x5000c214

0000a700 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a700:	b580      	push	{r7, lr}
    a702:	b082      	sub	sp, #8
    a704:	af00      	add	r7, sp, #0
    a706:	6078      	str	r0, [r7, #4]
    a708:	460b      	mov	r3, r1
    a70a:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a70c:	490a      	ldr	r1, [pc, #40]	; (a738 <USBHwEPRealize+0x38>)
    a70e:	4b0a      	ldr	r3, [pc, #40]	; (a738 <USBHwEPRealize+0x38>)
    a710:	681b      	ldr	r3, [r3, #0]
    a712:	2001      	movs	r0, #1
    a714:	687a      	ldr	r2, [r7, #4]
    a716:	fa00 f202 	lsl.w	r2, r0, r2
    a71a:	4313      	orrs	r3, r2
    a71c:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    a71e:	4a07      	ldr	r2, [pc, #28]	; (a73c <USBHwEPRealize+0x3c>)
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    a724:	4a06      	ldr	r2, [pc, #24]	; (a740 <USBHwEPRealize+0x40>)
    a726:	887b      	ldrh	r3, [r7, #2]
    a728:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    a72a:	f44f 7080 	mov.w	r0, #256	; 0x100
    a72e:	f7ff ff7f 	bl	a630 <Wait4DevInt>
}
    a732:	3708      	adds	r7, #8
    a734:	46bd      	mov	sp, r7
    a736:	bd80      	pop	{r7, pc}
    a738:	5000c244 	.word	0x5000c244
    a73c:	5000c248 	.word	0x5000c248
    a740:	5000c24c 	.word	0x5000c24c

0000a744 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    a744:	b580      	push	{r7, lr}
    a746:	b082      	sub	sp, #8
    a748:	af00      	add	r7, sp, #0
    a74a:	6078      	str	r0, [r7, #4]
    a74c:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a74e:	687b      	ldr	r3, [r7, #4]
    a750:	b2db      	uxtb	r3, r3
    a752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a756:	b2db      	uxtb	r3, r3
    a758:	b2da      	uxtb	r2, r3
    a75a:	683b      	ldr	r3, [r7, #0]
    a75c:	2b00      	cmp	r3, #0
    a75e:	d001      	beq.n	a764 <USBHwEPEnable+0x20>
    a760:	2300      	movs	r3, #0
    a762:	e000      	b.n	a766 <USBHwEPEnable+0x22>
    a764:	2320      	movs	r3, #32
    a766:	4610      	mov	r0, r2
    a768:	4619      	mov	r1, r3
    a76a:	f7ff ff91 	bl	a690 <USBHwCmdWrite>
}
    a76e:	3708      	adds	r7, #8
    a770:	46bd      	mov	sp, r7
    a772:	bd80      	pop	{r7, pc}

0000a774 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a774:	b580      	push	{r7, lr}
    a776:	b084      	sub	sp, #16
    a778:	af00      	add	r7, sp, #0
    a77a:	4603      	mov	r3, r0
    a77c:	460a      	mov	r2, r1
    a77e:	71fb      	strb	r3, [r7, #7]
    a780:	4613      	mov	r3, r2
    a782:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    a784:	79fb      	ldrb	r3, [r7, #7]
    a786:	f003 030f 	and.w	r3, r3, #15
    a78a:	005b      	lsls	r3, r3, #1
    a78c:	79fa      	ldrb	r2, [r7, #7]
    a78e:	09d2      	lsrs	r2, r2, #7
    a790:	b2d2      	uxtb	r2, r2
    a792:	4313      	orrs	r3, r2
    a794:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    a796:	88bb      	ldrh	r3, [r7, #4]
    a798:	68f8      	ldr	r0, [r7, #12]
    a79a:	4619      	mov	r1, r3
    a79c:	f7ff ffb0 	bl	a700 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    a7a0:	68f8      	ldr	r0, [r7, #12]
    a7a2:	2101      	movs	r1, #1
    a7a4:	f7ff ffce 	bl	a744 <USBHwEPEnable>
}
    a7a8:	3710      	adds	r7, #16
    a7aa:	46bd      	mov	sp, r7
    a7ac:	bd80      	pop	{r7, pc}
    a7ae:	bf00      	nop

0000a7b0 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    a7b0:	b480      	push	{r7}
    a7b2:	b085      	sub	sp, #20
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	4603      	mov	r3, r0
    a7b8:	6039      	str	r1, [r7, #0]
    a7ba:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    a7bc:	79fb      	ldrb	r3, [r7, #7]
    a7be:	f003 030f 	and.w	r3, r3, #15
    a7c2:	005b      	lsls	r3, r3, #1
    a7c4:	79fa      	ldrb	r2, [r7, #7]
    a7c6:	09d2      	lsrs	r2, r2, #7
    a7c8:	b2d2      	uxtb	r2, r2
    a7ca:	4313      	orrs	r3, r2
    a7cc:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a7ce:	68fb      	ldr	r3, [r7, #12]
    a7d0:	0fda      	lsrs	r2, r3, #31
    a7d2:	4413      	add	r3, r2
    a7d4:	105b      	asrs	r3, r3, #1
    a7d6:	4619      	mov	r1, r3
    a7d8:	4a0b      	ldr	r2, [pc, #44]	; (a808 <USBHwRegisterEPIntHandler+0x58>)
    a7da:	683b      	ldr	r3, [r7, #0]
    a7dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a7e0:	490a      	ldr	r1, [pc, #40]	; (a80c <USBHwRegisterEPIntHandler+0x5c>)
    a7e2:	4b0a      	ldr	r3, [pc, #40]	; (a80c <USBHwRegisterEPIntHandler+0x5c>)
    a7e4:	681b      	ldr	r3, [r3, #0]
    a7e6:	2001      	movs	r0, #1
    a7e8:	68fa      	ldr	r2, [r7, #12]
    a7ea:	fa00 f202 	lsl.w	r2, r0, r2
    a7ee:	4313      	orrs	r3, r2
    a7f0:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    a7f2:	4a07      	ldr	r2, [pc, #28]	; (a810 <USBHwRegisterEPIntHandler+0x60>)
    a7f4:	4b06      	ldr	r3, [pc, #24]	; (a810 <USBHwRegisterEPIntHandler+0x60>)
    a7f6:	681b      	ldr	r3, [r3, #0]
    a7f8:	f043 0304 	orr.w	r3, r3, #4
    a7fc:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a7fe:	3714      	adds	r7, #20
    a800:	46bd      	mov	sp, r7
    a802:	f85d 7b04 	ldr.w	r7, [sp], #4
    a806:	4770      	bx	lr
    a808:	10000aac 	.word	0x10000aac
    a80c:	5000c234 	.word	0x5000c234
    a810:	5000c204 	.word	0x5000c204

0000a814 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    a814:	b480      	push	{r7}
    a816:	b083      	sub	sp, #12
    a818:	af00      	add	r7, sp, #0
    a81a:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    a81c:	4a06      	ldr	r2, [pc, #24]	; (a838 <USBHwRegisterDevIntHandler+0x24>)
    a81e:	687b      	ldr	r3, [r7, #4]
    a820:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a822:	4a06      	ldr	r2, [pc, #24]	; (a83c <USBHwRegisterDevIntHandler+0x28>)
    a824:	4b05      	ldr	r3, [pc, #20]	; (a83c <USBHwRegisterDevIntHandler+0x28>)
    a826:	681b      	ldr	r3, [r3, #0]
    a828:	f043 0308 	orr.w	r3, r3, #8
    a82c:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a82e:	370c      	adds	r7, #12
    a830:	46bd      	mov	sp, r7
    a832:	f85d 7b04 	ldr.w	r7, [sp], #4
    a836:	4770      	bx	lr
    a838:	10000aa8 	.word	0x10000aa8
    a83c:	5000c204 	.word	0x5000c204

0000a840 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    a840:	b580      	push	{r7, lr}
    a842:	b082      	sub	sp, #8
    a844:	af00      	add	r7, sp, #0
    a846:	4603      	mov	r3, r0
    a848:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a84a:	79fb      	ldrb	r3, [r7, #7]
    a84c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a850:	b2db      	uxtb	r3, r3
    a852:	b29b      	uxth	r3, r3
    a854:	20d0      	movs	r0, #208	; 0xd0
    a856:	4619      	mov	r1, r3
    a858:	f7ff ff1a 	bl	a690 <USBHwCmdWrite>
}
    a85c:	3708      	adds	r7, #8
    a85e:	46bd      	mov	sp, r7
    a860:	bd80      	pop	{r7, pc}
    a862:	bf00      	nop

0000a864 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    a864:	b580      	push	{r7, lr}
    a866:	b082      	sub	sp, #8
    a868:	af00      	add	r7, sp, #0
    a86a:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a86c:	687b      	ldr	r3, [r7, #4]
    a86e:	2b00      	cmp	r3, #0
    a870:	bf14      	ite	ne
    a872:	2301      	movne	r3, #1
    a874:	2300      	moveq	r3, #0
    a876:	b2db      	uxtb	r3, r3
    a878:	b29b      	uxth	r3, r3
    a87a:	20fe      	movs	r0, #254	; 0xfe
    a87c:	4619      	mov	r1, r3
    a87e:	f7ff ff07 	bl	a690 <USBHwCmdWrite>
}
    a882:	3708      	adds	r7, #8
    a884:	46bd      	mov	sp, r7
    a886:	bd80      	pop	{r7, pc}

0000a888 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a888:	b580      	push	{r7, lr}
    a88a:	b082      	sub	sp, #8
    a88c:	af00      	add	r7, sp, #0
    a88e:	4603      	mov	r3, r0
    a890:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a892:	79fb      	ldrb	r3, [r7, #7]
    a894:	b29b      	uxth	r3, r3
    a896:	20f3      	movs	r0, #243	; 0xf3
    a898:	4619      	mov	r1, r3
    a89a:	f7ff fef9 	bl	a690 <USBHwCmdWrite>
}
    a89e:	3708      	adds	r7, #8
    a8a0:	46bd      	mov	sp, r7
    a8a2:	bd80      	pop	{r7, pc}

0000a8a4 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a8a4:	b580      	push	{r7, lr}
    a8a6:	b084      	sub	sp, #16
    a8a8:	af00      	add	r7, sp, #0
    a8aa:	4603      	mov	r3, r0
    a8ac:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a8ae:	79fb      	ldrb	r3, [r7, #7]
    a8b0:	f003 030f 	and.w	r3, r3, #15
    a8b4:	005b      	lsls	r3, r3, #1
    a8b6:	79fa      	ldrb	r2, [r7, #7]
    a8b8:	09d2      	lsrs	r2, r2, #7
    a8ba:	b2d2      	uxtb	r2, r2
    a8bc:	4313      	orrs	r3, r2
    a8be:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    a8c0:	68fb      	ldr	r3, [r7, #12]
    a8c2:	b2db      	uxtb	r3, r3
    a8c4:	4618      	mov	r0, r3
    a8c6:	f7ff fefd 	bl	a6c4 <USBHwCmdRead>
    a8ca:	4603      	mov	r3, r0
}
    a8cc:	4618      	mov	r0, r3
    a8ce:	3710      	adds	r7, #16
    a8d0:	46bd      	mov	sp, r7
    a8d2:	bd80      	pop	{r7, pc}

0000a8d4 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    a8d4:	b580      	push	{r7, lr}
    a8d6:	b084      	sub	sp, #16
    a8d8:	af00      	add	r7, sp, #0
    a8da:	4603      	mov	r3, r0
    a8dc:	6039      	str	r1, [r7, #0]
    a8de:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a8e0:	79fb      	ldrb	r3, [r7, #7]
    a8e2:	f003 030f 	and.w	r3, r3, #15
    a8e6:	005b      	lsls	r3, r3, #1
    a8e8:	79fa      	ldrb	r2, [r7, #7]
    a8ea:	09d2      	lsrs	r2, r2, #7
    a8ec:	b2d2      	uxtb	r2, r2
    a8ee:	4313      	orrs	r3, r2
    a8f0:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a8f2:	68fb      	ldr	r3, [r7, #12]
    a8f4:	b2db      	uxtb	r3, r3
    a8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a8fa:	b2db      	uxtb	r3, r3
    a8fc:	b2da      	uxtb	r2, r3
    a8fe:	683b      	ldr	r3, [r7, #0]
    a900:	2b00      	cmp	r3, #0
    a902:	bf14      	ite	ne
    a904:	2301      	movne	r3, #1
    a906:	2300      	moveq	r3, #0
    a908:	b2db      	uxtb	r3, r3
    a90a:	b29b      	uxth	r3, r3
    a90c:	4610      	mov	r0, r2
    a90e:	4619      	mov	r1, r3
    a910:	f7ff febe 	bl	a690 <USBHwCmdWrite>
}
    a914:	3710      	adds	r7, #16
    a916:	46bd      	mov	sp, r7
    a918:	bd80      	pop	{r7, pc}
    a91a:	bf00      	nop

0000a91c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a91c:	b580      	push	{r7, lr}
    a91e:	b086      	sub	sp, #24
    a920:	af00      	add	r7, sp, #0
    a922:	4603      	mov	r3, r0
    a924:	60b9      	str	r1, [r7, #8]
    a926:	607a      	str	r2, [r7, #4]
    a928:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    a92a:	7bfb      	ldrb	r3, [r7, #15]
    a92c:	f003 030f 	and.w	r3, r3, #15
    a930:	005b      	lsls	r3, r3, #1
    a932:	7bfa      	ldrb	r2, [r7, #15]
    a934:	09d2      	lsrs	r2, r2, #7
    a936:	b2d2      	uxtb	r2, r2
    a938:	4313      	orrs	r3, r2
    a93a:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a93c:	4a1b      	ldr	r2, [pc, #108]	; (a9ac <USBHwEPWrite+0x90>)
    a93e:	7bfb      	ldrb	r3, [r7, #15]
    a940:	f003 030f 	and.w	r3, r3, #15
    a944:	009b      	lsls	r3, r3, #2
    a946:	f043 0302 	orr.w	r3, r3, #2
    a94a:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a94c:	4a18      	ldr	r2, [pc, #96]	; (a9b0 <USBHwEPWrite+0x94>)
    a94e:	687b      	ldr	r3, [r7, #4]
    a950:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a952:	e015      	b.n	a980 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a954:	4917      	ldr	r1, [pc, #92]	; (a9b4 <USBHwEPWrite+0x98>)
    a956:	68bb      	ldr	r3, [r7, #8]
    a958:	3303      	adds	r3, #3
    a95a:	781b      	ldrb	r3, [r3, #0]
    a95c:	061a      	lsls	r2, r3, #24
    a95e:	68bb      	ldr	r3, [r7, #8]
    a960:	3302      	adds	r3, #2
    a962:	781b      	ldrb	r3, [r3, #0]
    a964:	041b      	lsls	r3, r3, #16
    a966:	431a      	orrs	r2, r3
    a968:	68bb      	ldr	r3, [r7, #8]
    a96a:	3301      	adds	r3, #1
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	021b      	lsls	r3, r3, #8
    a970:	4313      	orrs	r3, r2
    a972:	68ba      	ldr	r2, [r7, #8]
    a974:	7812      	ldrb	r2, [r2, #0]
    a976:	4313      	orrs	r3, r2
    a978:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a97a:	68bb      	ldr	r3, [r7, #8]
    a97c:	3304      	adds	r3, #4
    a97e:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a980:	4b0a      	ldr	r3, [pc, #40]	; (a9ac <USBHwEPWrite+0x90>)
    a982:	681b      	ldr	r3, [r3, #0]
    a984:	f003 0302 	and.w	r3, r3, #2
    a988:	2b00      	cmp	r3, #0
    a98a:	d1e3      	bne.n	a954 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a98c:	4b07      	ldr	r3, [pc, #28]	; (a9ac <USBHwEPWrite+0x90>)
    a98e:	2200      	movs	r2, #0
    a990:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a992:	697b      	ldr	r3, [r7, #20]
    a994:	b2db      	uxtb	r3, r3
    a996:	4618      	mov	r0, r3
    a998:	f7ff fe62 	bl	a660 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a99c:	20fa      	movs	r0, #250	; 0xfa
    a99e:	f7ff fe5f 	bl	a660 <USBHwCmd>
    
    return iLen;
    a9a2:	687b      	ldr	r3, [r7, #4]
}
    a9a4:	4618      	mov	r0, r3
    a9a6:	3718      	adds	r7, #24
    a9a8:	46bd      	mov	sp, r7
    a9aa:	bd80      	pop	{r7, pc}
    a9ac:	5000c228 	.word	0x5000c228
    a9b0:	5000c224 	.word	0x5000c224
    a9b4:	5000c21c 	.word	0x5000c21c

0000a9b8 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a9b8:	b580      	push	{r7, lr}
    a9ba:	b088      	sub	sp, #32
    a9bc:	af00      	add	r7, sp, #0
    a9be:	4603      	mov	r3, r0
    a9c0:	60b9      	str	r1, [r7, #8]
    a9c2:	607a      	str	r2, [r7, #4]
    a9c4:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a9c6:	7bfb      	ldrb	r3, [r7, #15]
    a9c8:	f003 030f 	and.w	r3, r3, #15
    a9cc:	005b      	lsls	r3, r3, #1
    a9ce:	7bfa      	ldrb	r2, [r7, #15]
    a9d0:	09d2      	lsrs	r2, r2, #7
    a9d2:	b2d2      	uxtb	r2, r2
    a9d4:	4313      	orrs	r3, r2
    a9d6:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a9d8:	4a27      	ldr	r2, [pc, #156]	; (aa78 <USBHwEPRead+0xc0>)
    a9da:	7bfb      	ldrb	r3, [r7, #15]
    a9dc:	f003 030f 	and.w	r3, r3, #15
    a9e0:	009b      	lsls	r3, r3, #2
    a9e2:	f043 0301 	orr.w	r3, r3, #1
    a9e6:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a9e8:	4b24      	ldr	r3, [pc, #144]	; (aa7c <USBHwEPRead+0xc4>)
    a9ea:	681b      	ldr	r3, [r3, #0]
    a9ec:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a9ee:	693b      	ldr	r3, [r7, #16]
    a9f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	d0f7      	beq.n	a9e8 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a9f8:	693b      	ldr	r3, [r7, #16]
    a9fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d102      	bne.n	aa08 <USBHwEPRead+0x50>
        return -1;
    aa02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aa06:	e033      	b.n	aa70 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    aa08:	693b      	ldr	r3, [r7, #16]
    aa0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    aa0e:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    aa10:	2300      	movs	r3, #0
    aa12:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    aa14:	2300      	movs	r3, #0
    aa16:	61fb      	str	r3, [r7, #28]
    aa18:	e01a      	b.n	aa50 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    aa1a:	69fb      	ldr	r3, [r7, #28]
    aa1c:	f003 0303 	and.w	r3, r3, #3
    aa20:	2b00      	cmp	r3, #0
    aa22:	d102      	bne.n	aa2a <USBHwEPRead+0x72>
            dwData = USBRxData;
    aa24:	4b16      	ldr	r3, [pc, #88]	; (aa80 <USBHwEPRead+0xc8>)
    aa26:	681b      	ldr	r3, [r3, #0]
    aa28:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    aa2a:	68bb      	ldr	r3, [r7, #8]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d009      	beq.n	aa44 <USBHwEPRead+0x8c>
    aa30:	69fa      	ldr	r2, [r7, #28]
    aa32:	687b      	ldr	r3, [r7, #4]
    aa34:	429a      	cmp	r2, r3
    aa36:	d205      	bcs.n	aa44 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    aa38:	68ba      	ldr	r2, [r7, #8]
    aa3a:	69fb      	ldr	r3, [r7, #28]
    aa3c:	4413      	add	r3, r2
    aa3e:	69ba      	ldr	r2, [r7, #24]
    aa40:	b2d2      	uxtb	r2, r2
    aa42:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    aa44:	69bb      	ldr	r3, [r7, #24]
    aa46:	0a1b      	lsrs	r3, r3, #8
    aa48:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    aa4a:	69fb      	ldr	r3, [r7, #28]
    aa4c:	3301      	adds	r3, #1
    aa4e:	61fb      	str	r3, [r7, #28]
    aa50:	69fa      	ldr	r2, [r7, #28]
    aa52:	693b      	ldr	r3, [r7, #16]
    aa54:	429a      	cmp	r2, r3
    aa56:	d3e0      	bcc.n	aa1a <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    aa58:	4b07      	ldr	r3, [pc, #28]	; (aa78 <USBHwEPRead+0xc0>)
    aa5a:	2200      	movs	r2, #0
    aa5c:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    aa5e:	697b      	ldr	r3, [r7, #20]
    aa60:	b2db      	uxtb	r3, r3
    aa62:	4618      	mov	r0, r3
    aa64:	f7ff fdfc 	bl	a660 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    aa68:	20f2      	movs	r0, #242	; 0xf2
    aa6a:	f7ff fdf9 	bl	a660 <USBHwCmd>
    
    return dwLen;
    aa6e:	693b      	ldr	r3, [r7, #16]
}
    aa70:	4618      	mov	r0, r3
    aa72:	3720      	adds	r7, #32
    aa74:	46bd      	mov	sp, r7
    aa76:	bd80      	pop	{r7, pc}
    aa78:	5000c228 	.word	0x5000c228
    aa7c:	5000c220 	.word	0x5000c220
    aa80:	5000c218 	.word	0x5000c218

0000aa84 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    aa84:	b580      	push	{r7, lr}
    aa86:	b082      	sub	sp, #8
    aa88:	af00      	add	r7, sp, #0
    aa8a:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    aa8c:	687b      	ldr	r3, [r7, #4]
    aa8e:	2b00      	cmp	r3, #0
    aa90:	bf14      	ite	ne
    aa92:	2301      	movne	r3, #1
    aa94:	2300      	moveq	r3, #0
    aa96:	b2db      	uxtb	r3, r3
    aa98:	b29b      	uxth	r3, r3
    aa9a:	20d8      	movs	r0, #216	; 0xd8
    aa9c:	4619      	mov	r1, r3
    aa9e:	f7ff fdf7 	bl	a690 <USBHwCmdWrite>
}
    aaa2:	3708      	adds	r7, #8
    aaa4:	46bd      	mov	sp, r7
    aaa6:	bd80      	pop	{r7, pc}

0000aaa8 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    aaa8:	b580      	push	{r7, lr}
    aaaa:	b086      	sub	sp, #24
    aaac:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    aaae:	4b5b      	ldr	r3, [pc, #364]	; (ac1c <USBHwISR+0x174>)
    aab0:	681b      	ldr	r3, [r3, #0]
    aab2:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    aab4:	693b      	ldr	r3, [r7, #16]
    aab6:	f003 0301 	and.w	r3, r3, #1
    aaba:	2b00      	cmp	r3, #0
    aabc:	d010      	beq.n	aae0 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    aabe:	4b58      	ldr	r3, [pc, #352]	; (ac20 <USBHwISR+0x178>)
    aac0:	2201      	movs	r2, #1
    aac2:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    aac4:	4b57      	ldr	r3, [pc, #348]	; (ac24 <USBHwISR+0x17c>)
    aac6:	681b      	ldr	r3, [r3, #0]
    aac8:	2b00      	cmp	r3, #0
    aaca:	d009      	beq.n	aae0 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    aacc:	20f5      	movs	r0, #245	; 0xf5
    aace:	f7ff fdf9 	bl	a6c4 <USBHwCmdRead>
    aad2:	4603      	mov	r3, r0
    aad4:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    aad6:	4b53      	ldr	r3, [pc, #332]	; (ac24 <USBHwISR+0x17c>)
    aad8:	681b      	ldr	r3, [r3, #0]
    aada:	89fa      	ldrh	r2, [r7, #14]
    aadc:	4610      	mov	r0, r2
    aade:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    aae0:	693b      	ldr	r3, [r7, #16]
    aae2:	f003 0308 	and.w	r3, r3, #8
    aae6:	2b00      	cmp	r3, #0
    aae8:	d02b      	beq.n	ab42 <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    aaea:	4b4d      	ldr	r3, [pc, #308]	; (ac20 <USBHwISR+0x178>)
    aaec:	2208      	movs	r2, #8
    aaee:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    aaf0:	20fe      	movs	r0, #254	; 0xfe
    aaf2:	f7ff fde7 	bl	a6c4 <USBHwCmdRead>
    aaf6:	4603      	mov	r3, r0
    aaf8:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    aafa:	7b7b      	ldrb	r3, [r7, #13]
    aafc:	f003 031a 	and.w	r3, r3, #26
    ab00:	2b00      	cmp	r3, #0
    ab02:	d01e      	beq.n	ab42 <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    ab04:	7b7b      	ldrb	r3, [r7, #13]
    ab06:	f003 0301 	and.w	r3, r3, #1
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	bf14      	ite	ne
    ab0e:	2301      	movne	r3, #1
    ab10:	2300      	moveq	r3, #0
    ab12:	b2db      	uxtb	r3, r3
    ab14:	b2da      	uxtb	r2, r3
    ab16:	7b7b      	ldrb	r3, [r7, #13]
    ab18:	f003 0304 	and.w	r3, r3, #4
    ab1c:	b2db      	uxtb	r3, r3
    ab1e:	4313      	orrs	r3, r2
    ab20:	b2da      	uxtb	r2, r3
    ab22:	7b7b      	ldrb	r3, [r7, #13]
    ab24:	f003 0310 	and.w	r3, r3, #16
    ab28:	b2db      	uxtb	r3, r3
    ab2a:	4313      	orrs	r3, r2
    ab2c:	b2db      	uxtb	r3, r3
    ab2e:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    ab30:	4b3d      	ldr	r3, [pc, #244]	; (ac28 <USBHwISR+0x180>)
    ab32:	681b      	ldr	r3, [r3, #0]
    ab34:	2b00      	cmp	r3, #0
    ab36:	d004      	beq.n	ab42 <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    ab38:	4b3b      	ldr	r3, [pc, #236]	; (ac28 <USBHwISR+0x180>)
    ab3a:	681b      	ldr	r3, [r3, #0]
    ab3c:	7b3a      	ldrb	r2, [r7, #12]
    ab3e:	4610      	mov	r0, r2
    ab40:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    ab42:	693b      	ldr	r3, [r7, #16]
    ab44:	f003 0304 	and.w	r3, r3, #4
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d063      	beq.n	ac14 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    ab4c:	4b34      	ldr	r3, [pc, #208]	; (ac20 <USBHwISR+0x178>)
    ab4e:	2204      	movs	r2, #4
    ab50:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    ab52:	2300      	movs	r3, #0
    ab54:	617b      	str	r3, [r7, #20]
    ab56:	e05a      	b.n	ac0e <USBHwISR+0x166>
            dwIntBit = (1 << i);
    ab58:	2201      	movs	r2, #1
    ab5a:	697b      	ldr	r3, [r7, #20]
    ab5c:	fa02 f303 	lsl.w	r3, r2, r3
    ab60:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    ab62:	4b32      	ldr	r3, [pc, #200]	; (ac2c <USBHwISR+0x184>)
    ab64:	681a      	ldr	r2, [r3, #0]
    ab66:	68bb      	ldr	r3, [r7, #8]
    ab68:	4013      	ands	r3, r2
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d04c      	beq.n	ac08 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    ab6e:	4a30      	ldr	r2, [pc, #192]	; (ac30 <USBHwISR+0x188>)
    ab70:	68bb      	ldr	r3, [r7, #8]
    ab72:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    ab74:	2020      	movs	r0, #32
    ab76:	f7ff fd5b 	bl	a630 <Wait4DevInt>
                bEPStat = USBCmdData;
    ab7a:	4b2e      	ldr	r3, [pc, #184]	; (ac34 <USBHwISR+0x18c>)
    ab7c:	681b      	ldr	r3, [r3, #0]
    ab7e:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    ab80:	79fb      	ldrb	r3, [r7, #7]
    ab82:	f003 0301 	and.w	r3, r3, #1
    ab86:	2b00      	cmp	r3, #0
    ab88:	bf14      	ite	ne
    ab8a:	2301      	movne	r3, #1
    ab8c:	2300      	moveq	r3, #0
    ab8e:	b2db      	uxtb	r3, r3
    ab90:	b2da      	uxtb	r2, r3
    ab92:	79fb      	ldrb	r3, [r7, #7]
    ab94:	f003 0302 	and.w	r3, r3, #2
    ab98:	b2db      	uxtb	r3, r3
    ab9a:	4313      	orrs	r3, r2
    ab9c:	b2da      	uxtb	r2, r3
    ab9e:	79fb      	ldrb	r3, [r7, #7]
    aba0:	f003 0304 	and.w	r3, r3, #4
    aba4:	b2db      	uxtb	r3, r3
    aba6:	4313      	orrs	r3, r2
    aba8:	b2da      	uxtb	r2, r3
    abaa:	79fb      	ldrb	r3, [r7, #7]
    abac:	f003 0310 	and.w	r3, r3, #16
    abb0:	b2db      	uxtb	r3, r3
    abb2:	4313      	orrs	r3, r2
    abb4:	b2da      	uxtb	r2, r3
    abb6:	79fb      	ldrb	r3, [r7, #7]
    abb8:	f003 0308 	and.w	r3, r3, #8
    abbc:	b2db      	uxtb	r3, r3
    abbe:	4313      	orrs	r3, r2
    abc0:	b2db      	uxtb	r3, r3
    abc2:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    abc4:	697b      	ldr	r3, [r7, #20]
    abc6:	0fda      	lsrs	r2, r3, #31
    abc8:	4413      	add	r3, r2
    abca:	105b      	asrs	r3, r3, #1
    abcc:	461a      	mov	r2, r3
    abce:	4b1a      	ldr	r3, [pc, #104]	; (ac38 <USBHwISR+0x190>)
    abd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    abd4:	2b00      	cmp	r3, #0
    abd6:	d017      	beq.n	ac08 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    abd8:	697b      	ldr	r3, [r7, #20]
    abda:	0fda      	lsrs	r2, r3, #31
    abdc:	4413      	add	r3, r2
    abde:	105b      	asrs	r3, r3, #1
    abe0:	461a      	mov	r2, r3
    abe2:	4b15      	ldr	r3, [pc, #84]	; (ac38 <USBHwISR+0x190>)
    abe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    abe8:	697a      	ldr	r2, [r7, #20]
    abea:	01d2      	lsls	r2, r2, #7
    abec:	b2d1      	uxtb	r1, r2
    abee:	697a      	ldr	r2, [r7, #20]
    abf0:	1052      	asrs	r2, r2, #1
    abf2:	b2d2      	uxtb	r2, r2
    abf4:	f002 020f 	and.w	r2, r2, #15
    abf8:	b2d2      	uxtb	r2, r2
    abfa:	430a      	orrs	r2, r1
    abfc:	b2d2      	uxtb	r2, r2
    abfe:	b2d1      	uxtb	r1, r2
    ac00:	7b3a      	ldrb	r2, [r7, #12]
    ac02:	4608      	mov	r0, r1
    ac04:	4611      	mov	r1, r2
    ac06:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    ac08:	697b      	ldr	r3, [r7, #20]
    ac0a:	3301      	adds	r3, #1
    ac0c:	617b      	str	r3, [r7, #20]
    ac0e:	697b      	ldr	r3, [r7, #20]
    ac10:	2b1f      	cmp	r3, #31
    ac12:	dda1      	ble.n	ab58 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    ac14:	3718      	adds	r7, #24
    ac16:	46bd      	mov	sp, r7
    ac18:	bd80      	pop	{r7, pc}
    ac1a:	bf00      	nop
    ac1c:	5000c200 	.word	0x5000c200
    ac20:	5000c208 	.word	0x5000c208
    ac24:	10000aec 	.word	0x10000aec
    ac28:	10000aa8 	.word	0x10000aa8
    ac2c:	5000c230 	.word	0x5000c230
    ac30:	5000c238 	.word	0x5000c238
    ac34:	5000c214 	.word	0x5000c214
    ac38:	10000aac 	.word	0x10000aac

0000ac3c <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    ac3c:	b580      	push	{r7, lr}
    ac3e:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    ac40:	4a2d      	ldr	r2, [pc, #180]	; (acf8 <USBHwInit+0xbc>)
    ac42:	4b2d      	ldr	r3, [pc, #180]	; (acf8 <USBHwInit+0xbc>)
    ac44:	681b      	ldr	r3, [r3, #0]
    ac46:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    ac4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    ac4e:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    ac50:	4a2a      	ldr	r2, [pc, #168]	; (acfc <USBHwInit+0xc0>)
    ac52:	4b2a      	ldr	r3, [pc, #168]	; (acfc <USBHwInit+0xc0>)
    ac54:	681b      	ldr	r3, [r3, #0]
    ac56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    ac5a:	f043 0310 	orr.w	r3, r3, #16
    ac5e:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    ac60:	4a26      	ldr	r2, [pc, #152]	; (acfc <USBHwInit+0xc0>)
    ac62:	4b26      	ldr	r3, [pc, #152]	; (acfc <USBHwInit+0xc0>)
    ac64:	681b      	ldr	r3, [r3, #0]
    ac66:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    ac6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    ac6e:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    ac70:	4a23      	ldr	r2, [pc, #140]	; (ad00 <USBHwInit+0xc4>)
    ac72:	4b23      	ldr	r3, [pc, #140]	; (ad00 <USBHwInit+0xc4>)
    ac74:	681b      	ldr	r3, [r3, #0]
    ac76:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    ac7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    ac7e:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    ac80:	4a1f      	ldr	r2, [pc, #124]	; (ad00 <USBHwInit+0xc4>)
    ac82:	4b1f      	ldr	r3, [pc, #124]	; (ad00 <USBHwInit+0xc4>)
    ac84:	681b      	ldr	r3, [r3, #0]
    ac86:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    ac8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    ac8e:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    ac90:	4a1c      	ldr	r2, [pc, #112]	; (ad04 <USBHwInit+0xc8>)
    ac92:	4b1c      	ldr	r3, [pc, #112]	; (ad04 <USBHwInit+0xc8>)
    ac94:	681b      	ldr	r3, [r3, #0]
    ac96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ac9a:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    ac9c:	4a1a      	ldr	r2, [pc, #104]	; (ad08 <USBHwInit+0xcc>)
    ac9e:	4b1a      	ldr	r3, [pc, #104]	; (ad08 <USBHwInit+0xcc>)
    aca0:	681b      	ldr	r3, [r3, #0]
    aca2:	f043 0312 	orr.w	r3, r3, #18
    aca6:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    aca8:	bf00      	nop
    acaa:	4b18      	ldr	r3, [pc, #96]	; (ad0c <USBHwInit+0xd0>)
    acac:	681b      	ldr	r3, [r3, #0]
    acae:	f003 0302 	and.w	r3, r3, #2
    acb2:	2b00      	cmp	r3, #0
    acb4:	d0f9      	beq.n	acaa <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    acb6:	bf00      	nop
    acb8:	4b14      	ldr	r3, [pc, #80]	; (ad0c <USBHwInit+0xd0>)
    acba:	681b      	ldr	r3, [r3, #0]
    acbc:	f003 0310 	and.w	r3, r3, #16
    acc0:	2b00      	cmp	r3, #0
    acc2:	d0f9      	beq.n	acb8 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    acc4:	4b12      	ldr	r3, [pc, #72]	; (ad10 <USBHwInit+0xd4>)
    acc6:	2200      	movs	r2, #0
    acc8:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    acca:	4b12      	ldr	r3, [pc, #72]	; (ad14 <USBHwInit+0xd8>)
    accc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    acd0:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    acd2:	4b11      	ldr	r3, [pc, #68]	; (ad18 <USBHwInit+0xdc>)
    acd4:	2200      	movs	r2, #0
    acd6:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    acd8:	4b10      	ldr	r3, [pc, #64]	; (ad1c <USBHwInit+0xe0>)
    acda:	2200      	movs	r2, #0
    acdc:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    acde:	4b10      	ldr	r3, [pc, #64]	; (ad20 <USBHwInit+0xe4>)
    ace0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ace4:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    ace6:	4b0f      	ldr	r3, [pc, #60]	; (ad24 <USBHwInit+0xe8>)
    ace8:	2200      	movs	r2, #0
    acea:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    acec:	2000      	movs	r0, #0
    acee:	f7ff fdcb 	bl	a888 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    acf2:	2301      	movs	r3, #1
}
    acf4:	4618      	mov	r0, r3
    acf6:	bd80      	pop	{r7, pc}
    acf8:	4002c010 	.word	0x4002c010
    acfc:	4002c00c 	.word	0x4002c00c
    ad00:	4002c004 	.word	0x4002c004
    ad04:	400fc0c4 	.word	0x400fc0c4
    ad08:	5000cff4 	.word	0x5000cff4
    ad0c:	5000cff8 	.word	0x5000cff8
    ad10:	5000c204 	.word	0x5000c204
    ad14:	5000c208 	.word	0x5000c208
    ad18:	5000c22c 	.word	0x5000c22c
    ad1c:	5000c234 	.word	0x5000c234
    ad20:	5000c238 	.word	0x5000c238
    ad24:	5000c240 	.word	0x5000c240

0000ad28 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    ad28:	b480      	push	{r7}
    ad2a:	b089      	sub	sp, #36	; 0x24
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	60f8      	str	r0, [r7, #12]
    ad30:	60b9      	str	r1, [r7, #8]
    ad32:	607a      	str	r2, [r7, #4]
    ad34:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    ad36:	4b2d      	ldr	r3, [pc, #180]	; (adec <USBFilterOsVendorMessage+0xc4>)
    ad38:	781b      	ldrb	r3, [r3, #0]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d101      	bne.n	ad42 <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    ad3e:	2300      	movs	r3, #0
    ad40:	e04e      	b.n	ade0 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    ad42:	68fb      	ldr	r3, [r7, #12]
    ad44:	785a      	ldrb	r2, [r3, #1]
    ad46:	4b29      	ldr	r3, [pc, #164]	; (adec <USBFilterOsVendorMessage+0xc4>)
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	429a      	cmp	r2, r3
    ad4c:	d147      	bne.n	adde <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    ad4e:	68bb      	ldr	r3, [r7, #8]
    ad50:	2200      	movs	r2, #0
    ad52:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    ad54:	68fb      	ldr	r3, [r7, #12]
    ad56:	88db      	ldrh	r3, [r3, #6]
    ad58:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    ad5a:	68fb      	ldr	r3, [r7, #12]
    ad5c:	885b      	ldrh	r3, [r3, #2]
    ad5e:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    ad60:	68fb      	ldr	r3, [r7, #12]
    ad62:	885b      	ldrh	r3, [r3, #2]
    ad64:	0a1b      	lsrs	r3, r3, #8
    ad66:	b29b      	uxth	r3, r3
    ad68:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    ad6a:	68fb      	ldr	r3, [r7, #12]
    ad6c:	889b      	ldrh	r3, [r3, #4]
    ad6e:	2b04      	cmp	r3, #4
    ad70:	d002      	beq.n	ad78 <USBFilterOsVendorMessage+0x50>
    ad72:	2b05      	cmp	r3, #5
    ad74:	d007      	beq.n	ad86 <USBFilterOsVendorMessage+0x5e>
    ad76:	e00d      	b.n	ad94 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    ad78:	683b      	ldr	r3, [r7, #0]
    ad7a:	4a1d      	ldr	r2, [pc, #116]	; (adf0 <USBFilterOsVendorMessage+0xc8>)
    ad7c:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    ad7e:	687b      	ldr	r3, [r7, #4]
    ad80:	2228      	movs	r2, #40	; 0x28
    ad82:	601a      	str	r2, [r3, #0]
			break;
    ad84:	e008      	b.n	ad98 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    ad86:	683b      	ldr	r3, [r7, #0]
    ad88:	4a1a      	ldr	r2, [pc, #104]	; (adf4 <USBFilterOsVendorMessage+0xcc>)
    ad8a:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    ad8c:	687b      	ldr	r3, [r7, #4]
    ad8e:	2292      	movs	r2, #146	; 0x92
    ad90:	601a      	str	r2, [r3, #0]
			break;
    ad92:	e001      	b.n	ad98 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    ad94:	2301      	movs	r3, #1
    ad96:	e023      	b.n	ade0 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    ad98:	7ebb      	ldrb	r3, [r7, #26]
    ad9a:	041b      	lsls	r3, r3, #16
    ad9c:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    ad9e:	687b      	ldr	r3, [r7, #4]
    ada0:	681a      	ldr	r2, [r3, #0]
    ada2:	697b      	ldr	r3, [r7, #20]
    ada4:	429a      	cmp	r2, r3
    ada6:	da01      	bge.n	adac <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    ada8:	2301      	movs	r3, #1
    adaa:	e019      	b.n	ade0 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    adac:	683b      	ldr	r3, [r7, #0]
    adae:	681a      	ldr	r2, [r3, #0]
    adb0:	697b      	ldr	r3, [r7, #20]
    adb2:	441a      	add	r2, r3
    adb4:	683b      	ldr	r3, [r7, #0]
    adb6:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    adb8:	687b      	ldr	r3, [r7, #4]
    adba:	681a      	ldr	r2, [r3, #0]
    adbc:	697b      	ldr	r3, [r7, #20]
    adbe:	1ad2      	subs	r2, r2, r3
    adc0:	687b      	ldr	r3, [r7, #4]
    adc2:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    adc4:	687b      	ldr	r3, [r7, #4]
    adc6:	681a      	ldr	r2, [r3, #0]
    adc8:	69fb      	ldr	r3, [r7, #28]
    adca:	429a      	cmp	r2, r3
    adcc:	dd02      	ble.n	add4 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    adce:	687b      	ldr	r3, [r7, #4]
    add0:	69fa      	ldr	r2, [r7, #28]
    add2:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    add4:	68bb      	ldr	r3, [r7, #8]
    add6:	2201      	movs	r2, #1
    add8:	601a      	str	r2, [r3, #0]
		return TRUE;
    adda:	2301      	movs	r3, #1
    addc:	e000      	b.n	ade0 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    adde:	2300      	movs	r3, #0
}
    ade0:	4618      	mov	r0, r3
    ade2:	3724      	adds	r7, #36	; 0x24
    ade4:	46bd      	mov	sp, r7
    ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
    adea:	4770      	bx	lr
    adec:	10000afc 	.word	0x10000afc
    adf0:	0000bf18 	.word	0x0000bf18
    adf4:	100008cc 	.word	0x100008cc

0000adf8 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    adf8:	b480      	push	{r7}
    adfa:	b087      	sub	sp, #28
    adfc:	af00      	add	r7, sp, #0
    adfe:	4603      	mov	r3, r0
    ae00:	6039      	str	r1, [r7, #0]
    ae02:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    ae04:	4a18      	ldr	r2, [pc, #96]	; (ae68 <USBRegisterWinusbInterface+0x70>)
    ae06:	79fb      	ldrb	r3, [r7, #7]
    ae08:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    ae0a:	683b      	ldr	r3, [r7, #0]
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d100      	bne.n	ae12 <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    ae10:	e024      	b.n	ae5c <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    ae12:	4b16      	ldr	r3, [pc, #88]	; (ae6c <USBRegisterWinusbInterface+0x74>)
    ae14:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    ae16:	2326      	movs	r3, #38	; 0x26
    ae18:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    ae1a:	2300      	movs	r3, #0
    ae1c:	613b      	str	r3, [r7, #16]
    ae1e:	e012      	b.n	ae46 <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    ae20:	693b      	ldr	r3, [r7, #16]
    ae22:	683a      	ldr	r2, [r7, #0]
    ae24:	4413      	add	r3, r2
    ae26:	781b      	ldrb	r3, [r3, #0]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d100      	bne.n	ae2e <USBRegisterWinusbInterface+0x36>
    ae2c:	e00f      	b.n	ae4e <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    ae2e:	693b      	ldr	r3, [r7, #16]
    ae30:	683a      	ldr	r2, [r7, #0]
    ae32:	4413      	add	r3, r2
    ae34:	781a      	ldrb	r2, [r3, #0]
    ae36:	697b      	ldr	r3, [r7, #20]
    ae38:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    ae3a:	697b      	ldr	r3, [r7, #20]
    ae3c:	3302      	adds	r3, #2
    ae3e:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    ae40:	693b      	ldr	r3, [r7, #16]
    ae42:	3301      	adds	r3, #1
    ae44:	613b      	str	r3, [r7, #16]
    ae46:	693a      	ldr	r2, [r7, #16]
    ae48:	68fb      	ldr	r3, [r7, #12]
    ae4a:	429a      	cmp	r2, r3
    ae4c:	dbe8      	blt.n	ae20 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    ae4e:	697b      	ldr	r3, [r7, #20]
    ae50:	2200      	movs	r2, #0
    ae52:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    ae54:	697b      	ldr	r3, [r7, #20]
    ae56:	3302      	adds	r3, #2
    ae58:	2200      	movs	r2, #0
    ae5a:	701a      	strb	r2, [r3, #0]
	
}
    ae5c:	371c      	adds	r7, #28
    ae5e:	46bd      	mov	sp, r7
    ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae64:	4770      	bx	lr
    ae66:	bf00      	nop
    ae68:	10000afc 	.word	0x10000afc
    ae6c:	1000090e 	.word	0x1000090e

0000ae70 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    ae70:	b480      	push	{r7}
    ae72:	b083      	sub	sp, #12
    ae74:	af00      	add	r7, sp, #0
    ae76:	6078      	str	r0, [r7, #4]
    ae78:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    ae7a:	4b08      	ldr	r3, [pc, #32]	; (ae9c <USBGetOsStringDescriptor+0x2c>)
    ae7c:	781a      	ldrb	r2, [r3, #0]
    ae7e:	4b08      	ldr	r3, [pc, #32]	; (aea0 <USBGetOsStringDescriptor+0x30>)
    ae80:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    ae82:	683b      	ldr	r3, [r7, #0]
    ae84:	4a06      	ldr	r2, [pc, #24]	; (aea0 <USBGetOsStringDescriptor+0x30>)
    ae86:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	2212      	movs	r2, #18
    ae8c:	601a      	str	r2, [r3, #0]
	return TRUE;
    ae8e:	2301      	movs	r3, #1
}
    ae90:	4618      	mov	r0, r3
    ae92:	370c      	adds	r7, #12
    ae94:	46bd      	mov	sp, r7
    ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae9a:	4770      	bx	lr
    ae9c:	10000afc 	.word	0x10000afc
    aea0:	100008b8 	.word	0x100008b8

0000aea4 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    aea4:	b480      	push	{r7}
    aea6:	b083      	sub	sp, #12
    aea8:	af00      	add	r7, sp, #0
    aeaa:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    aeac:	4a03      	ldr	r2, [pc, #12]	; (aebc <USBRegisterDescriptors+0x18>)
    aeae:	687b      	ldr	r3, [r7, #4]
    aeb0:	6013      	str	r3, [r2, #0]
}
    aeb2:	370c      	adds	r7, #12
    aeb4:	46bd      	mov	sp, r7
    aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aeba:	4770      	bx	lr
    aebc:	10000af8 	.word	0x10000af8

0000aec0 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    aec0:	b580      	push	{r7, lr}
    aec2:	b088      	sub	sp, #32
    aec4:	af00      	add	r7, sp, #0
    aec6:	60ba      	str	r2, [r7, #8]
    aec8:	607b      	str	r3, [r7, #4]
    aeca:	4603      	mov	r3, r0
    aecc:	81fb      	strh	r3, [r7, #14]
    aece:	460b      	mov	r3, r1
    aed0:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    aed2:	89fb      	ldrh	r3, [r7, #14]
    aed4:	0a1b      	lsrs	r3, r3, #8
    aed6:	b29b      	uxth	r3, r3
    aed8:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    aeda:	89fb      	ldrh	r3, [r7, #14]
    aedc:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    aede:	7dfb      	ldrb	r3, [r7, #23]
    aee0:	2b03      	cmp	r3, #3
    aee2:	d10b      	bne.n	aefc <USBGetDescriptor+0x3c>
    aee4:	7dbb      	ldrb	r3, [r7, #22]
    aee6:	2bee      	cmp	r3, #238	; 0xee
    aee8:	d108      	bne.n	aefc <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    aeea:	68b8      	ldr	r0, [r7, #8]
    aeec:	6879      	ldr	r1, [r7, #4]
    aeee:	f7ff ffbf 	bl	ae70 <USBGetOsStringDescriptor>
    aef2:	4603      	mov	r3, r0
    aef4:	2b00      	cmp	r3, #0
    aef6:	d001      	beq.n	aefc <USBGetDescriptor+0x3c>
            
            return TRUE;
    aef8:	2301      	movs	r3, #1
    aefa:	e036      	b.n	af6a <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    aefc:	4b1d      	ldr	r3, [pc, #116]	; (af74 <USBGetDescriptor+0xb4>)
    aefe:	681b      	ldr	r3, [r3, #0]
    af00:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    af02:	2300      	movs	r3, #0
    af04:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    af06:	e02b      	b.n	af60 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    af08:	69fb      	ldr	r3, [r7, #28]
    af0a:	3301      	adds	r3, #1
    af0c:	781b      	ldrb	r3, [r3, #0]
    af0e:	7dfa      	ldrb	r2, [r7, #23]
    af10:	429a      	cmp	r2, r3
    af12:	d11f      	bne.n	af54 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    af14:	7dba      	ldrb	r2, [r7, #22]
    af16:	69bb      	ldr	r3, [r7, #24]
    af18:	429a      	cmp	r2, r3
    af1a:	d118      	bne.n	af4e <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    af1c:	687b      	ldr	r3, [r7, #4]
    af1e:	69fa      	ldr	r2, [r7, #28]
    af20:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    af22:	7dfb      	ldrb	r3, [r7, #23]
    af24:	2b02      	cmp	r3, #2
    af26:	d10b      	bne.n	af40 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    af28:	69fb      	ldr	r3, [r7, #28]
    af2a:	3302      	adds	r3, #2
    af2c:	781b      	ldrb	r3, [r3, #0]
    af2e:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    af30:	69fb      	ldr	r3, [r7, #28]
    af32:	3303      	adds	r3, #3
    af34:	781b      	ldrb	r3, [r3, #0]
    af36:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    af38:	431a      	orrs	r2, r3
    af3a:	68bb      	ldr	r3, [r7, #8]
    af3c:	601a      	str	r2, [r3, #0]
    af3e:	e004      	b.n	af4a <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    af40:	69fb      	ldr	r3, [r7, #28]
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	461a      	mov	r2, r3
    af46:	68bb      	ldr	r3, [r7, #8]
    af48:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    af4a:	2301      	movs	r3, #1
    af4c:	e00d      	b.n	af6a <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    af4e:	69bb      	ldr	r3, [r7, #24]
    af50:	3301      	adds	r3, #1
    af52:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    af54:	69fb      	ldr	r3, [r7, #28]
    af56:	781b      	ldrb	r3, [r3, #0]
    af58:	461a      	mov	r2, r3
    af5a:	69fb      	ldr	r3, [r7, #28]
    af5c:	4413      	add	r3, r2
    af5e:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    af60:	69fb      	ldr	r3, [r7, #28]
    af62:	781b      	ldrb	r3, [r3, #0]
    af64:	2b00      	cmp	r3, #0
    af66:	d1cf      	bne.n	af08 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    af68:	2300      	movs	r3, #0
}
    af6a:	4618      	mov	r0, r3
    af6c:	3720      	adds	r7, #32
    af6e:	46bd      	mov	sp, r7
    af70:	bd80      	pop	{r7, pc}
    af72:	bf00      	nop
    af74:	10000af8 	.word	0x10000af8

0000af78 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    af78:	b580      	push	{r7, lr}
    af7a:	b086      	sub	sp, #24
    af7c:	af00      	add	r7, sp, #0
    af7e:	4603      	mov	r3, r0
    af80:	460a      	mov	r2, r1
    af82:	71fb      	strb	r3, [r7, #7]
    af84:	4613      	mov	r3, r2
    af86:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    af88:	79fb      	ldrb	r3, [r7, #7]
    af8a:	2b00      	cmp	r3, #0
    af8c:	d103      	bne.n	af96 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    af8e:	2000      	movs	r0, #0
    af90:	f7ff fd78 	bl	aa84 <USBHwConfigDevice>
    af94:	e045      	b.n	b022 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    af96:	4b25      	ldr	r3, [pc, #148]	; (b02c <USBSetConfiguration+0xb4>)
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    af9c:	23ff      	movs	r3, #255	; 0xff
    af9e:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    afa0:	23ff      	movs	r3, #255	; 0xff
    afa2:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    afa4:	e036      	b.n	b014 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    afa6:	697b      	ldr	r3, [r7, #20]
    afa8:	3301      	adds	r3, #1
    afaa:	781b      	ldrb	r3, [r3, #0]
    afac:	2b04      	cmp	r3, #4
    afae:	d008      	beq.n	afc2 <USBSetConfiguration+0x4a>
    afb0:	2b05      	cmp	r3, #5
    afb2:	d00a      	beq.n	afca <USBSetConfiguration+0x52>
    afb4:	2b02      	cmp	r3, #2
    afb6:	d000      	beq.n	afba <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    afb8:	e026      	b.n	b008 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    afba:	697b      	ldr	r3, [r7, #20]
    afbc:	795b      	ldrb	r3, [r3, #5]
    afbe:	74fb      	strb	r3, [r7, #19]
				break;
    afc0:	e022      	b.n	b008 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    afc2:	697b      	ldr	r3, [r7, #20]
    afc4:	78db      	ldrb	r3, [r3, #3]
    afc6:	74bb      	strb	r3, [r7, #18]
				break;
    afc8:	e01e      	b.n	b008 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    afca:	7cfa      	ldrb	r2, [r7, #19]
    afcc:	79fb      	ldrb	r3, [r7, #7]
    afce:	429a      	cmp	r2, r3
    afd0:	d119      	bne.n	b006 <USBSetConfiguration+0x8e>
    afd2:	7cba      	ldrb	r2, [r7, #18]
    afd4:	79bb      	ldrb	r3, [r7, #6]
    afd6:	429a      	cmp	r2, r3
    afd8:	d115      	bne.n	b006 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    afda:	697b      	ldr	r3, [r7, #20]
    afdc:	789b      	ldrb	r3, [r3, #2]
    afde:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    afe0:	697b      	ldr	r3, [r7, #20]
    afe2:	3304      	adds	r3, #4
    afe4:	781b      	ldrb	r3, [r3, #0]
    afe6:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    afe8:	697b      	ldr	r3, [r7, #20]
    afea:	3305      	adds	r3, #5
    afec:	781b      	ldrb	r3, [r3, #0]
    afee:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    aff0:	b29b      	uxth	r3, r3
    aff2:	4313      	orrs	r3, r2
    aff4:	b29b      	uxth	r3, r3
    aff6:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    aff8:	7c7a      	ldrb	r2, [r7, #17]
    affa:	89fb      	ldrh	r3, [r7, #14]
    affc:	4610      	mov	r0, r2
    affe:	4619      	mov	r1, r3
    b000:	f7ff fbb8 	bl	a774 <USBHwEPConfig>
				}
				break;
    b004:	e7ff      	b.n	b006 <USBSetConfiguration+0x8e>
    b006:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    b008:	697b      	ldr	r3, [r7, #20]
    b00a:	781b      	ldrb	r3, [r3, #0]
    b00c:	461a      	mov	r2, r3
    b00e:	697b      	ldr	r3, [r7, #20]
    b010:	4413      	add	r3, r2
    b012:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    b014:	697b      	ldr	r3, [r7, #20]
    b016:	781b      	ldrb	r3, [r3, #0]
    b018:	2b00      	cmp	r3, #0
    b01a:	d1c4      	bne.n	afa6 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    b01c:	2001      	movs	r0, #1
    b01e:	f7ff fd31 	bl	aa84 <USBHwConfigDevice>
	}

	return TRUE;
    b022:	2301      	movs	r3, #1
}
    b024:	4618      	mov	r0, r3
    b026:	3718      	adds	r7, #24
    b028:	46bd      	mov	sp, r7
    b02a:	bd80      	pop	{r7, pc}
    b02c:	10000af8 	.word	0x10000af8

0000b030 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    b030:	b580      	push	{r7, lr}
    b032:	b086      	sub	sp, #24
    b034:	af00      	add	r7, sp, #0
    b036:	60f8      	str	r0, [r7, #12]
    b038:	60b9      	str	r1, [r7, #8]
    b03a:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b03c:	687b      	ldr	r3, [r7, #4]
    b03e:	681b      	ldr	r3, [r3, #0]
    b040:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b042:	68fb      	ldr	r3, [r7, #12]
    b044:	785b      	ldrb	r3, [r3, #1]
    b046:	2b09      	cmp	r3, #9
    b048:	d852      	bhi.n	b0f0 <HandleStdDeviceReq+0xc0>
    b04a:	a201      	add	r2, pc, #4	; (adr r2, b050 <HandleStdDeviceReq+0x20>)
    b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b050:	0000b079 	.word	0x0000b079
    b054:	0000b0e9 	.word	0x0000b0e9
    b058:	0000b0f1 	.word	0x0000b0f1
    b05c:	0000b0e9 	.word	0x0000b0e9
    b060:	0000b0f1 	.word	0x0000b0f1
    b064:	0000b08f 	.word	0x0000b08f
    b068:	0000b09d 	.word	0x0000b09d
    b06c:	0000b0ed 	.word	0x0000b0ed
    b070:	0000b0b5 	.word	0x0000b0b5
    b074:	0000b0c5 	.word	0x0000b0c5
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    b078:	697b      	ldr	r3, [r7, #20]
    b07a:	2200      	movs	r2, #0
    b07c:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b07e:	697b      	ldr	r3, [r7, #20]
    b080:	3301      	adds	r3, #1
    b082:	2200      	movs	r2, #0
    b084:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b086:	68bb      	ldr	r3, [r7, #8]
    b088:	2202      	movs	r2, #2
    b08a:	601a      	str	r2, [r3, #0]
		break;
    b08c:	e032      	b.n	b0f4 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    b08e:	68fb      	ldr	r3, [r7, #12]
    b090:	885b      	ldrh	r3, [r3, #2]
    b092:	b2db      	uxtb	r3, r3
    b094:	4618      	mov	r0, r3
    b096:	f7ff fbd3 	bl	a840 <USBHwSetAddress>
		break;
    b09a:	e02b      	b.n	b0f4 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    b09c:	68fb      	ldr	r3, [r7, #12]
    b09e:	885a      	ldrh	r2, [r3, #2]
    b0a0:	68fb      	ldr	r3, [r7, #12]
    b0a2:	889b      	ldrh	r3, [r3, #4]
    b0a4:	4610      	mov	r0, r2
    b0a6:	4619      	mov	r1, r3
    b0a8:	68ba      	ldr	r2, [r7, #8]
    b0aa:	687b      	ldr	r3, [r7, #4]
    b0ac:	f7ff ff08 	bl	aec0 <USBGetDescriptor>
    b0b0:	4603      	mov	r3, r0
    b0b2:	e020      	b.n	b0f6 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    b0b4:	4b12      	ldr	r3, [pc, #72]	; (b100 <HandleStdDeviceReq+0xd0>)
    b0b6:	781a      	ldrb	r2, [r3, #0]
    b0b8:	697b      	ldr	r3, [r7, #20]
    b0ba:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    b0bc:	68bb      	ldr	r3, [r7, #8]
    b0be:	2201      	movs	r2, #1
    b0c0:	601a      	str	r2, [r3, #0]
		break;
    b0c2:	e017      	b.n	b0f4 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    b0c4:	68fb      	ldr	r3, [r7, #12]
    b0c6:	885b      	ldrh	r3, [r3, #2]
    b0c8:	b2db      	uxtb	r3, r3
    b0ca:	4618      	mov	r0, r3
    b0cc:	2100      	movs	r1, #0
    b0ce:	f7ff ff53 	bl	af78 <USBSetConfiguration>
    b0d2:	4603      	mov	r3, r0
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d101      	bne.n	b0dc <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    b0d8:	2300      	movs	r3, #0
    b0da:	e00c      	b.n	b0f6 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    b0dc:	68fb      	ldr	r3, [r7, #12]
    b0de:	885b      	ldrh	r3, [r3, #2]
    b0e0:	b2da      	uxtb	r2, r3
    b0e2:	4b07      	ldr	r3, [pc, #28]	; (b100 <HandleStdDeviceReq+0xd0>)
    b0e4:	701a      	strb	r2, [r3, #0]
		break;
    b0e6:	e005      	b.n	b0f4 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    b0e8:	2300      	movs	r3, #0
    b0ea:	e004      	b.n	b0f6 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    b0ec:	2300      	movs	r3, #0
    b0ee:	e002      	b.n	b0f6 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    b0f0:	2300      	movs	r3, #0
    b0f2:	e000      	b.n	b0f6 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    b0f4:	2301      	movs	r3, #1
}
    b0f6:	4618      	mov	r0, r3
    b0f8:	3718      	adds	r7, #24
    b0fa:	46bd      	mov	sp, r7
    b0fc:	bd80      	pop	{r7, pc}
    b0fe:	bf00      	nop
    b100:	10000af0 	.word	0x10000af0

0000b104 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b104:	b480      	push	{r7}
    b106:	b087      	sub	sp, #28
    b108:	af00      	add	r7, sp, #0
    b10a:	60f8      	str	r0, [r7, #12]
    b10c:	60b9      	str	r1, [r7, #8]
    b10e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b110:	687b      	ldr	r3, [r7, #4]
    b112:	681b      	ldr	r3, [r3, #0]
    b114:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b116:	68fb      	ldr	r3, [r7, #12]
    b118:	785b      	ldrb	r3, [r3, #1]
    b11a:	2b0b      	cmp	r3, #11
    b11c:	d838      	bhi.n	b190 <HandleStdInterfaceReq+0x8c>
    b11e:	a201      	add	r2, pc, #4	; (adr r2, b124 <HandleStdInterfaceReq+0x20>)
    b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b124:	0000b155 	.word	0x0000b155
    b128:	0000b16b 	.word	0x0000b16b
    b12c:	0000b191 	.word	0x0000b191
    b130:	0000b16b 	.word	0x0000b16b
    b134:	0000b191 	.word	0x0000b191
    b138:	0000b191 	.word	0x0000b191
    b13c:	0000b191 	.word	0x0000b191
    b140:	0000b191 	.word	0x0000b191
    b144:	0000b191 	.word	0x0000b191
    b148:	0000b191 	.word	0x0000b191
    b14c:	0000b16f 	.word	0x0000b16f
    b150:	0000b17d 	.word	0x0000b17d

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    b154:	697b      	ldr	r3, [r7, #20]
    b156:	2200      	movs	r2, #0
    b158:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b15a:	697b      	ldr	r3, [r7, #20]
    b15c:	3301      	adds	r3, #1
    b15e:	2200      	movs	r2, #0
    b160:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b162:	68bb      	ldr	r3, [r7, #8]
    b164:	2202      	movs	r2, #2
    b166:	601a      	str	r2, [r3, #0]
		break;
    b168:	e014      	b.n	b194 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    b16a:	2300      	movs	r3, #0
    b16c:	e013      	b.n	b196 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    b16e:	697b      	ldr	r3, [r7, #20]
    b170:	2200      	movs	r2, #0
    b172:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    b174:	68bb      	ldr	r3, [r7, #8]
    b176:	2201      	movs	r2, #1
    b178:	601a      	str	r2, [r3, #0]
		break;
    b17a:	e00b      	b.n	b194 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    b17c:	68fb      	ldr	r3, [r7, #12]
    b17e:	885b      	ldrh	r3, [r3, #2]
    b180:	2b00      	cmp	r3, #0
    b182:	d001      	beq.n	b188 <HandleStdInterfaceReq+0x84>
			return FALSE;
    b184:	2300      	movs	r3, #0
    b186:	e006      	b.n	b196 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    b188:	68bb      	ldr	r3, [r7, #8]
    b18a:	2200      	movs	r2, #0
    b18c:	601a      	str	r2, [r3, #0]
		break;
    b18e:	e001      	b.n	b194 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    b190:	2300      	movs	r3, #0
    b192:	e000      	b.n	b196 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    b194:	2301      	movs	r3, #1
}
    b196:	4618      	mov	r0, r3
    b198:	371c      	adds	r7, #28
    b19a:	46bd      	mov	sp, r7
    b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1a0:	4770      	bx	lr
    b1a2:	bf00      	nop

0000b1a4 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b1a4:	b580      	push	{r7, lr}
    b1a6:	b086      	sub	sp, #24
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	60f8      	str	r0, [r7, #12]
    b1ac:	60b9      	str	r1, [r7, #8]
    b1ae:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b1b0:	687b      	ldr	r3, [r7, #4]
    b1b2:	681b      	ldr	r3, [r3, #0]
    b1b4:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b1b6:	68fb      	ldr	r3, [r7, #12]
    b1b8:	785b      	ldrb	r3, [r3, #1]
    b1ba:	2b0c      	cmp	r3, #12
    b1bc:	d853      	bhi.n	b266 <HandleStdEndPointReq+0xc2>
    b1be:	a201      	add	r2, pc, #4	; (adr r2, b1c4 <HandleStdEndPointReq+0x20>)
    b1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b1c4:	0000b1f9 	.word	0x0000b1f9
    b1c8:	0000b22b 	.word	0x0000b22b
    b1cc:	0000b267 	.word	0x0000b267
    b1d0:	0000b247 	.word	0x0000b247
    b1d4:	0000b267 	.word	0x0000b267
    b1d8:	0000b267 	.word	0x0000b267
    b1dc:	0000b267 	.word	0x0000b267
    b1e0:	0000b267 	.word	0x0000b267
    b1e4:	0000b267 	.word	0x0000b267
    b1e8:	0000b267 	.word	0x0000b267
    b1ec:	0000b267 	.word	0x0000b267
    b1f0:	0000b267 	.word	0x0000b267
    b1f4:	0000b263 	.word	0x0000b263
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    b1f8:	68fb      	ldr	r3, [r7, #12]
    b1fa:	889b      	ldrh	r3, [r3, #4]
    b1fc:	b2db      	uxtb	r3, r3
    b1fe:	4618      	mov	r0, r3
    b200:	f7ff fb50 	bl	a8a4 <USBHwEPGetStatus>
    b204:	4603      	mov	r3, r0
    b206:	f003 0302 	and.w	r3, r3, #2
    b20a:	2b00      	cmp	r3, #0
    b20c:	bf14      	ite	ne
    b20e:	2301      	movne	r3, #1
    b210:	2300      	moveq	r3, #0
    b212:	b2db      	uxtb	r3, r3
    b214:	461a      	mov	r2, r3
    b216:	697b      	ldr	r3, [r7, #20]
    b218:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b21a:	697b      	ldr	r3, [r7, #20]
    b21c:	3301      	adds	r3, #1
    b21e:	2200      	movs	r2, #0
    b220:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b222:	68bb      	ldr	r3, [r7, #8]
    b224:	2202      	movs	r2, #2
    b226:	601a      	str	r2, [r3, #0]
		break;
    b228:	e01f      	b.n	b26a <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    b22a:	68fb      	ldr	r3, [r7, #12]
    b22c:	885b      	ldrh	r3, [r3, #2]
    b22e:	2b00      	cmp	r3, #0
    b230:	d107      	bne.n	b242 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    b232:	68fb      	ldr	r3, [r7, #12]
    b234:	889b      	ldrh	r3, [r3, #4]
    b236:	b2db      	uxtb	r3, r3
    b238:	4618      	mov	r0, r3
    b23a:	2100      	movs	r1, #0
    b23c:	f7ff fb4a 	bl	a8d4 <USBHwEPStall>
			break;
    b240:	e013      	b.n	b26a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    b242:	2300      	movs	r3, #0
    b244:	e012      	b.n	b26c <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    b246:	68fb      	ldr	r3, [r7, #12]
    b248:	885b      	ldrh	r3, [r3, #2]
    b24a:	2b00      	cmp	r3, #0
    b24c:	d107      	bne.n	b25e <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    b24e:	68fb      	ldr	r3, [r7, #12]
    b250:	889b      	ldrh	r3, [r3, #4]
    b252:	b2db      	uxtb	r3, r3
    b254:	4618      	mov	r0, r3
    b256:	2101      	movs	r1, #1
    b258:	f7ff fb3c 	bl	a8d4 <USBHwEPStall>
			break;
    b25c:	e005      	b.n	b26a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    b25e:	2300      	movs	r3, #0
    b260:	e004      	b.n	b26c <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    b262:	2300      	movs	r3, #0
    b264:	e002      	b.n	b26c <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    b266:	2300      	movs	r3, #0
    b268:	e000      	b.n	b26c <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    b26a:	2301      	movs	r3, #1
}
    b26c:	4618      	mov	r0, r3
    b26e:	3718      	adds	r7, #24
    b270:	46bd      	mov	sp, r7
    b272:	bd80      	pop	{r7, pc}

0000b274 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b274:	b580      	push	{r7, lr}
    b276:	b084      	sub	sp, #16
    b278:	af00      	add	r7, sp, #0
    b27a:	60f8      	str	r0, [r7, #12]
    b27c:	60b9      	str	r1, [r7, #8]
    b27e:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    b280:	4b19      	ldr	r3, [pc, #100]	; (b2e8 <USBHandleStandardRequest+0x74>)
    b282:	681b      	ldr	r3, [r3, #0]
    b284:	2b00      	cmp	r3, #0
    b286:	d00a      	beq.n	b29e <USBHandleStandardRequest+0x2a>
    b288:	4b17      	ldr	r3, [pc, #92]	; (b2e8 <USBHandleStandardRequest+0x74>)
    b28a:	681b      	ldr	r3, [r3, #0]
    b28c:	68f8      	ldr	r0, [r7, #12]
    b28e:	68b9      	ldr	r1, [r7, #8]
    b290:	687a      	ldr	r2, [r7, #4]
    b292:	4798      	blx	r3
    b294:	4603      	mov	r3, r0
    b296:	2b00      	cmp	r3, #0
    b298:	d001      	beq.n	b29e <USBHandleStandardRequest+0x2a>
		return TRUE;
    b29a:	2301      	movs	r3, #1
    b29c:	e01f      	b.n	b2de <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    b29e:	68fb      	ldr	r3, [r7, #12]
    b2a0:	781b      	ldrb	r3, [r3, #0]
    b2a2:	f003 031f 	and.w	r3, r3, #31
    b2a6:	2b01      	cmp	r3, #1
    b2a8:	d00a      	beq.n	b2c0 <USBHandleStandardRequest+0x4c>
    b2aa:	2b02      	cmp	r3, #2
    b2ac:	d00f      	beq.n	b2ce <USBHandleStandardRequest+0x5a>
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	d114      	bne.n	b2dc <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    b2b2:	68f8      	ldr	r0, [r7, #12]
    b2b4:	68b9      	ldr	r1, [r7, #8]
    b2b6:	687a      	ldr	r2, [r7, #4]
    b2b8:	f7ff feba 	bl	b030 <HandleStdDeviceReq>
    b2bc:	4603      	mov	r3, r0
    b2be:	e00e      	b.n	b2de <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    b2c0:	68f8      	ldr	r0, [r7, #12]
    b2c2:	68b9      	ldr	r1, [r7, #8]
    b2c4:	687a      	ldr	r2, [r7, #4]
    b2c6:	f7ff ff1d 	bl	b104 <HandleStdInterfaceReq>
    b2ca:	4603      	mov	r3, r0
    b2cc:	e007      	b.n	b2de <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    b2ce:	68f8      	ldr	r0, [r7, #12]
    b2d0:	68b9      	ldr	r1, [r7, #8]
    b2d2:	687a      	ldr	r2, [r7, #4]
    b2d4:	f7ff ff66 	bl	b1a4 <HandleStdEndPointReq>
    b2d8:	4603      	mov	r3, r0
    b2da:	e000      	b.n	b2de <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    b2dc:	2300      	movs	r3, #0
	}
}
    b2de:	4618      	mov	r0, r3
    b2e0:	3710      	adds	r7, #16
    b2e2:	46bd      	mov	sp, r7
    b2e4:	bd80      	pop	{r7, pc}
    b2e6:	bf00      	nop
    b2e8:	10000af4 	.word	0x10000af4

0000b2ec <memcmp>:
    b2ec:	2a03      	cmp	r2, #3
    b2ee:	b470      	push	{r4, r5, r6}
    b2f0:	d926      	bls.n	b340 <memcmp+0x54>
    b2f2:	ea40 0301 	orr.w	r3, r0, r1
    b2f6:	079b      	lsls	r3, r3, #30
    b2f8:	d011      	beq.n	b31e <memcmp+0x32>
    b2fa:	7804      	ldrb	r4, [r0, #0]
    b2fc:	780d      	ldrb	r5, [r1, #0]
    b2fe:	42ac      	cmp	r4, r5
    b300:	d122      	bne.n	b348 <memcmp+0x5c>
    b302:	4402      	add	r2, r0
    b304:	1c43      	adds	r3, r0, #1
    b306:	e005      	b.n	b314 <memcmp+0x28>
    b308:	f813 4b01 	ldrb.w	r4, [r3], #1
    b30c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b310:	42ac      	cmp	r4, r5
    b312:	d119      	bne.n	b348 <memcmp+0x5c>
    b314:	4293      	cmp	r3, r2
    b316:	d1f7      	bne.n	b308 <memcmp+0x1c>
    b318:	2000      	movs	r0, #0
    b31a:	bc70      	pop	{r4, r5, r6}
    b31c:	4770      	bx	lr
    b31e:	460c      	mov	r4, r1
    b320:	4603      	mov	r3, r0
    b322:	681e      	ldr	r6, [r3, #0]
    b324:	6825      	ldr	r5, [r4, #0]
    b326:	4618      	mov	r0, r3
    b328:	42ae      	cmp	r6, r5
    b32a:	4621      	mov	r1, r4
    b32c:	f103 0304 	add.w	r3, r3, #4
    b330:	f104 0404 	add.w	r4, r4, #4
    b334:	d104      	bne.n	b340 <memcmp+0x54>
    b336:	3a04      	subs	r2, #4
    b338:	2a03      	cmp	r2, #3
    b33a:	4618      	mov	r0, r3
    b33c:	4621      	mov	r1, r4
    b33e:	d8f0      	bhi.n	b322 <memcmp+0x36>
    b340:	2a00      	cmp	r2, #0
    b342:	d1da      	bne.n	b2fa <memcmp+0xe>
    b344:	4610      	mov	r0, r2
    b346:	e7e8      	b.n	b31a <memcmp+0x2e>
    b348:	1b60      	subs	r0, r4, r5
    b34a:	bc70      	pop	{r4, r5, r6}
    b34c:	4770      	bx	lr
    b34e:	bf00      	nop

0000b350 <memcpy>:
    b350:	4684      	mov	ip, r0
    b352:	ea41 0300 	orr.w	r3, r1, r0
    b356:	f013 0303 	ands.w	r3, r3, #3
    b35a:	d149      	bne.n	b3f0 <memcpy+0xa0>
    b35c:	3a40      	subs	r2, #64	; 0x40
    b35e:	d323      	bcc.n	b3a8 <memcpy+0x58>
    b360:	680b      	ldr	r3, [r1, #0]
    b362:	6003      	str	r3, [r0, #0]
    b364:	684b      	ldr	r3, [r1, #4]
    b366:	6043      	str	r3, [r0, #4]
    b368:	688b      	ldr	r3, [r1, #8]
    b36a:	6083      	str	r3, [r0, #8]
    b36c:	68cb      	ldr	r3, [r1, #12]
    b36e:	60c3      	str	r3, [r0, #12]
    b370:	690b      	ldr	r3, [r1, #16]
    b372:	6103      	str	r3, [r0, #16]
    b374:	694b      	ldr	r3, [r1, #20]
    b376:	6143      	str	r3, [r0, #20]
    b378:	698b      	ldr	r3, [r1, #24]
    b37a:	6183      	str	r3, [r0, #24]
    b37c:	69cb      	ldr	r3, [r1, #28]
    b37e:	61c3      	str	r3, [r0, #28]
    b380:	6a0b      	ldr	r3, [r1, #32]
    b382:	6203      	str	r3, [r0, #32]
    b384:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b386:	6243      	str	r3, [r0, #36]	; 0x24
    b388:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b38a:	6283      	str	r3, [r0, #40]	; 0x28
    b38c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b38e:	62c3      	str	r3, [r0, #44]	; 0x2c
    b390:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b392:	6303      	str	r3, [r0, #48]	; 0x30
    b394:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b396:	6343      	str	r3, [r0, #52]	; 0x34
    b398:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b39a:	6383      	str	r3, [r0, #56]	; 0x38
    b39c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b39e:	63c3      	str	r3, [r0, #60]	; 0x3c
    b3a0:	3040      	adds	r0, #64	; 0x40
    b3a2:	3140      	adds	r1, #64	; 0x40
    b3a4:	3a40      	subs	r2, #64	; 0x40
    b3a6:	d2db      	bcs.n	b360 <memcpy+0x10>
    b3a8:	3230      	adds	r2, #48	; 0x30
    b3aa:	d30b      	bcc.n	b3c4 <memcpy+0x74>
    b3ac:	680b      	ldr	r3, [r1, #0]
    b3ae:	6003      	str	r3, [r0, #0]
    b3b0:	684b      	ldr	r3, [r1, #4]
    b3b2:	6043      	str	r3, [r0, #4]
    b3b4:	688b      	ldr	r3, [r1, #8]
    b3b6:	6083      	str	r3, [r0, #8]
    b3b8:	68cb      	ldr	r3, [r1, #12]
    b3ba:	60c3      	str	r3, [r0, #12]
    b3bc:	3010      	adds	r0, #16
    b3be:	3110      	adds	r1, #16
    b3c0:	3a10      	subs	r2, #16
    b3c2:	d2f3      	bcs.n	b3ac <memcpy+0x5c>
    b3c4:	320c      	adds	r2, #12
    b3c6:	d305      	bcc.n	b3d4 <memcpy+0x84>
    b3c8:	f851 3b04 	ldr.w	r3, [r1], #4
    b3cc:	f840 3b04 	str.w	r3, [r0], #4
    b3d0:	3a04      	subs	r2, #4
    b3d2:	d2f9      	bcs.n	b3c8 <memcpy+0x78>
    b3d4:	3204      	adds	r2, #4
    b3d6:	d008      	beq.n	b3ea <memcpy+0x9a>
    b3d8:	07d2      	lsls	r2, r2, #31
    b3da:	bf1c      	itt	ne
    b3dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b3e0:	f800 3b01 	strbne.w	r3, [r0], #1
    b3e4:	d301      	bcc.n	b3ea <memcpy+0x9a>
    b3e6:	880b      	ldrh	r3, [r1, #0]
    b3e8:	8003      	strh	r3, [r0, #0]
    b3ea:	4660      	mov	r0, ip
    b3ec:	4770      	bx	lr
    b3ee:	bf00      	nop
    b3f0:	2a08      	cmp	r2, #8
    b3f2:	d313      	bcc.n	b41c <memcpy+0xcc>
    b3f4:	078b      	lsls	r3, r1, #30
    b3f6:	d0b1      	beq.n	b35c <memcpy+0xc>
    b3f8:	f010 0303 	ands.w	r3, r0, #3
    b3fc:	d0ae      	beq.n	b35c <memcpy+0xc>
    b3fe:	f1c3 0304 	rsb	r3, r3, #4
    b402:	1ad2      	subs	r2, r2, r3
    b404:	07db      	lsls	r3, r3, #31
    b406:	bf1c      	itt	ne
    b408:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b40c:	f800 3b01 	strbne.w	r3, [r0], #1
    b410:	d3a4      	bcc.n	b35c <memcpy+0xc>
    b412:	f831 3b02 	ldrh.w	r3, [r1], #2
    b416:	f820 3b02 	strh.w	r3, [r0], #2
    b41a:	e79f      	b.n	b35c <memcpy+0xc>
    b41c:	3a04      	subs	r2, #4
    b41e:	d3d9      	bcc.n	b3d4 <memcpy+0x84>
    b420:	3a01      	subs	r2, #1
    b422:	f811 3b01 	ldrb.w	r3, [r1], #1
    b426:	f800 3b01 	strb.w	r3, [r0], #1
    b42a:	d2f9      	bcs.n	b420 <memcpy+0xd0>
    b42c:	780b      	ldrb	r3, [r1, #0]
    b42e:	7003      	strb	r3, [r0, #0]
    b430:	784b      	ldrb	r3, [r1, #1]
    b432:	7043      	strb	r3, [r0, #1]
    b434:	788b      	ldrb	r3, [r1, #2]
    b436:	7083      	strb	r3, [r0, #2]
    b438:	4660      	mov	r0, ip
    b43a:	4770      	bx	lr

0000b43c <strlen>:
    b43c:	f020 0103 	bic.w	r1, r0, #3
    b440:	f010 0003 	ands.w	r0, r0, #3
    b444:	f1c0 0000 	rsb	r0, r0, #0
    b448:	f851 3b04 	ldr.w	r3, [r1], #4
    b44c:	f100 0c04 	add.w	ip, r0, #4
    b450:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b454:	f06f 0200 	mvn.w	r2, #0
    b458:	bf1c      	itt	ne
    b45a:	fa22 f20c 	lsrne.w	r2, r2, ip
    b45e:	4313      	orrne	r3, r2
    b460:	f04f 0c01 	mov.w	ip, #1
    b464:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b468:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b46c:	eba3 020c 	sub.w	r2, r3, ip
    b470:	ea22 0203 	bic.w	r2, r2, r3
    b474:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b478:	bf04      	itt	eq
    b47a:	f851 3b04 	ldreq.w	r3, [r1], #4
    b47e:	3004      	addeq	r0, #4
    b480:	d0f4      	beq.n	b46c <strlen+0x30>
    b482:	f1c2 0100 	rsb	r1, r2, #0
    b486:	ea02 0201 	and.w	r2, r2, r1
    b48a:	fab2 f282 	clz	r2, r2
    b48e:	f1c2 021f 	rsb	r2, r2, #31
    b492:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b496:	4770      	bx	lr
    b498:	00000043 	.word	0x00000043

0000b49c <_global_impure_ptr>:
    b49c:	10000020                                 ...

0000b4a0 <advertising_channels>:
    b4a0:	00270c00                                ..'.

0000b4a4 <data_channels>:
    b4a4:	04030201 08070605 0d0b0a09 11100f0e     ................
    b4b4:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    b4c4:	25242322 00000026                       "#$%&...

0000b4cc <whitening>:
    b4cc:	01010101 01000100 00000100 00010000     ................
    b4dc:	01000101 00010101 01010100 00010000     ................
    b4ec:	01010001 01010000 00000000 00010100     ................
    b4fc:	01000101 01010100 00000100 00010100     ................
    b50c:	00000100 00000100 00000000 01000001     ................
    b51c:	01010000 00000100 01010101 01010100     ................
    b52c:	00000000 01010101 00010101 01010000     ................
    b53c:	01010001 01000000 00000100 00010001     ................

0000b54c <whitening_index>:
    b54c:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    b55c:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    b56c:	5a541b28 662f703f                       (.TZ?p/f

0000b574 <hop_interval_lut>:
    b574:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    b584:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    b594:	120c0916 00000024                       ....$...

0000b59c <whitening_word>:
    b59c:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    b5ac:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    b5bc:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    b5cc:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    b5dc:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    b5ec:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    b5fc:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    b60c:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    b61c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b62c:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    b63c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    b64c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    b65c:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    b66c:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    b67c:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    b68c:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    b69c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    b6ac:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    b6bc:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    b6cc:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    b6dc:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    b6ec:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    b6fc:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    b70c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    b71c:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    b72c:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    b73c:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    b74c:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    b75c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    b76c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    b77c:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    b78c:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    b79c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    b7ac:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    b7bc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    b7cc:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    b7dc:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    b7ec:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    b7fc:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    b80c:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    b81c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    b82c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    b83c:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    b84c:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    b85c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    b86c:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    b87c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    b88c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    b89c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    b8ac:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    b8bc:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    b8cc:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    b8dc:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    b8ec:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    b8fc:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    b90c:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    b91c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    b92c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    b93c:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    b94c:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    b95c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b96c:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    b97c:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    b98c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    b99c:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    b9ac:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    b9bc:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    b9cc:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    b9dc:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    b9ec:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    b9fc:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    ba0c:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    ba1c:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    ba2c:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    ba3c:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    ba4c:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    ba5c:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    ba6c:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    ba7c:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    ba8c:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    ba9c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    baac:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    babc:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    bacc:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    badc:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    baec:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    bafc:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    bb0c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    bb1c:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    bb2c:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    bb3c:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    bb4c:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    bb5c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bb6c:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    bb7c:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    bb8c:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    bb9c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    bbac:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    bbbc:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    bbcc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bbdc:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    bbec:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    bbfc:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bc0c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bc1c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    bc2c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bc3c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bc4c:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    bc5c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    bc6c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    bc7c:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    bc8c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    bc9c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    bcac:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    bcbc:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    bccc:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    bcdc:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    bcec:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    bcfc:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    bd0c:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000bd1c <compile_info>:
    bd1c:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    bd2c:	31522d30 796a2820 696f6863 63796a40     0-R1 (jychoi@jyc
    bd3c:	2d696f68 30343552 3835522d 37522d30     hoi-R540-R580-R7
    bd4c:	532d3038 2d313441 32353445 3538452d     80-SA41-E452-E85
    bd5c:	32202932 2e363130 2e363020 2e393120     2) 2016. 06. 19.
    bd6c:	9dec2820 312029bc 34333a38 2030333a      (...) 18:34:30 
    bd7c:	0054534b 35313032 2d30312d 00003152     KST.2015-10-R1..
    bd8c:	00000001 00000001 00000001 00000001     ................
    bd9c:	ffff1742 ffffffff feaa0303 feaa160c     B...............
    bdac:	0002f010 65000000 ffffff07 0985096c     .......e....l...
    bdbc:	0000099e 03010200 03000100 01020001     ................
    bdcc:	00000100 04020301 04020304 03040304     ................
    bddc:	00000203                                ....

0000bde0 <abDescriptors>:
    bde0:	02000112 400000ff 60021d50 02010101     .......@P..`....
    bdf0:	02090103 01010020 096e8000 02000004     .... .....n.....
    be00:	000000ff 02820507 07000040 40020505     ........@......@
    be10:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    be20:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    be30:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    be40:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    be50:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    be60:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    be70:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    be80:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    be90:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    bea0:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    beb0:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    bec0:	66633861 36613730 00007d33 000095dd     a8cf07a63}......
    bed0:	00009611 00009629 00009711 000095c9     ....)...........
    bee0:	000095c9 000095c9 00009775 00009611     ........u.......
    bef0:	0000978d 000095c9 000095c9 000095c9     ................
    bf00:	000095dd 00009611 00009861 00009a21     ........a...!...
    bf10:	000098e1 000099a5                       ........

0000bf18 <abExtendedOsFeatureDescriptor>:
    bf18:	00000028 00040100 00000001 00000000     (...............
    bf28:	49570100 4253554e 00000000 00000000     ..WINUSB........
    bf38:	00000000 00000000                       ........

0000bf40 <_init>:
    bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf42:	bf00      	nop
    bf44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bf46:	bc08      	pop	{r3}
    bf48:	469e      	mov	lr, r3
    bf4a:	4770      	bx	lr

0000bf4c <__init_array_start>:
    bf4c:	00004339 	.word	0x00004339

0000bf50 <__frame_dummy_init_array_entry>:
    bf50:	00004139                                9A..

0000bf54 <_fini>:
    bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf56:	bf00      	nop
    bf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    bf5a:	bc08      	pop	{r3}
    bf5c:	469e      	mov	lr, r3
    bf5e:	4770      	bx	lr

0000bf60 <__fini_array_start>:
    bf60:	00004111 	.word	0x00004111

0000bf64 <__fini_array_end>:
    bf64:	00000000 	.word	0x00000000
